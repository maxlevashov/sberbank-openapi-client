<?php
/**
 * AdditionalParams
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Sberbank
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API платёжного шлюза Сбербанка
 *
 * Настоящий документ описывает программные интерфейсы платёжного шлюза Сбербанка, который позволяет проводить платежи в интернет-эквайринге.
 *
 * The version of the OpenAPI document: 1.0.7
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Sberbank\Model;

use \ArrayAccess;
use \Sberbank\ObjectSerializer;

/**
 * AdditionalParams Class Doc Comment
 *
 * @category Class
 * @description Дополнительные параметры операции. Используется при создании подписки СБП.
 * @package  Sberbank
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AdditionalParams implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'additionalParams';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'phone' => 'string',
        'subscription_id' => 'string',
        'member_id' => 'string',
        'ext_transaction_id' => 'string',
        'qrc_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'phone' => null,
        'subscription_id' => null,
        'member_id' => null,
        'ext_transaction_id' => null,
        'qrc_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'phone' => false,
        'subscription_id' => false,
        'member_id' => false,
        'ext_transaction_id' => false,
        'qrc_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'phone' => 'phone',
        'subscription_id' => 'subscriptionId',
        'member_id' => 'memberId',
        'ext_transaction_id' => 'extTransactionId',
        'qrc_id' => 'qrcId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'phone' => 'setPhone',
        'subscription_id' => 'setSubscriptionId',
        'member_id' => 'setMemberId',
        'ext_transaction_id' => 'setExtTransactionId',
        'qrc_id' => 'setQrcId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'phone' => 'getPhone',
        'subscription_id' => 'getSubscriptionId',
        'member_id' => 'getMemberId',
        'ext_transaction_id' => 'getExtTransactionId',
        'qrc_id' => 'getQrcId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('phone', $data ?? [], null);
        $this->setIfExists('subscription_id', $data ?? [], null);
        $this->setIfExists('member_id', $data ?? [], null);
        $this->setIfExists('ext_transaction_id', $data ?? [], null);
        $this->setIfExists('qrc_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['phone']) && (mb_strlen($this->container['phone']) > 15)) {
            $invalidProperties[] = "invalid value for 'phone', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['phone']) && (mb_strlen($this->container['phone']) < 13)) {
            $invalidProperties[] = "invalid value for 'phone', the character length must be bigger than or equal to 13.";
        }

        if (!is_null($this->container['phone']) && !preg_match("/^\\d{13,15}$/", $this->container['phone'])) {
            $invalidProperties[] = "invalid value for 'phone', must be conform to the pattern /^\\d{13,15}$/.";
        }

        if (!is_null($this->container['subscription_id']) && (mb_strlen($this->container['subscription_id']) > 32)) {
            $invalidProperties[] = "invalid value for 'subscription_id', the character length must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['subscription_id']) && (mb_strlen($this->container['subscription_id']) < 32)) {
            $invalidProperties[] = "invalid value for 'subscription_id', the character length must be bigger than or equal to 32.";
        }

        if (!is_null($this->container['subscription_id']) && !preg_match("/^[A-Za-z0-9]+$/", $this->container['subscription_id'])) {
            $invalidProperties[] = "invalid value for 'subscription_id', must be conform to the pattern /^[A-Za-z0-9]+$/.";
        }

        if (!is_null($this->container['member_id']) && (mb_strlen($this->container['member_id']) > 12)) {
            $invalidProperties[] = "invalid value for 'member_id', the character length must be smaller than or equal to 12.";
        }

        if (!is_null($this->container['member_id']) && (mb_strlen($this->container['member_id']) < 12)) {
            $invalidProperties[] = "invalid value for 'member_id', the character length must be bigger than or equal to 12.";
        }

        if (!is_null($this->container['member_id']) && !preg_match("/^\\d{12}$/", $this->container['member_id'])) {
            $invalidProperties[] = "invalid value for 'member_id', must be conform to the pattern /^\\d{12}$/.";
        }

        if (!is_null($this->container['ext_transaction_id']) && (mb_strlen($this->container['ext_transaction_id']) > 32)) {
            $invalidProperties[] = "invalid value for 'ext_transaction_id', the character length must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['ext_transaction_id']) && (mb_strlen($this->container['ext_transaction_id']) < 32)) {
            $invalidProperties[] = "invalid value for 'ext_transaction_id', the character length must be bigger than or equal to 32.";
        }

        if (!is_null($this->container['ext_transaction_id']) && !preg_match("/^[A-Za-z0-9]+$/", $this->container['ext_transaction_id'])) {
            $invalidProperties[] = "invalid value for 'ext_transaction_id', must be conform to the pattern /^[A-Za-z0-9]+$/.";
        }

        if (!is_null($this->container['qrc_id']) && (mb_strlen($this->container['qrc_id']) > 32)) {
            $invalidProperties[] = "invalid value for 'qrc_id', the character length must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['qrc_id']) && (mb_strlen($this->container['qrc_id']) < 32)) {
            $invalidProperties[] = "invalid value for 'qrc_id', the character length must be bigger than or equal to 32.";
        }

        if (!is_null($this->container['qrc_id']) && !preg_match("/^[A-Za-z0-9]+$/", $this->container['qrc_id'])) {
            $invalidProperties[] = "invalid value for 'qrc_id', must be conform to the pattern /^[A-Za-z0-9]+$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets phone
     *
     * @return string|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string|null $phone Маскированный Номер телефона Плательщика в формате ***********XXXX
     *
     * @return self
     */
    public function setPhone($phone)
    {
        if (is_null($phone)) {
            throw new \InvalidArgumentException('non-nullable phone cannot be null');
        }
        if ((mb_strlen($phone) > 15)) {
            throw new \InvalidArgumentException('invalid length for $phone when calling AdditionalParams., must be smaller than or equal to 15.');
        }
        if ((mb_strlen($phone) < 13)) {
            throw new \InvalidArgumentException('invalid length for $phone when calling AdditionalParams., must be bigger than or equal to 13.');
        }
        if ((!preg_match("/^\\d{13,15}$/", ObjectSerializer::toString($phone)))) {
            throw new \InvalidArgumentException("invalid value for \$phone when calling AdditionalParams., must conform to the pattern /^\\d{13,15}$/.");
        }

        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets subscription_id
     *
     * @return string|null
     */
    public function getSubscriptionId()
    {
        return $this->container['subscription_id'];
    }

    /**
     * Sets subscription_id
     *
     * @param string|null $subscription_id Идентификатор сохраненной подписки для Агента
     *
     * @return self
     */
    public function setSubscriptionId($subscription_id)
    {
        if (is_null($subscription_id)) {
            throw new \InvalidArgumentException('non-nullable subscription_id cannot be null');
        }
        if ((mb_strlen($subscription_id) > 32)) {
            throw new \InvalidArgumentException('invalid length for $subscription_id when calling AdditionalParams., must be smaller than or equal to 32.');
        }
        if ((mb_strlen($subscription_id) < 32)) {
            throw new \InvalidArgumentException('invalid length for $subscription_id when calling AdditionalParams., must be bigger than or equal to 32.');
        }
        if ((!preg_match("/^[A-Za-z0-9]+$/", ObjectSerializer::toString($subscription_id)))) {
            throw new \InvalidArgumentException("invalid value for \$subscription_id when calling AdditionalParams., must conform to the pattern /^[A-Za-z0-9]+$/.");
        }

        $this->container['subscription_id'] = $subscription_id;

        return $this;
    }

    /**
     * Gets member_id
     *
     * @return string|null
     */
    public function getMemberId()
    {
        return $this->container['member_id'];
    }

    /**
     * Sets member_id
     *
     * @param string|null $member_id Идентификатор Банка отправителя, где сохранена подписка для Агента
     *
     * @return self
     */
    public function setMemberId($member_id)
    {
        if (is_null($member_id)) {
            throw new \InvalidArgumentException('non-nullable member_id cannot be null');
        }
        if ((mb_strlen($member_id) > 12)) {
            throw new \InvalidArgumentException('invalid length for $member_id when calling AdditionalParams., must be smaller than or equal to 12.');
        }
        if ((mb_strlen($member_id) < 12)) {
            throw new \InvalidArgumentException('invalid length for $member_id when calling AdditionalParams., must be bigger than or equal to 12.');
        }
        if ((!preg_match("/^\\d{12}$/", ObjectSerializer::toString($member_id)))) {
            throw new \InvalidArgumentException("invalid value for \$member_id when calling AdditionalParams., must conform to the pattern /^\\d{12}$/.");
        }

        $this->container['member_id'] = $member_id;

        return $this;
    }

    /**
     * Gets ext_transaction_id
     *
     * @return string|null
     */
    public function getExtTransactionId()
    {
        return $this->container['ext_transaction_id'];
    }

    /**
     * Sets ext_transaction_id
     *
     * @param string|null $ext_transaction_id Идентификатор Операции СБП C2B
     *
     * @return self
     */
    public function setExtTransactionId($ext_transaction_id)
    {
        if (is_null($ext_transaction_id)) {
            throw new \InvalidArgumentException('non-nullable ext_transaction_id cannot be null');
        }
        if ((mb_strlen($ext_transaction_id) > 32)) {
            throw new \InvalidArgumentException('invalid length for $ext_transaction_id when calling AdditionalParams., must be smaller than or equal to 32.');
        }
        if ((mb_strlen($ext_transaction_id) < 32)) {
            throw new \InvalidArgumentException('invalid length for $ext_transaction_id when calling AdditionalParams., must be bigger than or equal to 32.');
        }
        if ((!preg_match("/^[A-Za-z0-9]+$/", ObjectSerializer::toString($ext_transaction_id)))) {
            throw new \InvalidArgumentException("invalid value for \$ext_transaction_id when calling AdditionalParams., must conform to the pattern /^[A-Za-z0-9]+$/.");
        }

        $this->container['ext_transaction_id'] = $ext_transaction_id;

        return $this;
    }

    /**
     * Gets qrc_id
     *
     * @return string|null
     */
    public function getQrcId()
    {
        return $this->container['qrc_id'];
    }

    /**
     * Sets qrc_id
     *
     * @param string|null $qrc_id Идентификатор функциональной ссылки
     *
     * @return self
     */
    public function setQrcId($qrc_id)
    {
        if (is_null($qrc_id)) {
            throw new \InvalidArgumentException('non-nullable qrc_id cannot be null');
        }
        if ((mb_strlen($qrc_id) > 32)) {
            throw new \InvalidArgumentException('invalid length for $qrc_id when calling AdditionalParams., must be smaller than or equal to 32.');
        }
        if ((mb_strlen($qrc_id) < 32)) {
            throw new \InvalidArgumentException('invalid length for $qrc_id when calling AdditionalParams., must be bigger than or equal to 32.');
        }
        if ((!preg_match("/^[A-Za-z0-9]+$/", ObjectSerializer::toString($qrc_id)))) {
            throw new \InvalidArgumentException("invalid value for \$qrc_id when calling AdditionalParams., must conform to the pattern /^[A-Za-z0-9]+$/.");
        }

        $this->container['qrc_id'] = $qrc_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


