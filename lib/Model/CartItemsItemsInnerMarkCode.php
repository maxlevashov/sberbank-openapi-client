<?php
/**
 * CartItemsItemsInnerMarkCode
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Sberbank
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API платёжного шлюза Сбербанка
 *
 * Настоящий документ описывает программные интерфейсы платёжного шлюза Сбербанка, который позволяет проводить платежи в интернет-эквайринге.
 *
 * The version of the OpenAPI document: 1.0.7
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Sberbank\Model;

use \ArrayAccess;
use \Sberbank\ObjectSerializer;

/**
 * CartItemsItemsInnerMarkCode Class Doc Comment
 *
 * @category Class
 * @description __Тег ФФД 1163.__ Используется только при продаже маркированных товаров в ФФД 1.2. Блок элементов с кодом товара. Обязательна передача одного из полей. Правила формирования значений:  Приложение №2 к Приказу ФНС России от 14.09.2020 №ЕД-7-20/662 (Таблица 118)
 * @package  Sberbank
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CartItemsItemsInnerMarkCode implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'cartItems_items_inner_markCode';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'gs1m' => 'string',
        'fur' => 'string',
        'gs10' => 'string',
        'ean8' => 'string',
        'ean13' => 'string',
        'itf14' => 'string',
        'short' => 'string',
        'unknown' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'gs1m' => null,
        'fur' => null,
        'gs10' => null,
        'ean8' => null,
        'ean13' => null,
        'itf14' => null,
        'short' => null,
        'unknown' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'gs1m' => false,
        'fur' => false,
        'gs10' => false,
        'ean8' => false,
        'ean13' => false,
        'itf14' => false,
        'short' => false,
        'unknown' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'gs1m' => 'gs1m',
        'fur' => 'fur',
        'gs10' => 'gs10',
        'ean8' => 'ean8',
        'ean13' => 'ean13',
        'itf14' => 'itf14',
        'short' => 'short',
        'unknown' => 'unknown'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'gs1m' => 'setGs1m',
        'fur' => 'setFur',
        'gs10' => 'setGs10',
        'ean8' => 'setEan8',
        'ean13' => 'setEan13',
        'itf14' => 'setItf14',
        'short' => 'setShort',
        'unknown' => 'setUnknown'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'gs1m' => 'getGs1m',
        'fur' => 'getFur',
        'gs10' => 'getGs10',
        'ean8' => 'getEan8',
        'ean13' => 'getEan13',
        'itf14' => 'getItf14',
        'short' => 'getShort',
        'unknown' => 'getUnknown'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('gs1m', $data ?? [], null);
        $this->setIfExists('fur', $data ?? [], null);
        $this->setIfExists('gs10', $data ?? [], null);
        $this->setIfExists('ean8', $data ?? [], null);
        $this->setIfExists('ean13', $data ?? [], null);
        $this->setIfExists('itf14', $data ?? [], null);
        $this->setIfExists('short', $data ?? [], null);
        $this->setIfExists('unknown', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['gs1m']) && (mb_strlen($this->container['gs1m']) > 200)) {
            $invalidProperties[] = "invalid value for 'gs1m', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['gs1m']) && (mb_strlen($this->container['gs1m']) < 1)) {
            $invalidProperties[] = "invalid value for 'gs1m', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['gs1m']) && !preg_match("/^[ -~А-Яа-яЁё№]*$/", $this->container['gs1m'])) {
            $invalidProperties[] = "invalid value for 'gs1m', must be conform to the pattern /^[ -~А-Яа-яЁё№]*$/.";
        }

        if (!is_null($this->container['fur']) && (mb_strlen($this->container['fur']) > 20)) {
            $invalidProperties[] = "invalid value for 'fur', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['fur']) && (mb_strlen($this->container['fur']) < 20)) {
            $invalidProperties[] = "invalid value for 'fur', the character length must be bigger than or equal to 20.";
        }

        if (!is_null($this->container['fur']) && !preg_match("/^[ -~А-Яа-яЁё№]*$/", $this->container['fur'])) {
            $invalidProperties[] = "invalid value for 'fur', must be conform to the pattern /^[ -~А-Яа-яЁё№]*$/.";
        }

        if (!is_null($this->container['gs10']) && (mb_strlen($this->container['gs10']) > 38)) {
            $invalidProperties[] = "invalid value for 'gs10', the character length must be smaller than or equal to 38.";
        }

        if (!is_null($this->container['gs10']) && (mb_strlen($this->container['gs10']) < 1)) {
            $invalidProperties[] = "invalid value for 'gs10', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['gs10']) && !preg_match("/^[ -~А-Яа-яЁё№]*$/", $this->container['gs10'])) {
            $invalidProperties[] = "invalid value for 'gs10', must be conform to the pattern /^[ -~А-Яа-яЁё№]*$/.";
        }

        if (!is_null($this->container['ean8']) && (mb_strlen($this->container['ean8']) > 8)) {
            $invalidProperties[] = "invalid value for 'ean8', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['ean8']) && (mb_strlen($this->container['ean8']) < 8)) {
            $invalidProperties[] = "invalid value for 'ean8', the character length must be bigger than or equal to 8.";
        }

        if (!is_null($this->container['ean8']) && !preg_match("/^\\d+$/", $this->container['ean8'])) {
            $invalidProperties[] = "invalid value for 'ean8', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['ean13']) && (mb_strlen($this->container['ean13']) > 13)) {
            $invalidProperties[] = "invalid value for 'ean13', the character length must be smaller than or equal to 13.";
        }

        if (!is_null($this->container['ean13']) && (mb_strlen($this->container['ean13']) < 13)) {
            $invalidProperties[] = "invalid value for 'ean13', the character length must be bigger than or equal to 13.";
        }

        if (!is_null($this->container['ean13']) && !preg_match("/^\\d+$/", $this->container['ean13'])) {
            $invalidProperties[] = "invalid value for 'ean13', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['itf14']) && (mb_strlen($this->container['itf14']) > 14)) {
            $invalidProperties[] = "invalid value for 'itf14', the character length must be smaller than or equal to 14.";
        }

        if (!is_null($this->container['itf14']) && (mb_strlen($this->container['itf14']) < 14)) {
            $invalidProperties[] = "invalid value for 'itf14', the character length must be bigger than or equal to 14.";
        }

        if (!is_null($this->container['itf14']) && !preg_match("/^\\d+$/", $this->container['itf14'])) {
            $invalidProperties[] = "invalid value for 'itf14', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['short']) && (mb_strlen($this->container['short']) > 38)) {
            $invalidProperties[] = "invalid value for 'short', the character length must be smaller than or equal to 38.";
        }

        if (!is_null($this->container['short']) && (mb_strlen($this->container['short']) < 1)) {
            $invalidProperties[] = "invalid value for 'short', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['short']) && !preg_match("/^[ -~А-Яа-яЁё№]*$/", $this->container['short'])) {
            $invalidProperties[] = "invalid value for 'short', must be conform to the pattern /^[ -~А-Яа-яЁё№]*$/.";
        }

        if (!is_null($this->container['unknown']) && (mb_strlen($this->container['unknown']) > 32)) {
            $invalidProperties[] = "invalid value for 'unknown', the character length must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['unknown']) && (mb_strlen($this->container['unknown']) < 1)) {
            $invalidProperties[] = "invalid value for 'unknown', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['unknown']) && !preg_match("/^[ -~А-Яа-яЁё№]*$/", $this->container['unknown'])) {
            $invalidProperties[] = "invalid value for 'unknown', must be conform to the pattern /^[ -~А-Яа-яЁё№]*$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets gs1m
     *
     * @return string|null
     */
    public function getGs1m()
    {
        return $this->container['gs1m'];
    }

    /**
     * Sets gs1m
     *
     * @param string|null $gs1m __Тег ФФД 1305.__ Код товара в формате GS1.M. Перед отправкой необходимо кодировать строку с кодом товара в Base64.
     *
     * @return self
     */
    public function setGs1m($gs1m)
    {
        if (is_null($gs1m)) {
            throw new \InvalidArgumentException('non-nullable gs1m cannot be null');
        }
        if ((mb_strlen($gs1m) > 200)) {
            throw new \InvalidArgumentException('invalid length for $gs1m when calling CartItemsItemsInnerMarkCode., must be smaller than or equal to 200.');
        }
        if ((mb_strlen($gs1m) < 1)) {
            throw new \InvalidArgumentException('invalid length for $gs1m when calling CartItemsItemsInnerMarkCode., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~А-Яа-яЁё№]*$/", ObjectSerializer::toString($gs1m)))) {
            throw new \InvalidArgumentException("invalid value for \$gs1m when calling CartItemsItemsInnerMarkCode., must conform to the pattern /^[ -~А-Яа-яЁё№]*$/.");
        }

        $this->container['gs1m'] = $gs1m;

        return $this;
    }

    /**
     * Gets fur
     *
     * @return string|null
     */
    public function getFur()
    {
        return $this->container['fur'];
    }

    /**
     * Sets fur
     *
     * @param string|null $fur __Тег ФФД 1307.__ Контрольно-идентификационный знак мехового изделия. Должен соответствовать маске СС-ЦЦЦЦЦЦ-СССССССССС.
     *
     * @return self
     */
    public function setFur($fur)
    {
        if (is_null($fur)) {
            throw new \InvalidArgumentException('non-nullable fur cannot be null');
        }
        if ((mb_strlen($fur) > 20)) {
            throw new \InvalidArgumentException('invalid length for $fur when calling CartItemsItemsInnerMarkCode., must be smaller than or equal to 20.');
        }
        if ((mb_strlen($fur) < 20)) {
            throw new \InvalidArgumentException('invalid length for $fur when calling CartItemsItemsInnerMarkCode., must be bigger than or equal to 20.');
        }
        if ((!preg_match("/^[ -~А-Яа-яЁё№]*$/", ObjectSerializer::toString($fur)))) {
            throw new \InvalidArgumentException("invalid value for \$fur when calling CartItemsItemsInnerMarkCode., must conform to the pattern /^[ -~А-Яа-яЁё№]*$/.");
        }

        $this->container['fur'] = $fur;

        return $this;
    }

    /**
     * Gets gs10
     *
     * @return string|null
     */
    public function getGs10()
    {
        return $this->container['gs10'];
    }

    /**
     * Sets gs10
     *
     * @param string|null $gs10 __Тег ФФД 1304.__ Код товара в формате GS1
     *
     * @return self
     */
    public function setGs10($gs10)
    {
        if (is_null($gs10)) {
            throw new \InvalidArgumentException('non-nullable gs10 cannot be null');
        }
        if ((mb_strlen($gs10) > 38)) {
            throw new \InvalidArgumentException('invalid length for $gs10 when calling CartItemsItemsInnerMarkCode., must be smaller than or equal to 38.');
        }
        if ((mb_strlen($gs10) < 1)) {
            throw new \InvalidArgumentException('invalid length for $gs10 when calling CartItemsItemsInnerMarkCode., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~А-Яа-яЁё№]*$/", ObjectSerializer::toString($gs10)))) {
            throw new \InvalidArgumentException("invalid value for \$gs10 when calling CartItemsItemsInnerMarkCode., must conform to the pattern /^[ -~А-Яа-яЁё№]*$/.");
        }

        $this->container['gs10'] = $gs10;

        return $this;
    }

    /**
     * Gets ean8
     *
     * @return string|null
     */
    public function getEan8()
    {
        return $this->container['ean8'];
    }

    /**
     * Sets ean8
     *
     * @param string|null $ean8 __Тег ФФД 1301.__ Код товара в формате EAN-8
     *
     * @return self
     */
    public function setEan8($ean8)
    {
        if (is_null($ean8)) {
            throw new \InvalidArgumentException('non-nullable ean8 cannot be null');
        }
        if ((mb_strlen($ean8) > 8)) {
            throw new \InvalidArgumentException('invalid length for $ean8 when calling CartItemsItemsInnerMarkCode., must be smaller than or equal to 8.');
        }
        if ((mb_strlen($ean8) < 8)) {
            throw new \InvalidArgumentException('invalid length for $ean8 when calling CartItemsItemsInnerMarkCode., must be bigger than or equal to 8.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($ean8)))) {
            throw new \InvalidArgumentException("invalid value for \$ean8 when calling CartItemsItemsInnerMarkCode., must conform to the pattern /^\\d+$/.");
        }

        $this->container['ean8'] = $ean8;

        return $this;
    }

    /**
     * Gets ean13
     *
     * @return string|null
     */
    public function getEan13()
    {
        return $this->container['ean13'];
    }

    /**
     * Sets ean13
     *
     * @param string|null $ean13 __Тег ФФД 1302.__ Код товара в формате EAN-13
     *
     * @return self
     */
    public function setEan13($ean13)
    {
        if (is_null($ean13)) {
            throw new \InvalidArgumentException('non-nullable ean13 cannot be null');
        }
        if ((mb_strlen($ean13) > 13)) {
            throw new \InvalidArgumentException('invalid length for $ean13 when calling CartItemsItemsInnerMarkCode., must be smaller than or equal to 13.');
        }
        if ((mb_strlen($ean13) < 13)) {
            throw new \InvalidArgumentException('invalid length for $ean13 when calling CartItemsItemsInnerMarkCode., must be bigger than or equal to 13.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($ean13)))) {
            throw new \InvalidArgumentException("invalid value for \$ean13 when calling CartItemsItemsInnerMarkCode., must conform to the pattern /^\\d+$/.");
        }

        $this->container['ean13'] = $ean13;

        return $this;
    }

    /**
     * Gets itf14
     *
     * @return string|null
     */
    public function getItf14()
    {
        return $this->container['itf14'];
    }

    /**
     * Sets itf14
     *
     * @param string|null $itf14 __Тег ФФД 1303.__ Код товара в формате ITF-14
     *
     * @return self
     */
    public function setItf14($itf14)
    {
        if (is_null($itf14)) {
            throw new \InvalidArgumentException('non-nullable itf14 cannot be null');
        }
        if ((mb_strlen($itf14) > 14)) {
            throw new \InvalidArgumentException('invalid length for $itf14 when calling CartItemsItemsInnerMarkCode., must be smaller than or equal to 14.');
        }
        if ((mb_strlen($itf14) < 14)) {
            throw new \InvalidArgumentException('invalid length for $itf14 when calling CartItemsItemsInnerMarkCode., must be bigger than or equal to 14.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($itf14)))) {
            throw new \InvalidArgumentException("invalid value for \$itf14 when calling CartItemsItemsInnerMarkCode., must conform to the pattern /^\\d+$/.");
        }

        $this->container['itf14'] = $itf14;

        return $this;
    }

    /**
     * Gets short
     *
     * @return string|null
     */
    public function getShort()
    {
        return $this->container['short'];
    }

    /**
     * Sets short
     *
     * @param string|null $short __Тег ФФД 1306.__ Код товара в формате короткого кода маркировки
     *
     * @return self
     */
    public function setShort($short)
    {
        if (is_null($short)) {
            throw new \InvalidArgumentException('non-nullable short cannot be null');
        }
        if ((mb_strlen($short) > 38)) {
            throw new \InvalidArgumentException('invalid length for $short when calling CartItemsItemsInnerMarkCode., must be smaller than or equal to 38.');
        }
        if ((mb_strlen($short) < 1)) {
            throw new \InvalidArgumentException('invalid length for $short when calling CartItemsItemsInnerMarkCode., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~А-Яа-яЁё№]*$/", ObjectSerializer::toString($short)))) {
            throw new \InvalidArgumentException("invalid value for \$short when calling CartItemsItemsInnerMarkCode., must conform to the pattern /^[ -~А-Яа-яЁё№]*$/.");
        }

        $this->container['short'] = $short;

        return $this;
    }

    /**
     * Gets unknown
     *
     * @return string|null
     */
    public function getUnknown()
    {
        return $this->container['unknown'];
    }

    /**
     * Sets unknown
     *
     * @param string|null $unknown __Тег ФФД 1300.__ Нераспознанный код товара
     *
     * @return self
     */
    public function setUnknown($unknown)
    {
        if (is_null($unknown)) {
            throw new \InvalidArgumentException('non-nullable unknown cannot be null');
        }
        if ((mb_strlen($unknown) > 32)) {
            throw new \InvalidArgumentException('invalid length for $unknown when calling CartItemsItemsInnerMarkCode., must be smaller than or equal to 32.');
        }
        if ((mb_strlen($unknown) < 1)) {
            throw new \InvalidArgumentException('invalid length for $unknown when calling CartItemsItemsInnerMarkCode., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~А-Яа-яЁё№]*$/", ObjectSerializer::toString($unknown)))) {
            throw new \InvalidArgumentException("invalid value for \$unknown when calling CartItemsItemsInnerMarkCode., must conform to the pattern /^[ -~А-Яа-яЁё№]*$/.");
        }

        $this->container['unknown'] = $unknown;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


