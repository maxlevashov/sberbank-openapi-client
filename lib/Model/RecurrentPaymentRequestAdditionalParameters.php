<?php
/**
 * RecurrentPaymentRequestAdditionalParameters
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Sberbank
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API платёжного шлюза Сбербанка
 *
 * Настоящий документ описывает программные интерфейсы платёжного шлюза Сбербанка, который позволяет проводить платежи в интернет-эквайринге.
 *
 * The version of the OpenAPI document: 1.0.7
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Sberbank\Model;

use \ArrayAccess;
use \Sberbank\ObjectSerializer;

/**
 * RecurrentPaymentRequestAdditionalParameters Class Doc Comment
 *
 * @category Class
 * @description Блок для передачи дополнительных параметров Клиентом.
 * @package  Sberbank
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RecurrentPaymentRequestAdditionalParameters implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'recurrentPaymentRequest_additionalParameters';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'has_valuable_items' => 'string',
        'acct_id' => 'string',
        'ch_acc_date' => 'string',
        'ch_acc_age_ind' => 'string',
        'ch_acc_change_ind' => 'string',
        'ship_addr_city' => 'string',
        'ship_delivery_point_id' => 'string',
        'mri_reorder_items_ind' => 'string',
        'mobile_phone' => 'string',
        'ship_name_indicator' => 'string',
        'suspicious_acc_activity' => 'string',
        'provision_attempts_day' => 'string',
        'ship_addr_line1' => 'string',
        'ship_addr_line2' => 'string',
        'ship_addr_line3' => 'string',
        'ship_address_usage' => 'string',
        'ship_address_usage_ind' => 'string',
        'mri_delivery_timeframe' => 'string',
        'mri_ship_indicator' => 'string',
        'ch_acc_pw_change' => 'string',
        'ch_acc_pw_change_ind' => 'string',
        'nb_purchase_account' => 'string',
        'txn_activity_day' => 'string',
        'txn_activity_year' => 'string',
        'payment_acc_age' => 'string',
        'payment_acc_ind' => 'string',
        'ch_acc_change' => 'string',
        'sbrf_spasiboamount_bonus' => 'int',
        'name1' => 'mixed',
        'name2' => 'mixed'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'has_valuable_items' => null,
        'acct_id' => null,
        'ch_acc_date' => null,
        'ch_acc_age_ind' => null,
        'ch_acc_change_ind' => null,
        'ship_addr_city' => null,
        'ship_delivery_point_id' => null,
        'mri_reorder_items_ind' => null,
        'mobile_phone' => null,
        'ship_name_indicator' => null,
        'suspicious_acc_activity' => null,
        'provision_attempts_day' => null,
        'ship_addr_line1' => null,
        'ship_addr_line2' => null,
        'ship_addr_line3' => null,
        'ship_address_usage' => null,
        'ship_address_usage_ind' => null,
        'mri_delivery_timeframe' => null,
        'mri_ship_indicator' => null,
        'ch_acc_pw_change' => null,
        'ch_acc_pw_change_ind' => null,
        'nb_purchase_account' => null,
        'txn_activity_day' => null,
        'txn_activity_year' => null,
        'payment_acc_age' => null,
        'payment_acc_ind' => null,
        'ch_acc_change' => null,
        'sbrf_spasiboamount_bonus' => null,
        'name1' => null,
        'name2' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'has_valuable_items' => false,
        'acct_id' => false,
        'ch_acc_date' => false,
        'ch_acc_age_ind' => false,
        'ch_acc_change_ind' => false,
        'ship_addr_city' => false,
        'ship_delivery_point_id' => false,
        'mri_reorder_items_ind' => false,
        'mobile_phone' => false,
        'ship_name_indicator' => false,
        'suspicious_acc_activity' => false,
        'provision_attempts_day' => false,
        'ship_addr_line1' => false,
        'ship_addr_line2' => false,
        'ship_addr_line3' => false,
        'ship_address_usage' => false,
        'ship_address_usage_ind' => false,
        'mri_delivery_timeframe' => false,
        'mri_ship_indicator' => false,
        'ch_acc_pw_change' => false,
        'ch_acc_pw_change_ind' => false,
        'nb_purchase_account' => false,
        'txn_activity_day' => false,
        'txn_activity_year' => false,
        'payment_acc_age' => false,
        'payment_acc_ind' => false,
        'ch_acc_change' => false,
        'sbrf_spasiboamount_bonus' => false,
        'name1' => true,
        'name2' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'has_valuable_items' => 'hasValuableItems',
        'acct_id' => 'acctId',
        'ch_acc_date' => 'chAccDate',
        'ch_acc_age_ind' => 'chAccAgeInd',
        'ch_acc_change_ind' => 'chAccChangeInd',
        'ship_addr_city' => 'shipAddrCity',
        'ship_delivery_point_id' => 'shipDeliveryPointId',
        'mri_reorder_items_ind' => 'mriReorderItemsInd',
        'mobile_phone' => 'mobilePhone',
        'ship_name_indicator' => 'shipNameIndicator',
        'suspicious_acc_activity' => 'suspiciousAccActivity',
        'provision_attempts_day' => 'provisionAttemptsDay',
        'ship_addr_line1' => 'shipAddrLine1',
        'ship_addr_line2' => 'shipAddrLine2',
        'ship_addr_line3' => 'shipAddrLine3',
        'ship_address_usage' => 'shipAddressUsage',
        'ship_address_usage_ind' => 'shipAddressUsageInd',
        'mri_delivery_timeframe' => 'mriDeliveryTimeframe',
        'mri_ship_indicator' => 'mriShipIndicator',
        'ch_acc_pw_change' => 'chAccPwChange',
        'ch_acc_pw_change_ind' => 'chAccPwChangeInd',
        'nb_purchase_account' => 'nbPurchaseAccount',
        'txn_activity_day' => 'txnActivityDay',
        'txn_activity_year' => 'txnActivityYear',
        'payment_acc_age' => 'paymentAccAge',
        'payment_acc_ind' => 'paymentAccInd',
        'ch_acc_change' => 'chAccChange',
        'sbrf_spasiboamount_bonus' => 'sbrf_spasibo:amount_bonus',
        'name1' => 'name1',
        'name2' => 'name2'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'has_valuable_items' => 'setHasValuableItems',
        'acct_id' => 'setAcctId',
        'ch_acc_date' => 'setChAccDate',
        'ch_acc_age_ind' => 'setChAccAgeInd',
        'ch_acc_change_ind' => 'setChAccChangeInd',
        'ship_addr_city' => 'setShipAddrCity',
        'ship_delivery_point_id' => 'setShipDeliveryPointId',
        'mri_reorder_items_ind' => 'setMriReorderItemsInd',
        'mobile_phone' => 'setMobilePhone',
        'ship_name_indicator' => 'setShipNameIndicator',
        'suspicious_acc_activity' => 'setSuspiciousAccActivity',
        'provision_attempts_day' => 'setProvisionAttemptsDay',
        'ship_addr_line1' => 'setShipAddrLine1',
        'ship_addr_line2' => 'setShipAddrLine2',
        'ship_addr_line3' => 'setShipAddrLine3',
        'ship_address_usage' => 'setShipAddressUsage',
        'ship_address_usage_ind' => 'setShipAddressUsageInd',
        'mri_delivery_timeframe' => 'setMriDeliveryTimeframe',
        'mri_ship_indicator' => 'setMriShipIndicator',
        'ch_acc_pw_change' => 'setChAccPwChange',
        'ch_acc_pw_change_ind' => 'setChAccPwChangeInd',
        'nb_purchase_account' => 'setNbPurchaseAccount',
        'txn_activity_day' => 'setTxnActivityDay',
        'txn_activity_year' => 'setTxnActivityYear',
        'payment_acc_age' => 'setPaymentAccAge',
        'payment_acc_ind' => 'setPaymentAccInd',
        'ch_acc_change' => 'setChAccChange',
        'sbrf_spasiboamount_bonus' => 'setSbrfSpasiboamountBonus',
        'name1' => 'setName1',
        'name2' => 'setName2'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'has_valuable_items' => 'getHasValuableItems',
        'acct_id' => 'getAcctId',
        'ch_acc_date' => 'getChAccDate',
        'ch_acc_age_ind' => 'getChAccAgeInd',
        'ch_acc_change_ind' => 'getChAccChangeInd',
        'ship_addr_city' => 'getShipAddrCity',
        'ship_delivery_point_id' => 'getShipDeliveryPointId',
        'mri_reorder_items_ind' => 'getMriReorderItemsInd',
        'mobile_phone' => 'getMobilePhone',
        'ship_name_indicator' => 'getShipNameIndicator',
        'suspicious_acc_activity' => 'getSuspiciousAccActivity',
        'provision_attempts_day' => 'getProvisionAttemptsDay',
        'ship_addr_line1' => 'getShipAddrLine1',
        'ship_addr_line2' => 'getShipAddrLine2',
        'ship_addr_line3' => 'getShipAddrLine3',
        'ship_address_usage' => 'getShipAddressUsage',
        'ship_address_usage_ind' => 'getShipAddressUsageInd',
        'mri_delivery_timeframe' => 'getMriDeliveryTimeframe',
        'mri_ship_indicator' => 'getMriShipIndicator',
        'ch_acc_pw_change' => 'getChAccPwChange',
        'ch_acc_pw_change_ind' => 'getChAccPwChangeInd',
        'nb_purchase_account' => 'getNbPurchaseAccount',
        'txn_activity_day' => 'getTxnActivityDay',
        'txn_activity_year' => 'getTxnActivityYear',
        'payment_acc_age' => 'getPaymentAccAge',
        'payment_acc_ind' => 'getPaymentAccInd',
        'ch_acc_change' => 'getChAccChange',
        'sbrf_spasiboamount_bonus' => 'getSbrfSpasiboamountBonus',
        'name1' => 'getName1',
        'name2' => 'getName2'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('has_valuable_items', $data ?? [], null);
        $this->setIfExists('acct_id', $data ?? [], null);
        $this->setIfExists('ch_acc_date', $data ?? [], null);
        $this->setIfExists('ch_acc_age_ind', $data ?? [], null);
        $this->setIfExists('ch_acc_change_ind', $data ?? [], null);
        $this->setIfExists('ship_addr_city', $data ?? [], null);
        $this->setIfExists('ship_delivery_point_id', $data ?? [], null);
        $this->setIfExists('mri_reorder_items_ind', $data ?? [], null);
        $this->setIfExists('mobile_phone', $data ?? [], null);
        $this->setIfExists('ship_name_indicator', $data ?? [], null);
        $this->setIfExists('suspicious_acc_activity', $data ?? [], null);
        $this->setIfExists('provision_attempts_day', $data ?? [], null);
        $this->setIfExists('ship_addr_line1', $data ?? [], null);
        $this->setIfExists('ship_addr_line2', $data ?? [], null);
        $this->setIfExists('ship_addr_line3', $data ?? [], null);
        $this->setIfExists('ship_address_usage', $data ?? [], null);
        $this->setIfExists('ship_address_usage_ind', $data ?? [], null);
        $this->setIfExists('mri_delivery_timeframe', $data ?? [], null);
        $this->setIfExists('mri_ship_indicator', $data ?? [], null);
        $this->setIfExists('ch_acc_pw_change', $data ?? [], null);
        $this->setIfExists('ch_acc_pw_change_ind', $data ?? [], null);
        $this->setIfExists('nb_purchase_account', $data ?? [], null);
        $this->setIfExists('txn_activity_day', $data ?? [], null);
        $this->setIfExists('txn_activity_year', $data ?? [], null);
        $this->setIfExists('payment_acc_age', $data ?? [], null);
        $this->setIfExists('payment_acc_ind', $data ?? [], null);
        $this->setIfExists('ch_acc_change', $data ?? [], null);
        $this->setIfExists('sbrf_spasiboamount_bonus', $data ?? [], null);
        $this->setIfExists('name1', $data ?? [], null);
        $this->setIfExists('name2', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['has_valuable_items']) && (mb_strlen($this->container['has_valuable_items']) > 2)) {
            $invalidProperties[] = "invalid value for 'has_valuable_items', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['has_valuable_items']) && (mb_strlen($this->container['has_valuable_items']) < 2)) {
            $invalidProperties[] = "invalid value for 'has_valuable_items', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['has_valuable_items']) && !preg_match("/^\\d+$/", $this->container['has_valuable_items'])) {
            $invalidProperties[] = "invalid value for 'has_valuable_items', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['acct_id']) && (mb_strlen($this->container['acct_id']) > 64)) {
            $invalidProperties[] = "invalid value for 'acct_id', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['acct_id']) && (mb_strlen($this->container['acct_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'acct_id', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['acct_id']) && !preg_match("/^[ -~]*$/", $this->container['acct_id'])) {
            $invalidProperties[] = "invalid value for 'acct_id', must be conform to the pattern /^[ -~]*$/.";
        }

        if (!is_null($this->container['ch_acc_date']) && (mb_strlen($this->container['ch_acc_date']) > 8)) {
            $invalidProperties[] = "invalid value for 'ch_acc_date', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['ch_acc_date']) && (mb_strlen($this->container['ch_acc_date']) < 8)) {
            $invalidProperties[] = "invalid value for 'ch_acc_date', the character length must be bigger than or equal to 8.";
        }

        if (!is_null($this->container['ch_acc_date']) && !preg_match("/^\\d+$/", $this->container['ch_acc_date'])) {
            $invalidProperties[] = "invalid value for 'ch_acc_date', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['ch_acc_age_ind']) && (mb_strlen($this->container['ch_acc_age_ind']) > 2)) {
            $invalidProperties[] = "invalid value for 'ch_acc_age_ind', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['ch_acc_age_ind']) && (mb_strlen($this->container['ch_acc_age_ind']) < 2)) {
            $invalidProperties[] = "invalid value for 'ch_acc_age_ind', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['ch_acc_age_ind']) && !preg_match("/^\\d+$/", $this->container['ch_acc_age_ind'])) {
            $invalidProperties[] = "invalid value for 'ch_acc_age_ind', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['ch_acc_change_ind']) && (mb_strlen($this->container['ch_acc_change_ind']) > 2)) {
            $invalidProperties[] = "invalid value for 'ch_acc_change_ind', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['ch_acc_change_ind']) && (mb_strlen($this->container['ch_acc_change_ind']) < 2)) {
            $invalidProperties[] = "invalid value for 'ch_acc_change_ind', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['ch_acc_change_ind']) && !preg_match("/^\\d+$/", $this->container['ch_acc_change_ind'])) {
            $invalidProperties[] = "invalid value for 'ch_acc_change_ind', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['ship_addr_city']) && (mb_strlen($this->container['ship_addr_city']) > 50)) {
            $invalidProperties[] = "invalid value for 'ship_addr_city', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['ship_addr_city']) && (mb_strlen($this->container['ship_addr_city']) < 1)) {
            $invalidProperties[] = "invalid value for 'ship_addr_city', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['ship_addr_city']) && !preg_match("/^[ -~А-Яа-яЁё№]*$/", $this->container['ship_addr_city'])) {
            $invalidProperties[] = "invalid value for 'ship_addr_city', must be conform to the pattern /^[ -~А-Яа-яЁё№]*$/.";
        }

        if (!is_null($this->container['ship_delivery_point_id']) && (mb_strlen($this->container['ship_delivery_point_id']) > 50)) {
            $invalidProperties[] = "invalid value for 'ship_delivery_point_id', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['ship_delivery_point_id']) && (mb_strlen($this->container['ship_delivery_point_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'ship_delivery_point_id', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['ship_delivery_point_id']) && !preg_match("/^[ -~А-Яа-яЁё№]*$/", $this->container['ship_delivery_point_id'])) {
            $invalidProperties[] = "invalid value for 'ship_delivery_point_id', must be conform to the pattern /^[ -~А-Яа-яЁё№]*$/.";
        }

        if (!is_null($this->container['mri_reorder_items_ind']) && (mb_strlen($this->container['mri_reorder_items_ind']) > 2)) {
            $invalidProperties[] = "invalid value for 'mri_reorder_items_ind', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['mri_reorder_items_ind']) && (mb_strlen($this->container['mri_reorder_items_ind']) < 2)) {
            $invalidProperties[] = "invalid value for 'mri_reorder_items_ind', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['mri_reorder_items_ind']) && !preg_match("/^\\d+$/", $this->container['mri_reorder_items_ind'])) {
            $invalidProperties[] = "invalid value for 'mri_reorder_items_ind', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['mobile_phone']) && (mb_strlen($this->container['mobile_phone']) > 19)) {
            $invalidProperties[] = "invalid value for 'mobile_phone', the character length must be smaller than or equal to 19.";
        }

        if (!is_null($this->container['mobile_phone']) && (mb_strlen($this->container['mobile_phone']) < 1)) {
            $invalidProperties[] = "invalid value for 'mobile_phone', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['mobile_phone']) && !preg_match("/^[\\d\\-]*$/", $this->container['mobile_phone'])) {
            $invalidProperties[] = "invalid value for 'mobile_phone', must be conform to the pattern /^[\\d\\-]*$/.";
        }

        if (!is_null($this->container['ship_name_indicator']) && (mb_strlen($this->container['ship_name_indicator']) > 2)) {
            $invalidProperties[] = "invalid value for 'ship_name_indicator', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['ship_name_indicator']) && (mb_strlen($this->container['ship_name_indicator']) < 2)) {
            $invalidProperties[] = "invalid value for 'ship_name_indicator', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['ship_name_indicator']) && !preg_match("/^\\d+$/", $this->container['ship_name_indicator'])) {
            $invalidProperties[] = "invalid value for 'ship_name_indicator', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['suspicious_acc_activity']) && (mb_strlen($this->container['suspicious_acc_activity']) > 2)) {
            $invalidProperties[] = "invalid value for 'suspicious_acc_activity', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['suspicious_acc_activity']) && (mb_strlen($this->container['suspicious_acc_activity']) < 2)) {
            $invalidProperties[] = "invalid value for 'suspicious_acc_activity', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['suspicious_acc_activity']) && !preg_match("/^\\d+$/", $this->container['suspicious_acc_activity'])) {
            $invalidProperties[] = "invalid value for 'suspicious_acc_activity', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['provision_attempts_day']) && (mb_strlen($this->container['provision_attempts_day']) > 4)) {
            $invalidProperties[] = "invalid value for 'provision_attempts_day', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['provision_attempts_day']) && (mb_strlen($this->container['provision_attempts_day']) < 1)) {
            $invalidProperties[] = "invalid value for 'provision_attempts_day', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['provision_attempts_day']) && !preg_match("/^\\d+$/", $this->container['provision_attempts_day'])) {
            $invalidProperties[] = "invalid value for 'provision_attempts_day', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['ship_addr_line1']) && (mb_strlen($this->container['ship_addr_line1']) > 50)) {
            $invalidProperties[] = "invalid value for 'ship_addr_line1', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['ship_addr_line1']) && (mb_strlen($this->container['ship_addr_line1']) < 1)) {
            $invalidProperties[] = "invalid value for 'ship_addr_line1', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['ship_addr_line1']) && !preg_match("/^[ -~А-Яа-яЁё№]*$/", $this->container['ship_addr_line1'])) {
            $invalidProperties[] = "invalid value for 'ship_addr_line1', must be conform to the pattern /^[ -~А-Яа-яЁё№]*$/.";
        }

        if (!is_null($this->container['ship_addr_line2']) && (mb_strlen($this->container['ship_addr_line2']) > 50)) {
            $invalidProperties[] = "invalid value for 'ship_addr_line2', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['ship_addr_line2']) && (mb_strlen($this->container['ship_addr_line2']) < 1)) {
            $invalidProperties[] = "invalid value for 'ship_addr_line2', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['ship_addr_line2']) && !preg_match("/^[ -~А-Яа-яЁё№]*$/", $this->container['ship_addr_line2'])) {
            $invalidProperties[] = "invalid value for 'ship_addr_line2', must be conform to the pattern /^[ -~А-Яа-яЁё№]*$/.";
        }

        if (!is_null($this->container['ship_addr_line3']) && (mb_strlen($this->container['ship_addr_line3']) > 50)) {
            $invalidProperties[] = "invalid value for 'ship_addr_line3', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['ship_addr_line3']) && (mb_strlen($this->container['ship_addr_line3']) < 1)) {
            $invalidProperties[] = "invalid value for 'ship_addr_line3', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['ship_addr_line3']) && !preg_match("/^[ -~А-Яа-яЁё№]*$/", $this->container['ship_addr_line3'])) {
            $invalidProperties[] = "invalid value for 'ship_addr_line3', must be conform to the pattern /^[ -~А-Яа-яЁё№]*$/.";
        }

        if (!is_null($this->container['ship_address_usage']) && (mb_strlen($this->container['ship_address_usage']) > 8)) {
            $invalidProperties[] = "invalid value for 'ship_address_usage', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['ship_address_usage']) && (mb_strlen($this->container['ship_address_usage']) < 8)) {
            $invalidProperties[] = "invalid value for 'ship_address_usage', the character length must be bigger than or equal to 8.";
        }

        if (!is_null($this->container['ship_address_usage']) && !preg_match("/^\\d+$/", $this->container['ship_address_usage'])) {
            $invalidProperties[] = "invalid value for 'ship_address_usage', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['ship_address_usage_ind']) && (mb_strlen($this->container['ship_address_usage_ind']) > 2)) {
            $invalidProperties[] = "invalid value for 'ship_address_usage_ind', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['ship_address_usage_ind']) && (mb_strlen($this->container['ship_address_usage_ind']) < 2)) {
            $invalidProperties[] = "invalid value for 'ship_address_usage_ind', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['ship_address_usage_ind']) && !preg_match("/^\\d+$/", $this->container['ship_address_usage_ind'])) {
            $invalidProperties[] = "invalid value for 'ship_address_usage_ind', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['mri_delivery_timeframe']) && (mb_strlen($this->container['mri_delivery_timeframe']) > 2)) {
            $invalidProperties[] = "invalid value for 'mri_delivery_timeframe', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['mri_delivery_timeframe']) && (mb_strlen($this->container['mri_delivery_timeframe']) < 1)) {
            $invalidProperties[] = "invalid value for 'mri_delivery_timeframe', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['mri_delivery_timeframe']) && !preg_match("/^\\d+$/", $this->container['mri_delivery_timeframe'])) {
            $invalidProperties[] = "invalid value for 'mri_delivery_timeframe', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['mri_ship_indicator']) && (mb_strlen($this->container['mri_ship_indicator']) > 2)) {
            $invalidProperties[] = "invalid value for 'mri_ship_indicator', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['mri_ship_indicator']) && (mb_strlen($this->container['mri_ship_indicator']) < 2)) {
            $invalidProperties[] = "invalid value for 'mri_ship_indicator', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['mri_ship_indicator']) && !preg_match("/^\\d+$/", $this->container['mri_ship_indicator'])) {
            $invalidProperties[] = "invalid value for 'mri_ship_indicator', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['ch_acc_pw_change']) && (mb_strlen($this->container['ch_acc_pw_change']) > 8)) {
            $invalidProperties[] = "invalid value for 'ch_acc_pw_change', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['ch_acc_pw_change']) && (mb_strlen($this->container['ch_acc_pw_change']) < 8)) {
            $invalidProperties[] = "invalid value for 'ch_acc_pw_change', the character length must be bigger than or equal to 8.";
        }

        if (!is_null($this->container['ch_acc_pw_change']) && !preg_match("/^\\d+$/", $this->container['ch_acc_pw_change'])) {
            $invalidProperties[] = "invalid value for 'ch_acc_pw_change', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['ch_acc_pw_change_ind']) && (mb_strlen($this->container['ch_acc_pw_change_ind']) > 2)) {
            $invalidProperties[] = "invalid value for 'ch_acc_pw_change_ind', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['ch_acc_pw_change_ind']) && (mb_strlen($this->container['ch_acc_pw_change_ind']) < 2)) {
            $invalidProperties[] = "invalid value for 'ch_acc_pw_change_ind', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['ch_acc_pw_change_ind']) && !preg_match("/^\\d+$/", $this->container['ch_acc_pw_change_ind'])) {
            $invalidProperties[] = "invalid value for 'ch_acc_pw_change_ind', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['nb_purchase_account']) && (mb_strlen($this->container['nb_purchase_account']) > 4)) {
            $invalidProperties[] = "invalid value for 'nb_purchase_account', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['nb_purchase_account']) && (mb_strlen($this->container['nb_purchase_account']) < 1)) {
            $invalidProperties[] = "invalid value for 'nb_purchase_account', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['nb_purchase_account']) && !preg_match("/^\\d+$/", $this->container['nb_purchase_account'])) {
            $invalidProperties[] = "invalid value for 'nb_purchase_account', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['txn_activity_day']) && (mb_strlen($this->container['txn_activity_day']) > 3)) {
            $invalidProperties[] = "invalid value for 'txn_activity_day', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['txn_activity_day']) && (mb_strlen($this->container['txn_activity_day']) < 1)) {
            $invalidProperties[] = "invalid value for 'txn_activity_day', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['txn_activity_day']) && !preg_match("/^\\d+$/", $this->container['txn_activity_day'])) {
            $invalidProperties[] = "invalid value for 'txn_activity_day', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['txn_activity_year']) && (mb_strlen($this->container['txn_activity_year']) > 3)) {
            $invalidProperties[] = "invalid value for 'txn_activity_year', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['txn_activity_year']) && (mb_strlen($this->container['txn_activity_year']) < 1)) {
            $invalidProperties[] = "invalid value for 'txn_activity_year', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['txn_activity_year']) && !preg_match("/^\\d+$/", $this->container['txn_activity_year'])) {
            $invalidProperties[] = "invalid value for 'txn_activity_year', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['payment_acc_age']) && (mb_strlen($this->container['payment_acc_age']) > 8)) {
            $invalidProperties[] = "invalid value for 'payment_acc_age', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['payment_acc_age']) && (mb_strlen($this->container['payment_acc_age']) < 8)) {
            $invalidProperties[] = "invalid value for 'payment_acc_age', the character length must be bigger than or equal to 8.";
        }

        if (!is_null($this->container['payment_acc_age']) && !preg_match("/^\\d+$/", $this->container['payment_acc_age'])) {
            $invalidProperties[] = "invalid value for 'payment_acc_age', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['payment_acc_ind']) && (mb_strlen($this->container['payment_acc_ind']) > 2)) {
            $invalidProperties[] = "invalid value for 'payment_acc_ind', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['payment_acc_ind']) && (mb_strlen($this->container['payment_acc_ind']) < 2)) {
            $invalidProperties[] = "invalid value for 'payment_acc_ind', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['payment_acc_ind']) && !preg_match("/^\\d+$/", $this->container['payment_acc_ind'])) {
            $invalidProperties[] = "invalid value for 'payment_acc_ind', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['ch_acc_change']) && (mb_strlen($this->container['ch_acc_change']) > 8)) {
            $invalidProperties[] = "invalid value for 'ch_acc_change', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['ch_acc_change']) && (mb_strlen($this->container['ch_acc_change']) < 8)) {
            $invalidProperties[] = "invalid value for 'ch_acc_change', the character length must be bigger than or equal to 8.";
        }

        if (!is_null($this->container['ch_acc_change']) && !preg_match("/^\\d+$/", $this->container['ch_acc_change'])) {
            $invalidProperties[] = "invalid value for 'ch_acc_change', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['sbrf_spasiboamount_bonus']) && ($this->container['sbrf_spasiboamount_bonus'] > 4294967200)) {
            $invalidProperties[] = "invalid value for 'sbrf_spasiboamount_bonus', must be smaller than or equal to 4294967200.";
        }

        if (!is_null($this->container['sbrf_spasiboamount_bonus']) && ($this->container['sbrf_spasiboamount_bonus'] < 0)) {
            $invalidProperties[] = "invalid value for 'sbrf_spasiboamount_bonus', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets has_valuable_items
     *
     * @return string|null
     */
    public function getHasValuableItems()
    {
        return $this->container['has_valuable_items'];
    }

    /**
     * Sets has_valuable_items
     *
     * @param string|null $has_valuable_items Маркер наличия высоколиквидной электроники в заказе:  * `00` = Не содержит высоколиквидной электроники;  * `01` = Содержит высоколиквидную электронику;
     *
     * @return self
     */
    public function setHasValuableItems($has_valuable_items)
    {
        if (is_null($has_valuable_items)) {
            throw new \InvalidArgumentException('non-nullable has_valuable_items cannot be null');
        }
        if ((mb_strlen($has_valuable_items) > 2)) {
            throw new \InvalidArgumentException('invalid length for $has_valuable_items when calling RecurrentPaymentRequestAdditionalParameters., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($has_valuable_items) < 2)) {
            throw new \InvalidArgumentException('invalid length for $has_valuable_items when calling RecurrentPaymentRequestAdditionalParameters., must be bigger than or equal to 2.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($has_valuable_items)))) {
            throw new \InvalidArgumentException("invalid value for \$has_valuable_items when calling RecurrentPaymentRequestAdditionalParameters., must conform to the pattern /^\\d+$/.");
        }

        $this->container['has_valuable_items'] = $has_valuable_items;

        return $this;
    }

    /**
     * Gets acct_id
     *
     * @return string|null
     */
    public function getAcctId()
    {
        return $this->container['acct_id'];
    }

    /**
     * Sets acct_id
     *
     * @param string|null $acct_id Идентификатор аккаунта Плательщика в ТСП
     *
     * @return self
     */
    public function setAcctId($acct_id)
    {
        if (is_null($acct_id)) {
            throw new \InvalidArgumentException('non-nullable acct_id cannot be null');
        }
        if ((mb_strlen($acct_id) > 64)) {
            throw new \InvalidArgumentException('invalid length for $acct_id when calling RecurrentPaymentRequestAdditionalParameters., must be smaller than or equal to 64.');
        }
        if ((mb_strlen($acct_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $acct_id when calling RecurrentPaymentRequestAdditionalParameters., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~]*$/", ObjectSerializer::toString($acct_id)))) {
            throw new \InvalidArgumentException("invalid value for \$acct_id when calling RecurrentPaymentRequestAdditionalParameters., must conform to the pattern /^[ -~]*$/.");
        }

        $this->container['acct_id'] = $acct_id;

        return $this;
    }

    /**
     * Gets ch_acc_date
     *
     * @return string|null
     */
    public function getChAccDate()
    {
        return $this->container['ch_acc_date'];
    }

    /**
     * Sets ch_acc_date
     *
     * @param string|null $ch_acc_date Дата создания аккаунта Плательщика в ТСП в формате YYYYMMDD
     *
     * @return self
     */
    public function setChAccDate($ch_acc_date)
    {
        if (is_null($ch_acc_date)) {
            throw new \InvalidArgumentException('non-nullable ch_acc_date cannot be null');
        }
        if ((mb_strlen($ch_acc_date) > 8)) {
            throw new \InvalidArgumentException('invalid length for $ch_acc_date when calling RecurrentPaymentRequestAdditionalParameters., must be smaller than or equal to 8.');
        }
        if ((mb_strlen($ch_acc_date) < 8)) {
            throw new \InvalidArgumentException('invalid length for $ch_acc_date when calling RecurrentPaymentRequestAdditionalParameters., must be bigger than or equal to 8.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($ch_acc_date)))) {
            throw new \InvalidArgumentException("invalid value for \$ch_acc_date when calling RecurrentPaymentRequestAdditionalParameters., must conform to the pattern /^\\d+$/.");
        }

        $this->container['ch_acc_date'] = $ch_acc_date;

        return $this;
    }

    /**
     * Gets ch_acc_age_ind
     *
     * @return string|null
     */
    public function getChAccAgeInd()
    {
        return $this->container['ch_acc_age_ind'];
    }

    /**
     * Sets ch_acc_age_ind
     *
     * @param string|null $ch_acc_age_ind Возраст аккаунта Плательщика в ТСП:   * `01` = No account (guest check-out);   * `02` = Created during this transaction;   * `03` = Less than 30 days;   * `04` = 30-60 days;   * `05` = More than 60 days.
     *
     * @return self
     */
    public function setChAccAgeInd($ch_acc_age_ind)
    {
        if (is_null($ch_acc_age_ind)) {
            throw new \InvalidArgumentException('non-nullable ch_acc_age_ind cannot be null');
        }
        if ((mb_strlen($ch_acc_age_ind) > 2)) {
            throw new \InvalidArgumentException('invalid length for $ch_acc_age_ind when calling RecurrentPaymentRequestAdditionalParameters., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($ch_acc_age_ind) < 2)) {
            throw new \InvalidArgumentException('invalid length for $ch_acc_age_ind when calling RecurrentPaymentRequestAdditionalParameters., must be bigger than or equal to 2.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($ch_acc_age_ind)))) {
            throw new \InvalidArgumentException("invalid value for \$ch_acc_age_ind when calling RecurrentPaymentRequestAdditionalParameters., must conform to the pattern /^\\d+$/.");
        }

        $this->container['ch_acc_age_ind'] = $ch_acc_age_ind;

        return $this;
    }

    /**
     * Gets ch_acc_change_ind
     *
     * @return string|null
     */
    public function getChAccChangeInd()
    {
        return $this->container['ch_acc_change_ind'];
    }

    /**
     * Sets ch_acc_change_ind
     *
     * @param string|null $ch_acc_change_ind Период времени с последнего редактирования аккаунта Плательщика в ТСП:   * `01` = Changed during this transaction;   * `02` = Less than 30 days;   * `03` = 30-60 days;   * `04` = More than 60 days.
     *
     * @return self
     */
    public function setChAccChangeInd($ch_acc_change_ind)
    {
        if (is_null($ch_acc_change_ind)) {
            throw new \InvalidArgumentException('non-nullable ch_acc_change_ind cannot be null');
        }
        if ((mb_strlen($ch_acc_change_ind) > 2)) {
            throw new \InvalidArgumentException('invalid length for $ch_acc_change_ind when calling RecurrentPaymentRequestAdditionalParameters., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($ch_acc_change_ind) < 2)) {
            throw new \InvalidArgumentException('invalid length for $ch_acc_change_ind when calling RecurrentPaymentRequestAdditionalParameters., must be bigger than or equal to 2.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($ch_acc_change_ind)))) {
            throw new \InvalidArgumentException("invalid value for \$ch_acc_change_ind when calling RecurrentPaymentRequestAdditionalParameters., must conform to the pattern /^\\d+$/.");
        }

        $this->container['ch_acc_change_ind'] = $ch_acc_change_ind;

        return $this;
    }

    /**
     * Gets ship_addr_city
     *
     * @return string|null
     */
    public function getShipAddrCity()
    {
        return $this->container['ship_addr_city'];
    }

    /**
     * Sets ship_addr_city
     *
     * @param string|null $ship_addr_city Город доставки товара
     *
     * @return self
     */
    public function setShipAddrCity($ship_addr_city)
    {
        if (is_null($ship_addr_city)) {
            throw new \InvalidArgumentException('non-nullable ship_addr_city cannot be null');
        }
        if ((mb_strlen($ship_addr_city) > 50)) {
            throw new \InvalidArgumentException('invalid length for $ship_addr_city when calling RecurrentPaymentRequestAdditionalParameters., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($ship_addr_city) < 1)) {
            throw new \InvalidArgumentException('invalid length for $ship_addr_city when calling RecurrentPaymentRequestAdditionalParameters., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~А-Яа-яЁё№]*$/", ObjectSerializer::toString($ship_addr_city)))) {
            throw new \InvalidArgumentException("invalid value for \$ship_addr_city when calling RecurrentPaymentRequestAdditionalParameters., must conform to the pattern /^[ -~А-Яа-яЁё№]*$/.");
        }

        $this->container['ship_addr_city'] = $ship_addr_city;

        return $this;
    }

    /**
     * Gets ship_delivery_point_id
     *
     * @return string|null
     */
    public function getShipDeliveryPointId()
    {
        return $this->container['ship_delivery_point_id'];
    }

    /**
     * Sets ship_delivery_point_id
     *
     * @param string|null $ship_delivery_point_id Идентификатор ПВЗ доставки товара
     *
     * @return self
     */
    public function setShipDeliveryPointId($ship_delivery_point_id)
    {
        if (is_null($ship_delivery_point_id)) {
            throw new \InvalidArgumentException('non-nullable ship_delivery_point_id cannot be null');
        }
        if ((mb_strlen($ship_delivery_point_id) > 50)) {
            throw new \InvalidArgumentException('invalid length for $ship_delivery_point_id when calling RecurrentPaymentRequestAdditionalParameters., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($ship_delivery_point_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $ship_delivery_point_id when calling RecurrentPaymentRequestAdditionalParameters., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~А-Яа-яЁё№]*$/", ObjectSerializer::toString($ship_delivery_point_id)))) {
            throw new \InvalidArgumentException("invalid value for \$ship_delivery_point_id when calling RecurrentPaymentRequestAdditionalParameters., must conform to the pattern /^[ -~А-Яа-яЁё№]*$/.");
        }

        $this->container['ship_delivery_point_id'] = $ship_delivery_point_id;

        return $this;
    }

    /**
     * Gets mri_reorder_items_ind
     *
     * @return string|null
     */
    public function getMriReorderItemsInd()
    {
        return $this->container['mri_reorder_items_ind'];
    }

    /**
     * Sets mri_reorder_items_ind
     *
     * @param string|null $mri_reorder_items_ind Индикатор повторной покупки в ТСП:   * `01` = First time ordered;   * `02` = Reordered.
     *
     * @return self
     */
    public function setMriReorderItemsInd($mri_reorder_items_ind)
    {
        if (is_null($mri_reorder_items_ind)) {
            throw new \InvalidArgumentException('non-nullable mri_reorder_items_ind cannot be null');
        }
        if ((mb_strlen($mri_reorder_items_ind) > 2)) {
            throw new \InvalidArgumentException('invalid length for $mri_reorder_items_ind when calling RecurrentPaymentRequestAdditionalParameters., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($mri_reorder_items_ind) < 2)) {
            throw new \InvalidArgumentException('invalid length for $mri_reorder_items_ind when calling RecurrentPaymentRequestAdditionalParameters., must be bigger than or equal to 2.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($mri_reorder_items_ind)))) {
            throw new \InvalidArgumentException("invalid value for \$mri_reorder_items_ind when calling RecurrentPaymentRequestAdditionalParameters., must conform to the pattern /^\\d+$/.");
        }

        $this->container['mri_reorder_items_ind'] = $mri_reorder_items_ind;

        return $this;
    }

    /**
     * Gets mobile_phone
     *
     * @return string|null
     */
    public function getMobilePhone()
    {
        return $this->container['mobile_phone'];
    }

    /**
     * Sets mobile_phone
     *
     * @param string|null $mobile_phone Мобильный телефон в формате \"код страны\"-\"номер телефона\" (например, 7-4951234567) согласно ITU-E.164
     *
     * @return self
     */
    public function setMobilePhone($mobile_phone)
    {
        if (is_null($mobile_phone)) {
            throw new \InvalidArgumentException('non-nullable mobile_phone cannot be null');
        }
        if ((mb_strlen($mobile_phone) > 19)) {
            throw new \InvalidArgumentException('invalid length for $mobile_phone when calling RecurrentPaymentRequestAdditionalParameters., must be smaller than or equal to 19.');
        }
        if ((mb_strlen($mobile_phone) < 1)) {
            throw new \InvalidArgumentException('invalid length for $mobile_phone when calling RecurrentPaymentRequestAdditionalParameters., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[\\d\\-]*$/", ObjectSerializer::toString($mobile_phone)))) {
            throw new \InvalidArgumentException("invalid value for \$mobile_phone when calling RecurrentPaymentRequestAdditionalParameters., must conform to the pattern /^[\\d\\-]*$/.");
        }

        $this->container['mobile_phone'] = $mobile_phone;

        return $this;
    }

    /**
     * Gets ship_name_indicator
     *
     * @return string|null
     */
    public function getShipNameIndicator()
    {
        return $this->container['ship_name_indicator'];
    }

    /**
     * Sets ship_name_indicator
     *
     * @param string|null $ship_name_indicator Признак соответствия имени в аккаунте Плательщика и имени получателя заказа:   * `01` = Account Name identical to shipping Name;   * `02` = Account Name different than shipping Name.
     *
     * @return self
     */
    public function setShipNameIndicator($ship_name_indicator)
    {
        if (is_null($ship_name_indicator)) {
            throw new \InvalidArgumentException('non-nullable ship_name_indicator cannot be null');
        }
        if ((mb_strlen($ship_name_indicator) > 2)) {
            throw new \InvalidArgumentException('invalid length for $ship_name_indicator when calling RecurrentPaymentRequestAdditionalParameters., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($ship_name_indicator) < 2)) {
            throw new \InvalidArgumentException('invalid length for $ship_name_indicator when calling RecurrentPaymentRequestAdditionalParameters., must be bigger than or equal to 2.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($ship_name_indicator)))) {
            throw new \InvalidArgumentException("invalid value for \$ship_name_indicator when calling RecurrentPaymentRequestAdditionalParameters., must conform to the pattern /^\\d+$/.");
        }

        $this->container['ship_name_indicator'] = $ship_name_indicator;

        return $this;
    }

    /**
     * Gets suspicious_acc_activity
     *
     * @return string|null
     */
    public function getSuspiciousAccActivity()
    {
        return $this->container['suspicious_acc_activity'];
    }

    /**
     * Sets suspicious_acc_activity
     *
     * @param string|null $suspicious_acc_activity Признак наличия случаев подозрительной активности (включая предыдущие случаи мошенничества) для аккаунта Плательщика:   * `01` = No suspicious activity has been observed;   * `02` = Suspicious activity has been observed.
     *
     * @return self
     */
    public function setSuspiciousAccActivity($suspicious_acc_activity)
    {
        if (is_null($suspicious_acc_activity)) {
            throw new \InvalidArgumentException('non-nullable suspicious_acc_activity cannot be null');
        }
        if ((mb_strlen($suspicious_acc_activity) > 2)) {
            throw new \InvalidArgumentException('invalid length for $suspicious_acc_activity when calling RecurrentPaymentRequestAdditionalParameters., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($suspicious_acc_activity) < 2)) {
            throw new \InvalidArgumentException('invalid length for $suspicious_acc_activity when calling RecurrentPaymentRequestAdditionalParameters., must be bigger than or equal to 2.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($suspicious_acc_activity)))) {
            throw new \InvalidArgumentException("invalid value for \$suspicious_acc_activity when calling RecurrentPaymentRequestAdditionalParameters., must conform to the pattern /^\\d+$/.");
        }

        $this->container['suspicious_acc_activity'] = $suspicious_acc_activity;

        return $this;
    }

    /**
     * Gets provision_attempts_day
     *
     * @return string|null
     */
    public function getProvisionAttemptsDay()
    {
        return $this->container['provision_attempts_day'];
    }

    /**
     * Sets provision_attempts_day
     *
     * @param string|null $provision_attempts_day Количество попыток добавления карты за последние 24 часа
     *
     * @return self
     */
    public function setProvisionAttemptsDay($provision_attempts_day)
    {
        if (is_null($provision_attempts_day)) {
            throw new \InvalidArgumentException('non-nullable provision_attempts_day cannot be null');
        }
        if ((mb_strlen($provision_attempts_day) > 4)) {
            throw new \InvalidArgumentException('invalid length for $provision_attempts_day when calling RecurrentPaymentRequestAdditionalParameters., must be smaller than or equal to 4.');
        }
        if ((mb_strlen($provision_attempts_day) < 1)) {
            throw new \InvalidArgumentException('invalid length for $provision_attempts_day when calling RecurrentPaymentRequestAdditionalParameters., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($provision_attempts_day)))) {
            throw new \InvalidArgumentException("invalid value for \$provision_attempts_day when calling RecurrentPaymentRequestAdditionalParameters., must conform to the pattern /^\\d+$/.");
        }

        $this->container['provision_attempts_day'] = $provision_attempts_day;

        return $this;
    }

    /**
     * Gets ship_addr_line1
     *
     * @return string|null
     */
    public function getShipAddrLine1()
    {
        return $this->container['ship_addr_line1'];
    }

    /**
     * Sets ship_addr_line1
     *
     * @param string|null $ship_addr_line1 Адрес доставки товара
     *
     * @return self
     */
    public function setShipAddrLine1($ship_addr_line1)
    {
        if (is_null($ship_addr_line1)) {
            throw new \InvalidArgumentException('non-nullable ship_addr_line1 cannot be null');
        }
        if ((mb_strlen($ship_addr_line1) > 50)) {
            throw new \InvalidArgumentException('invalid length for $ship_addr_line1 when calling RecurrentPaymentRequestAdditionalParameters., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($ship_addr_line1) < 1)) {
            throw new \InvalidArgumentException('invalid length for $ship_addr_line1 when calling RecurrentPaymentRequestAdditionalParameters., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~А-Яа-яЁё№]*$/", ObjectSerializer::toString($ship_addr_line1)))) {
            throw new \InvalidArgumentException("invalid value for \$ship_addr_line1 when calling RecurrentPaymentRequestAdditionalParameters., must conform to the pattern /^[ -~А-Яа-яЁё№]*$/.");
        }

        $this->container['ship_addr_line1'] = $ship_addr_line1;

        return $this;
    }

    /**
     * Gets ship_addr_line2
     *
     * @return string|null
     */
    public function getShipAddrLine2()
    {
        return $this->container['ship_addr_line2'];
    }

    /**
     * Sets ship_addr_line2
     *
     * @param string|null $ship_addr_line2 Адрес доставки товара
     *
     * @return self
     */
    public function setShipAddrLine2($ship_addr_line2)
    {
        if (is_null($ship_addr_line2)) {
            throw new \InvalidArgumentException('non-nullable ship_addr_line2 cannot be null');
        }
        if ((mb_strlen($ship_addr_line2) > 50)) {
            throw new \InvalidArgumentException('invalid length for $ship_addr_line2 when calling RecurrentPaymentRequestAdditionalParameters., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($ship_addr_line2) < 1)) {
            throw new \InvalidArgumentException('invalid length for $ship_addr_line2 when calling RecurrentPaymentRequestAdditionalParameters., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~А-Яа-яЁё№]*$/", ObjectSerializer::toString($ship_addr_line2)))) {
            throw new \InvalidArgumentException("invalid value for \$ship_addr_line2 when calling RecurrentPaymentRequestAdditionalParameters., must conform to the pattern /^[ -~А-Яа-яЁё№]*$/.");
        }

        $this->container['ship_addr_line2'] = $ship_addr_line2;

        return $this;
    }

    /**
     * Gets ship_addr_line3
     *
     * @return string|null
     */
    public function getShipAddrLine3()
    {
        return $this->container['ship_addr_line3'];
    }

    /**
     * Sets ship_addr_line3
     *
     * @param string|null $ship_addr_line3 Адрес доставки товара
     *
     * @return self
     */
    public function setShipAddrLine3($ship_addr_line3)
    {
        if (is_null($ship_addr_line3)) {
            throw new \InvalidArgumentException('non-nullable ship_addr_line3 cannot be null');
        }
        if ((mb_strlen($ship_addr_line3) > 50)) {
            throw new \InvalidArgumentException('invalid length for $ship_addr_line3 when calling RecurrentPaymentRequestAdditionalParameters., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($ship_addr_line3) < 1)) {
            throw new \InvalidArgumentException('invalid length for $ship_addr_line3 when calling RecurrentPaymentRequestAdditionalParameters., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~А-Яа-яЁё№]*$/", ObjectSerializer::toString($ship_addr_line3)))) {
            throw new \InvalidArgumentException("invalid value for \$ship_addr_line3 when calling RecurrentPaymentRequestAdditionalParameters., must conform to the pattern /^[ -~А-Яа-яЁё№]*$/.");
        }

        $this->container['ship_addr_line3'] = $ship_addr_line3;

        return $this;
    }

    /**
     * Gets ship_address_usage
     *
     * @return string|null
     */
    public function getShipAddressUsage()
    {
        return $this->container['ship_address_usage'];
    }

    /**
     * Sets ship_address_usage
     *
     * @param string|null $ship_address_usage Дата первого использования адреса доставки для аккаунта Плательщика в формате YYYYMMDD
     *
     * @return self
     */
    public function setShipAddressUsage($ship_address_usage)
    {
        if (is_null($ship_address_usage)) {
            throw new \InvalidArgumentException('non-nullable ship_address_usage cannot be null');
        }
        if ((mb_strlen($ship_address_usage) > 8)) {
            throw new \InvalidArgumentException('invalid length for $ship_address_usage when calling RecurrentPaymentRequestAdditionalParameters., must be smaller than or equal to 8.');
        }
        if ((mb_strlen($ship_address_usage) < 8)) {
            throw new \InvalidArgumentException('invalid length for $ship_address_usage when calling RecurrentPaymentRequestAdditionalParameters., must be bigger than or equal to 8.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($ship_address_usage)))) {
            throw new \InvalidArgumentException("invalid value for \$ship_address_usage when calling RecurrentPaymentRequestAdditionalParameters., must conform to the pattern /^\\d+$/.");
        }

        $this->container['ship_address_usage'] = $ship_address_usage;

        return $this;
    }

    /**
     * Gets ship_address_usage_ind
     *
     * @return string|null
     */
    public function getShipAddressUsageInd()
    {
        return $this->container['ship_address_usage_ind'];
    }

    /**
     * Sets ship_address_usage_ind
     *
     * @param string|null $ship_address_usage_ind Период времени с момента первого использования адреса доставки для аккаунта Плательщика:   * `01` = This transaction;   * `02` = Less than 30 days;   * `03` = 30-60 days;   * `04` = More than 60 days.
     *
     * @return self
     */
    public function setShipAddressUsageInd($ship_address_usage_ind)
    {
        if (is_null($ship_address_usage_ind)) {
            throw new \InvalidArgumentException('non-nullable ship_address_usage_ind cannot be null');
        }
        if ((mb_strlen($ship_address_usage_ind) > 2)) {
            throw new \InvalidArgumentException('invalid length for $ship_address_usage_ind when calling RecurrentPaymentRequestAdditionalParameters., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($ship_address_usage_ind) < 2)) {
            throw new \InvalidArgumentException('invalid length for $ship_address_usage_ind when calling RecurrentPaymentRequestAdditionalParameters., must be bigger than or equal to 2.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($ship_address_usage_ind)))) {
            throw new \InvalidArgumentException("invalid value for \$ship_address_usage_ind when calling RecurrentPaymentRequestAdditionalParameters., must conform to the pattern /^\\d+$/.");
        }

        $this->container['ship_address_usage_ind'] = $ship_address_usage_ind;

        return $this;
    }

    /**
     * Gets mri_delivery_timeframe
     *
     * @return string|null
     */
    public function getMriDeliveryTimeframe()
    {
        return $this->container['mri_delivery_timeframe'];
    }

    /**
     * Sets mri_delivery_timeframe
     *
     * @param string|null $mri_delivery_timeframe Срок доставки товара: * `01` = Electronic Delivery; * `02` = Same day shipping; * `03` = Overnight shipping; * `04` = Two-day or more shipping.
     *
     * @return self
     */
    public function setMriDeliveryTimeframe($mri_delivery_timeframe)
    {
        if (is_null($mri_delivery_timeframe)) {
            throw new \InvalidArgumentException('non-nullable mri_delivery_timeframe cannot be null');
        }
        if ((mb_strlen($mri_delivery_timeframe) > 2)) {
            throw new \InvalidArgumentException('invalid length for $mri_delivery_timeframe when calling RecurrentPaymentRequestAdditionalParameters., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($mri_delivery_timeframe) < 1)) {
            throw new \InvalidArgumentException('invalid length for $mri_delivery_timeframe when calling RecurrentPaymentRequestAdditionalParameters., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($mri_delivery_timeframe)))) {
            throw new \InvalidArgumentException("invalid value for \$mri_delivery_timeframe when calling RecurrentPaymentRequestAdditionalParameters., must conform to the pattern /^\\d+$/.");
        }

        $this->container['mri_delivery_timeframe'] = $mri_delivery_timeframe;

        return $this;
    }

    /**
     * Gets mri_ship_indicator
     *
     * @return string|null
     */
    public function getMriShipIndicator()
    {
        return $this->container['mri_ship_indicator'];
    }

    /**
     * Sets mri_ship_indicator
     *
     * @param string|null $mri_ship_indicator Способ доставки, выбранный для операции:   * `01` = Ship to cardholder's billing address;   * `02` = Ship to another verified address on file with merchant;   * `03` = Ship to address that is different than the cardholder's billing address;   * `04` = “Ship to Store” / Pick-up at local store (Store address shall be populated in shipping address fields);   * `05` = Digital goods (includes online services, electronic gift cards and redemption codes);   * `06` = Travel and Event tickets, not shipped;   * `07` = Other (for example, Gaming, digital services not shipped, emedia subscriptions, etc.).
     *
     * @return self
     */
    public function setMriShipIndicator($mri_ship_indicator)
    {
        if (is_null($mri_ship_indicator)) {
            throw new \InvalidArgumentException('non-nullable mri_ship_indicator cannot be null');
        }
        if ((mb_strlen($mri_ship_indicator) > 2)) {
            throw new \InvalidArgumentException('invalid length for $mri_ship_indicator when calling RecurrentPaymentRequestAdditionalParameters., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($mri_ship_indicator) < 2)) {
            throw new \InvalidArgumentException('invalid length for $mri_ship_indicator when calling RecurrentPaymentRequestAdditionalParameters., must be bigger than or equal to 2.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($mri_ship_indicator)))) {
            throw new \InvalidArgumentException("invalid value for \$mri_ship_indicator when calling RecurrentPaymentRequestAdditionalParameters., must conform to the pattern /^\\d+$/.");
        }

        $this->container['mri_ship_indicator'] = $mri_ship_indicator;

        return $this;
    }

    /**
     * Gets ch_acc_pw_change
     *
     * @return string|null
     */
    public function getChAccPwChange()
    {
        return $this->container['ch_acc_pw_change'];
    }

    /**
     * Sets ch_acc_pw_change
     *
     * @param string|null $ch_acc_pw_change Дата последнего изменения пароля или сброса аккаунта Плательщика в ТСП в формате YYYYMMDD
     *
     * @return self
     */
    public function setChAccPwChange($ch_acc_pw_change)
    {
        if (is_null($ch_acc_pw_change)) {
            throw new \InvalidArgumentException('non-nullable ch_acc_pw_change cannot be null');
        }
        if ((mb_strlen($ch_acc_pw_change) > 8)) {
            throw new \InvalidArgumentException('invalid length for $ch_acc_pw_change when calling RecurrentPaymentRequestAdditionalParameters., must be smaller than or equal to 8.');
        }
        if ((mb_strlen($ch_acc_pw_change) < 8)) {
            throw new \InvalidArgumentException('invalid length for $ch_acc_pw_change when calling RecurrentPaymentRequestAdditionalParameters., must be bigger than or equal to 8.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($ch_acc_pw_change)))) {
            throw new \InvalidArgumentException("invalid value for \$ch_acc_pw_change when calling RecurrentPaymentRequestAdditionalParameters., must conform to the pattern /^\\d+$/.");
        }

        $this->container['ch_acc_pw_change'] = $ch_acc_pw_change;

        return $this;
    }

    /**
     * Gets ch_acc_pw_change_ind
     *
     * @return string|null
     */
    public function getChAccPwChangeInd()
    {
        return $this->container['ch_acc_pw_change_ind'];
    }

    /**
     * Sets ch_acc_pw_change_ind
     *
     * @param string|null $ch_acc_pw_change_ind Период времени с последнего изменения пароля или сброса аккаунта Плательщика в ТСП:   * `01` = No change;   * `02` = Changed during this transaction;   * `03` = Less than 30 days;   * `04` = 30-60 days;   * `05` = More than 60 days.
     *
     * @return self
     */
    public function setChAccPwChangeInd($ch_acc_pw_change_ind)
    {
        if (is_null($ch_acc_pw_change_ind)) {
            throw new \InvalidArgumentException('non-nullable ch_acc_pw_change_ind cannot be null');
        }
        if ((mb_strlen($ch_acc_pw_change_ind) > 2)) {
            throw new \InvalidArgumentException('invalid length for $ch_acc_pw_change_ind when calling RecurrentPaymentRequestAdditionalParameters., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($ch_acc_pw_change_ind) < 2)) {
            throw new \InvalidArgumentException('invalid length for $ch_acc_pw_change_ind when calling RecurrentPaymentRequestAdditionalParameters., must be bigger than or equal to 2.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($ch_acc_pw_change_ind)))) {
            throw new \InvalidArgumentException("invalid value for \$ch_acc_pw_change_ind when calling RecurrentPaymentRequestAdditionalParameters., must conform to the pattern /^\\d+$/.");
        }

        $this->container['ch_acc_pw_change_ind'] = $ch_acc_pw_change_ind;

        return $this;
    }

    /**
     * Gets nb_purchase_account
     *
     * @return string|null
     */
    public function getNbPurchaseAccount()
    {
        return $this->container['nb_purchase_account'];
    }

    /**
     * Sets nb_purchase_account
     *
     * @param string|null $nb_purchase_account Количество покупок, совершенных с аккаунта Плательщика за последние 6 месяцев
     *
     * @return self
     */
    public function setNbPurchaseAccount($nb_purchase_account)
    {
        if (is_null($nb_purchase_account)) {
            throw new \InvalidArgumentException('non-nullable nb_purchase_account cannot be null');
        }
        if ((mb_strlen($nb_purchase_account) > 4)) {
            throw new \InvalidArgumentException('invalid length for $nb_purchase_account when calling RecurrentPaymentRequestAdditionalParameters., must be smaller than or equal to 4.');
        }
        if ((mb_strlen($nb_purchase_account) < 1)) {
            throw new \InvalidArgumentException('invalid length for $nb_purchase_account when calling RecurrentPaymentRequestAdditionalParameters., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($nb_purchase_account)))) {
            throw new \InvalidArgumentException("invalid value for \$nb_purchase_account when calling RecurrentPaymentRequestAdditionalParameters., must conform to the pattern /^\\d+$/.");
        }

        $this->container['nb_purchase_account'] = $nb_purchase_account;

        return $this;
    }

    /**
     * Gets txn_activity_day
     *
     * @return string|null
     */
    public function getTxnActivityDay()
    {
        return $this->container['txn_activity_day'];
    }

    /**
     * Sets txn_activity_day
     *
     * @param string|null $txn_activity_day Количество операций (успешных и незавершенных), совершенных с аккаунта Плательщика за последние 24 часа всеми платёжными средствами
     *
     * @return self
     */
    public function setTxnActivityDay($txn_activity_day)
    {
        if (is_null($txn_activity_day)) {
            throw new \InvalidArgumentException('non-nullable txn_activity_day cannot be null');
        }
        if ((mb_strlen($txn_activity_day) > 3)) {
            throw new \InvalidArgumentException('invalid length for $txn_activity_day when calling RecurrentPaymentRequestAdditionalParameters., must be smaller than or equal to 3.');
        }
        if ((mb_strlen($txn_activity_day) < 1)) {
            throw new \InvalidArgumentException('invalid length for $txn_activity_day when calling RecurrentPaymentRequestAdditionalParameters., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($txn_activity_day)))) {
            throw new \InvalidArgumentException("invalid value for \$txn_activity_day when calling RecurrentPaymentRequestAdditionalParameters., must conform to the pattern /^\\d+$/.");
        }

        $this->container['txn_activity_day'] = $txn_activity_day;

        return $this;
    }

    /**
     * Gets txn_activity_year
     *
     * @return string|null
     */
    public function getTxnActivityYear()
    {
        return $this->container['txn_activity_year'];
    }

    /**
     * Sets txn_activity_year
     *
     * @param string|null $txn_activity_year Количество операций (успешных и незавершенных), совершенных с аккаунта Плательщика за последний год всеми платёжными средствами
     *
     * @return self
     */
    public function setTxnActivityYear($txn_activity_year)
    {
        if (is_null($txn_activity_year)) {
            throw new \InvalidArgumentException('non-nullable txn_activity_year cannot be null');
        }
        if ((mb_strlen($txn_activity_year) > 3)) {
            throw new \InvalidArgumentException('invalid length for $txn_activity_year when calling RecurrentPaymentRequestAdditionalParameters., must be smaller than or equal to 3.');
        }
        if ((mb_strlen($txn_activity_year) < 1)) {
            throw new \InvalidArgumentException('invalid length for $txn_activity_year when calling RecurrentPaymentRequestAdditionalParameters., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($txn_activity_year)))) {
            throw new \InvalidArgumentException("invalid value for \$txn_activity_year when calling RecurrentPaymentRequestAdditionalParameters., must conform to the pattern /^\\d+$/.");
        }

        $this->container['txn_activity_year'] = $txn_activity_year;

        return $this;
    }

    /**
     * Gets payment_acc_age
     *
     * @return string|null
     */
    public function getPaymentAccAge()
    {
        return $this->container['payment_acc_age'];
    }

    /**
     * Sets payment_acc_age
     *
     * @param string|null $payment_acc_age Дата добавления платёжного метода в аккаунте Плательщика в формате YYYYMMDD
     *
     * @return self
     */
    public function setPaymentAccAge($payment_acc_age)
    {
        if (is_null($payment_acc_age)) {
            throw new \InvalidArgumentException('non-nullable payment_acc_age cannot be null');
        }
        if ((mb_strlen($payment_acc_age) > 8)) {
            throw new \InvalidArgumentException('invalid length for $payment_acc_age when calling RecurrentPaymentRequestAdditionalParameters., must be smaller than or equal to 8.');
        }
        if ((mb_strlen($payment_acc_age) < 8)) {
            throw new \InvalidArgumentException('invalid length for $payment_acc_age when calling RecurrentPaymentRequestAdditionalParameters., must be bigger than or equal to 8.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($payment_acc_age)))) {
            throw new \InvalidArgumentException("invalid value for \$payment_acc_age when calling RecurrentPaymentRequestAdditionalParameters., must conform to the pattern /^\\d+$/.");
        }

        $this->container['payment_acc_age'] = $payment_acc_age;

        return $this;
    }

    /**
     * Gets payment_acc_ind
     *
     * @return string|null
     */
    public function getPaymentAccInd()
    {
        return $this->container['payment_acc_ind'];
    }

    /**
     * Sets payment_acc_ind
     *
     * @param string|null $payment_acc_ind Период времени с момента добавления платёжного метода в аккаунт Плательщика:   * `01` = No account (guest check-out);   * `02` = During this transaction;   * `03` = Less than 30 days;   * `04` = 30-60 days;   * `05` = More than 60 days.
     *
     * @return self
     */
    public function setPaymentAccInd($payment_acc_ind)
    {
        if (is_null($payment_acc_ind)) {
            throw new \InvalidArgumentException('non-nullable payment_acc_ind cannot be null');
        }
        if ((mb_strlen($payment_acc_ind) > 2)) {
            throw new \InvalidArgumentException('invalid length for $payment_acc_ind when calling RecurrentPaymentRequestAdditionalParameters., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($payment_acc_ind) < 2)) {
            throw new \InvalidArgumentException('invalid length for $payment_acc_ind when calling RecurrentPaymentRequestAdditionalParameters., must be bigger than or equal to 2.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($payment_acc_ind)))) {
            throw new \InvalidArgumentException("invalid value for \$payment_acc_ind when calling RecurrentPaymentRequestAdditionalParameters., must conform to the pattern /^\\d+$/.");
        }

        $this->container['payment_acc_ind'] = $payment_acc_ind;

        return $this;
    }

    /**
     * Gets ch_acc_change
     *
     * @return string|null
     */
    public function getChAccChange()
    {
        return $this->container['ch_acc_change'];
    }

    /**
     * Sets ch_acc_change
     *
     * @param string|null $ch_acc_change Дата последнего редактирования аккаунта Плательщика в ТСП в формате YYYYMMDD
     *
     * @return self
     */
    public function setChAccChange($ch_acc_change)
    {
        if (is_null($ch_acc_change)) {
            throw new \InvalidArgumentException('non-nullable ch_acc_change cannot be null');
        }
        if ((mb_strlen($ch_acc_change) > 8)) {
            throw new \InvalidArgumentException('invalid length for $ch_acc_change when calling RecurrentPaymentRequestAdditionalParameters., must be smaller than or equal to 8.');
        }
        if ((mb_strlen($ch_acc_change) < 8)) {
            throw new \InvalidArgumentException('invalid length for $ch_acc_change when calling RecurrentPaymentRequestAdditionalParameters., must be bigger than or equal to 8.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($ch_acc_change)))) {
            throw new \InvalidArgumentException("invalid value for \$ch_acc_change when calling RecurrentPaymentRequestAdditionalParameters., must conform to the pattern /^\\d+$/.");
        }

        $this->container['ch_acc_change'] = $ch_acc_change;

        return $this;
    }

    /**
     * Gets sbrf_spasiboamount_bonus
     *
     * @return int|null
     */
    public function getSbrfSpasiboamountBonus()
    {
        return $this->container['sbrf_spasiboamount_bonus'];
    }

    /**
     * Sets sbrf_spasiboamount_bonus
     *
     * @param int|null $sbrf_spasiboamount_bonus Сумма боунсов Спасибо к списанию в минимальных единицах (бонусных копейках).  <span style=\"color:red;\">Заказ не может быть целиком оплачен бонусами</span>
     *
     * @return self
     */
    public function setSbrfSpasiboamountBonus($sbrf_spasiboamount_bonus)
    {
        if (is_null($sbrf_spasiboamount_bonus)) {
            throw new \InvalidArgumentException('non-nullable sbrf_spasiboamount_bonus cannot be null');
        }

        if (($sbrf_spasiboamount_bonus > 4294967200)) {
            throw new \InvalidArgumentException('invalid value for $sbrf_spasiboamount_bonus when calling RecurrentPaymentRequestAdditionalParameters., must be smaller than or equal to 4294967200.');
        }
        if (($sbrf_spasiboamount_bonus < 0)) {
            throw new \InvalidArgumentException('invalid value for $sbrf_spasiboamount_bonus when calling RecurrentPaymentRequestAdditionalParameters., must be bigger than or equal to 0.');
        }

        $this->container['sbrf_spasiboamount_bonus'] = $sbrf_spasiboamount_bonus;

        return $this;
    }

    /**
     * Gets name1
     *
     * @return mixed|null
     */
    public function getName1()
    {
        return $this->container['name1'];
    }

    /**
     * Sets name1
     *
     * @param mixed|null $name1 Дополнительный параметр 1
     *
     * @return self
     */
    public function setName1($name1)
    {
        if (is_null($name1)) {
            array_push($this->openAPINullablesSetToNull, 'name1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name1'] = $name1;

        return $this;
    }

    /**
     * Gets name2
     *
     * @return mixed|null
     */
    public function getName2()
    {
        return $this->container['name2'];
    }

    /**
     * Sets name2
     *
     * @param mixed|null $name2 Дополнительный параметр 2
     *
     * @return self
     */
    public function setName2($name2)
    {
        if (is_null($name2)) {
            array_push($this->openAPINullablesSetToNull, 'name2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name2'] = $name2;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


