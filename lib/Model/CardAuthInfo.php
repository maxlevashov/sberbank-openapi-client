<?php
/**
 * CardAuthInfo
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Sberbank
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API платёжного шлюза Сбербанка
 *
 * Настоящий документ описывает программные интерфейсы платёжного шлюза Сбербанка, который позволяет проводить платежи в интернет-эквайринге.
 *
 * The version of the OpenAPI document: 1.0.7
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Sberbank\Model;

use \ArrayAccess;
use \Sberbank\ObjectSerializer;

/**
 * CardAuthInfo Class Doc Comment
 *
 * @category Class
 * @description Блок информации о Карте
 * @package  Sberbank
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CardAuthInfo implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'cardAuthInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'masked_pan' => 'string',
        'expiration' => 'string',
        'card_holder_name' => 'string',
        'approval_code' => 'string',
        'chargeback' => 'bool',
        'payment_system' => 'string',
        'product' => 'string',
        'payment_way' => 'string',
        'pan' => 'string',
        'secure_auth_info' => '\Sberbank\Model\CardAuthInfoSecureAuthInfo',
        'secure_card_info' => '\Sberbank\Model\CardAuthInfoSecureCardInfo',
        'is_corp' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'masked_pan' => null,
        'expiration' => null,
        'card_holder_name' => null,
        'approval_code' => null,
        'chargeback' => null,
        'payment_system' => null,
        'product' => null,
        'payment_way' => null,
        'pan' => null,
        'secure_auth_info' => null,
        'secure_card_info' => null,
        'is_corp' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'masked_pan' => false,
        'expiration' => false,
        'card_holder_name' => false,
        'approval_code' => false,
        'chargeback' => false,
        'payment_system' => false,
        'product' => false,
        'payment_way' => false,
        'pan' => false,
        'secure_auth_info' => false,
        'secure_card_info' => false,
        'is_corp' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'masked_pan' => 'maskedPan',
        'expiration' => 'expiration',
        'card_holder_name' => 'cardHolderName',
        'approval_code' => 'approvalCode',
        'chargeback' => 'chargeback',
        'payment_system' => 'paymentSystem',
        'product' => 'product',
        'payment_way' => 'paymentWay',
        'pan' => 'pan',
        'secure_auth_info' => 'secureAuthInfo',
        'secure_card_info' => 'secureCardInfo',
        'is_corp' => 'isCorp'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'masked_pan' => 'setMaskedPan',
        'expiration' => 'setExpiration',
        'card_holder_name' => 'setCardHolderName',
        'approval_code' => 'setApprovalCode',
        'chargeback' => 'setChargeback',
        'payment_system' => 'setPaymentSystem',
        'product' => 'setProduct',
        'payment_way' => 'setPaymentWay',
        'pan' => 'setPan',
        'secure_auth_info' => 'setSecureAuthInfo',
        'secure_card_info' => 'setSecureCardInfo',
        'is_corp' => 'setIsCorp'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'masked_pan' => 'getMaskedPan',
        'expiration' => 'getExpiration',
        'card_holder_name' => 'getCardHolderName',
        'approval_code' => 'getApprovalCode',
        'chargeback' => 'getChargeback',
        'payment_system' => 'getPaymentSystem',
        'product' => 'getProduct',
        'payment_way' => 'getPaymentWay',
        'pan' => 'getPan',
        'secure_auth_info' => 'getSecureAuthInfo',
        'secure_card_info' => 'getSecureCardInfo',
        'is_corp' => 'getIsCorp'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('masked_pan', $data ?? [], null);
        $this->setIfExists('expiration', $data ?? [], null);
        $this->setIfExists('card_holder_name', $data ?? [], null);
        $this->setIfExists('approval_code', $data ?? [], null);
        $this->setIfExists('chargeback', $data ?? [], null);
        $this->setIfExists('payment_system', $data ?? [], null);
        $this->setIfExists('product', $data ?? [], null);
        $this->setIfExists('payment_way', $data ?? [], null);
        $this->setIfExists('pan', $data ?? [], null);
        $this->setIfExists('secure_auth_info', $data ?? [], null);
        $this->setIfExists('secure_card_info', $data ?? [], null);
        $this->setIfExists('is_corp', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['masked_pan']) && (mb_strlen($this->container['masked_pan']) > 20)) {
            $invalidProperties[] = "invalid value for 'masked_pan', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['masked_pan']) && (mb_strlen($this->container['masked_pan']) < 1)) {
            $invalidProperties[] = "invalid value for 'masked_pan', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['masked_pan']) && !preg_match("/^[0-9*]+$/", $this->container['masked_pan'])) {
            $invalidProperties[] = "invalid value for 'masked_pan', must be conform to the pattern /^[0-9*]+$/.";
        }

        if (!is_null($this->container['expiration']) && (mb_strlen($this->container['expiration']) > 8)) {
            $invalidProperties[] = "invalid value for 'expiration', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['expiration']) && (mb_strlen($this->container['expiration']) < 1)) {
            $invalidProperties[] = "invalid value for 'expiration', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['expiration']) && !preg_match("/^\\d+$/", $this->container['expiration'])) {
            $invalidProperties[] = "invalid value for 'expiration', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['card_holder_name']) && (mb_strlen($this->container['card_holder_name']) > 200)) {
            $invalidProperties[] = "invalid value for 'card_holder_name', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['card_holder_name']) && (mb_strlen($this->container['card_holder_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'card_holder_name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['card_holder_name']) && !preg_match("/^[ -~]+$/", $this->container['card_holder_name'])) {
            $invalidProperties[] = "invalid value for 'card_holder_name', must be conform to the pattern /^[ -~]+$/.";
        }

        if (!is_null($this->container['approval_code']) && (mb_strlen($this->container['approval_code']) > 6)) {
            $invalidProperties[] = "invalid value for 'approval_code', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['approval_code']) && (mb_strlen($this->container['approval_code']) < 1)) {
            $invalidProperties[] = "invalid value for 'approval_code', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['approval_code']) && !preg_match("/^\\w+$/", $this->container['approval_code'])) {
            $invalidProperties[] = "invalid value for 'approval_code', must be conform to the pattern /^\\w+$/.";
        }

        if (!is_null($this->container['payment_system']) && (mb_strlen($this->container['payment_system']) > 10)) {
            $invalidProperties[] = "invalid value for 'payment_system', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['payment_system']) && (mb_strlen($this->container['payment_system']) < 1)) {
            $invalidProperties[] = "invalid value for 'payment_system', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['payment_system']) && !preg_match("/^\\w+$/", $this->container['payment_system'])) {
            $invalidProperties[] = "invalid value for 'payment_system', must be conform to the pattern /^\\w+$/.";
        }

        if (!is_null($this->container['product']) && (mb_strlen($this->container['product']) > 255)) {
            $invalidProperties[] = "invalid value for 'product', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['product']) && (mb_strlen($this->container['product']) < 0)) {
            $invalidProperties[] = "invalid value for 'product', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['product']) && !preg_match("/^[A-Za-z0-9]*$/", $this->container['product'])) {
            $invalidProperties[] = "invalid value for 'product', must be conform to the pattern /^[A-Za-z0-9]*$/.";
        }

        if (!is_null($this->container['payment_way']) && (mb_strlen($this->container['payment_way']) > 64)) {
            $invalidProperties[] = "invalid value for 'payment_way', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['payment_way']) && (mb_strlen($this->container['payment_way']) < 1)) {
            $invalidProperties[] = "invalid value for 'payment_way', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['payment_way']) && !preg_match("/^[ -~]*$/", $this->container['payment_way'])) {
            $invalidProperties[] = "invalid value for 'payment_way', must be conform to the pattern /^[ -~]*$/.";
        }

        if (!is_null($this->container['pan']) && (mb_strlen($this->container['pan']) > 20)) {
            $invalidProperties[] = "invalid value for 'pan', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['pan']) && (mb_strlen($this->container['pan']) < 1)) {
            $invalidProperties[] = "invalid value for 'pan', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['pan']) && !preg_match("/^[0-9*]+$/", $this->container['pan'])) {
            $invalidProperties[] = "invalid value for 'pan', must be conform to the pattern /^[0-9*]+$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets masked_pan
     *
     * @return string|null
     */
    public function getMaskedPan()
    {
        return $this->container['masked_pan'];
    }

    /**
     * Sets masked_pan
     *
     * @param string|null $masked_pan Маскированный номер Карты, Токена или Счёта Плательщика
     *
     * @return self
     */
    public function setMaskedPan($masked_pan)
    {
        if (is_null($masked_pan)) {
            throw new \InvalidArgumentException('non-nullable masked_pan cannot be null');
        }
        if ((mb_strlen($masked_pan) > 20)) {
            throw new \InvalidArgumentException('invalid length for $masked_pan when calling CardAuthInfo., must be smaller than or equal to 20.');
        }
        if ((mb_strlen($masked_pan) < 1)) {
            throw new \InvalidArgumentException('invalid length for $masked_pan when calling CardAuthInfo., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[0-9*]+$/", ObjectSerializer::toString($masked_pan)))) {
            throw new \InvalidArgumentException("invalid value for \$masked_pan when calling CardAuthInfo., must conform to the pattern /^[0-9*]+$/.");
        }

        $this->container['masked_pan'] = $masked_pan;

        return $this;
    }

    /**
     * Gets expiration
     *
     * @return string|null
     */
    public function getExpiration()
    {
        return $this->container['expiration'];
    }

    /**
     * Sets expiration
     *
     * @param string|null $expiration Год и месяц истечения срока действия Карты (YYYYMM)
     *
     * @return self
     */
    public function setExpiration($expiration)
    {
        if (is_null($expiration)) {
            throw new \InvalidArgumentException('non-nullable expiration cannot be null');
        }
        if ((mb_strlen($expiration) > 8)) {
            throw new \InvalidArgumentException('invalid length for $expiration when calling CardAuthInfo., must be smaller than or equal to 8.');
        }
        if ((mb_strlen($expiration) < 1)) {
            throw new \InvalidArgumentException('invalid length for $expiration when calling CardAuthInfo., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($expiration)))) {
            throw new \InvalidArgumentException("invalid value for \$expiration when calling CardAuthInfo., must conform to the pattern /^\\d+$/.");
        }

        $this->container['expiration'] = $expiration;

        return $this;
    }

    /**
     * Gets card_holder_name
     *
     * @return string|null
     */
    public function getCardHolderName()
    {
        return $this->container['card_holder_name'];
    }

    /**
     * Sets card_holder_name
     *
     * @param string|null $card_holder_name Текст, изображенный на Карте Плательщика в ISO 8859-1. Допустимы Имя, Фамилия, инициалы или любые комбинации специальных символов ASCII, кроме кириллицы
     *
     * @return self
     */
    public function setCardHolderName($card_holder_name)
    {
        if (is_null($card_holder_name)) {
            throw new \InvalidArgumentException('non-nullable card_holder_name cannot be null');
        }
        if ((mb_strlen($card_holder_name) > 200)) {
            throw new \InvalidArgumentException('invalid length for $card_holder_name when calling CardAuthInfo., must be smaller than or equal to 200.');
        }
        if ((mb_strlen($card_holder_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $card_holder_name when calling CardAuthInfo., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~]+$/", ObjectSerializer::toString($card_holder_name)))) {
            throw new \InvalidArgumentException("invalid value for \$card_holder_name when calling CardAuthInfo., must conform to the pattern /^[ -~]+$/.");
        }

        $this->container['card_holder_name'] = $card_holder_name;

        return $this;
    }

    /**
     * Gets approval_code
     *
     * @return string|null
     */
    public function getApprovalCode()
    {
        return $this->container['approval_code'];
    }

    /**
     * Sets approval_code
     *
     * @param string|null $approval_code Код авторизации платежа
     *
     * @return self
     */
    public function setApprovalCode($approval_code)
    {
        if (is_null($approval_code)) {
            throw new \InvalidArgumentException('non-nullable approval_code cannot be null');
        }
        if ((mb_strlen($approval_code) > 6)) {
            throw new \InvalidArgumentException('invalid length for $approval_code when calling CardAuthInfo., must be smaller than or equal to 6.');
        }
        if ((mb_strlen($approval_code) < 1)) {
            throw new \InvalidArgumentException('invalid length for $approval_code when calling CardAuthInfo., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^\\w+$/", ObjectSerializer::toString($approval_code)))) {
            throw new \InvalidArgumentException("invalid value for \$approval_code when calling CardAuthInfo., must conform to the pattern /^\\w+$/.");
        }

        $this->container['approval_code'] = $approval_code;

        return $this;
    }

    /**
     * Gets chargeback
     *
     * @return bool|null
     */
    public function getChargeback()
    {
        return $this->container['chargeback'];
    }

    /**
     * Sets chargeback
     *
     * @param bool|null $chargeback Признак были ли средства принудительно возвращены Клиенту Банком
     *
     * @return self
     */
    public function setChargeback($chargeback)
    {
        if (is_null($chargeback)) {
            throw new \InvalidArgumentException('non-nullable chargeback cannot be null');
        }
        $this->container['chargeback'] = $chargeback;

        return $this;
    }

    /**
     * Gets payment_system
     *
     * @return string|null
     */
    public function getPaymentSystem()
    {
        return $this->container['payment_system'];
    }

    /**
     * Sets payment_system
     *
     * @param string|null $payment_system Наименование платёжной системы. Возможны следующие варианты:   * `VISA`;   * `MASTERCARD`;   * `AMEX`;   * `JCB`;   * `CUP`;   * `MIR`;   * `Undefined`- передается в случае, если оплата выполнялась с использованием Счёта.
     *
     * @return self
     */
    public function setPaymentSystem($payment_system)
    {
        if (is_null($payment_system)) {
            throw new \InvalidArgumentException('non-nullable payment_system cannot be null');
        }
        if ((mb_strlen($payment_system) > 10)) {
            throw new \InvalidArgumentException('invalid length for $payment_system when calling CardAuthInfo., must be smaller than or equal to 10.');
        }
        if ((mb_strlen($payment_system) < 1)) {
            throw new \InvalidArgumentException('invalid length for $payment_system when calling CardAuthInfo., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^\\w+$/", ObjectSerializer::toString($payment_system)))) {
            throw new \InvalidArgumentException("invalid value for \$payment_system when calling CardAuthInfo., must conform to the pattern /^\\w+$/.");
        }

        $this->container['payment_system'] = $payment_system;

        return $this;
    }

    /**
     * Gets product
     *
     * @return string|null
     */
    public function getProduct()
    {
        return $this->container['product'];
    }

    /**
     * Sets product
     *
     * @param string|null $product Дополнительные сведения о карте Плательщика
     *
     * @return self
     */
    public function setProduct($product)
    {
        if (is_null($product)) {
            throw new \InvalidArgumentException('non-nullable product cannot be null');
        }
        if ((mb_strlen($product) > 255)) {
            throw new \InvalidArgumentException('invalid length for $product when calling CardAuthInfo., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($product) < 0)) {
            throw new \InvalidArgumentException('invalid length for $product when calling CardAuthInfo., must be bigger than or equal to 0.');
        }
        if ((!preg_match("/^[A-Za-z0-9]*$/", ObjectSerializer::toString($product)))) {
            throw new \InvalidArgumentException("invalid value for \$product when calling CardAuthInfo., must conform to the pattern /^[A-Za-z0-9]*$/.");
        }

        $this->container['product'] = $product;

        return $this;
    }

    /**
     * Gets payment_way
     *
     * @return string|null
     */
    public function getPaymentWay()
    {
        return $this->container['payment_way'];
    }

    /**
     * Sets payment_way
     *
     * @param string|null $payment_way Способ совершения платежа
     *
     * @return self
     */
    public function setPaymentWay($payment_way)
    {
        if (is_null($payment_way)) {
            throw new \InvalidArgumentException('non-nullable payment_way cannot be null');
        }
        if ((mb_strlen($payment_way) > 64)) {
            throw new \InvalidArgumentException('invalid length for $payment_way when calling CardAuthInfo., must be smaller than or equal to 64.');
        }
        if ((mb_strlen($payment_way) < 1)) {
            throw new \InvalidArgumentException('invalid length for $payment_way when calling CardAuthInfo., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~]*$/", ObjectSerializer::toString($payment_way)))) {
            throw new \InvalidArgumentException("invalid value for \$payment_way when calling CardAuthInfo., must conform to the pattern /^[ -~]*$/.");
        }

        $this->container['payment_way'] = $payment_way;

        return $this;
    }

    /**
     * Gets pan
     *
     * @return string|null
     */
    public function getPan()
    {
        return $this->container['pan'];
    }

    /**
     * Sets pan
     *
     * @param string|null $pan Маскированный номер Карты, Токена или Счёта Плательщика
     *
     * @return self
     */
    public function setPan($pan)
    {
        if (is_null($pan)) {
            throw new \InvalidArgumentException('non-nullable pan cannot be null');
        }
        if ((mb_strlen($pan) > 20)) {
            throw new \InvalidArgumentException('invalid length for $pan when calling CardAuthInfo., must be smaller than or equal to 20.');
        }
        if ((mb_strlen($pan) < 1)) {
            throw new \InvalidArgumentException('invalid length for $pan when calling CardAuthInfo., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[0-9*]+$/", ObjectSerializer::toString($pan)))) {
            throw new \InvalidArgumentException("invalid value for \$pan when calling CardAuthInfo., must conform to the pattern /^[0-9*]+$/.");
        }

        $this->container['pan'] = $pan;

        return $this;
    }

    /**
     * Gets secure_auth_info
     *
     * @return \Sberbank\Model\CardAuthInfoSecureAuthInfo|null
     */
    public function getSecureAuthInfo()
    {
        return $this->container['secure_auth_info'];
    }

    /**
     * Sets secure_auth_info
     *
     * @param \Sberbank\Model\CardAuthInfoSecureAuthInfo|null $secure_auth_info secure_auth_info
     *
     * @return self
     */
    public function setSecureAuthInfo($secure_auth_info)
    {
        if (is_null($secure_auth_info)) {
            throw new \InvalidArgumentException('non-nullable secure_auth_info cannot be null');
        }
        $this->container['secure_auth_info'] = $secure_auth_info;

        return $this;
    }

    /**
     * Gets secure_card_info
     *
     * @return \Sberbank\Model\CardAuthInfoSecureCardInfo|null
     */
    public function getSecureCardInfo()
    {
        return $this->container['secure_card_info'];
    }

    /**
     * Sets secure_card_info
     *
     * @param \Sberbank\Model\CardAuthInfoSecureCardInfo|null $secure_card_info secure_card_info
     *
     * @return self
     */
    public function setSecureCardInfo($secure_card_info)
    {
        if (is_null($secure_card_info)) {
            throw new \InvalidArgumentException('non-nullable secure_card_info cannot be null');
        }
        $this->container['secure_card_info'] = $secure_card_info;

        return $this;
    }

    /**
     * Gets is_corp
     *
     * @return string|null
     */
    public function getIsCorp()
    {
        return $this->container['is_corp'];
    }

    /**
     * Sets is_corp
     *
     * @param string|null $is_corp Признак корпоративной карты. Принимает значение true или false.
     *
     * @return self
     */
    public function setIsCorp($is_corp)
    {
        if (is_null($is_corp)) {
            throw new \InvalidArgumentException('non-nullable is_corp cannot be null');
        }
        $this->container['is_corp'] = $is_corp;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


