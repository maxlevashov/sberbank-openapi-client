<?php
/**
 * OrderBundleCompany
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Sberbank
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API платёжного шлюза Сбербанка
 *
 * Настоящий документ описывает программные интерфейсы платёжного шлюза Сбербанка, который позволяет проводить платежи в интернет-эквайринге.
 *
 * The version of the OpenAPI document: 1.0.7
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Sberbank\Model;

use \ArrayAccess;
use \Sberbank\ObjectSerializer;

/**
 * OrderBundleCompany Class Doc Comment
 *
 * @category Class
 * @description Информация о компании. Обязателен при использовании фискализации
 * @package  Sberbank
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OrderBundleCompany implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'orderBundle_company';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'email' => 'string',
        'sno' => 'string',
        'inn' => 'string',
        'payment_address' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'email' => null,
        'sno' => null,
        'inn' => null,
        'payment_address' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'email' => false,
        'sno' => false,
        'inn' => false,
        'payment_address' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'email' => 'email',
        'sno' => 'sno',
        'inn' => 'inn',
        'payment_address' => 'paymentAddress'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'email' => 'setEmail',
        'sno' => 'setSno',
        'inn' => 'setInn',
        'payment_address' => 'setPaymentAddress'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'email' => 'getEmail',
        'sno' => 'getSno',
        'inn' => 'getInn',
        'payment_address' => 'getPaymentAddress'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const SNO_OSN = 'osn';
    public const SNO_USN_INCOME = 'usn_income';
    public const SNO_USN_INCOME_OUTCOME = 'usn_income_outcome';
    public const SNO_ESN = 'esn';
    public const SNO_PATENT = 'patent';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSnoAllowableValues()
    {
        return [
            self::SNO_OSN,
            self::SNO_USN_INCOME,
            self::SNO_USN_INCOME_OUTCOME,
            self::SNO_ESN,
            self::SNO_PATENT,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('sno', $data ?? [], null);
        $this->setIfExists('inn', $data ?? [], null);
        $this->setIfExists('payment_address', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['email'] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        if ((mb_strlen($this->container['email']) > 64)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be smaller than or equal to 64.";
        }

        if ((mb_strlen($this->container['email']) < 3)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be bigger than or equal to 3.";
        }

        if (!preg_match("/^[ -~]+$/", $this->container['email'])) {
            $invalidProperties[] = "invalid value for 'email', must be conform to the pattern /^[ -~]+$/.";
        }

        if ($this->container['sno'] === null) {
            $invalidProperties[] = "'sno' can't be null";
        }
        $allowedValues = $this->getSnoAllowableValues();
        if (!is_null($this->container['sno']) && !in_array($this->container['sno'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'sno', must be one of '%s'",
                $this->container['sno'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['inn'] === null) {
            $invalidProperties[] = "'inn' can't be null";
        }
        if ((mb_strlen($this->container['inn']) > 12)) {
            $invalidProperties[] = "invalid value for 'inn', the character length must be smaller than or equal to 12.";
        }

        if ((mb_strlen($this->container['inn']) < 10)) {
            $invalidProperties[] = "invalid value for 'inn', the character length must be bigger than or equal to 10.";
        }

        if (!preg_match("/([0-9])/", $this->container['inn'])) {
            $invalidProperties[] = "invalid value for 'inn', must be conform to the pattern /([0-9])/.";
        }

        if ($this->container['payment_address'] === null) {
            $invalidProperties[] = "'payment_address' can't be null";
        }
        if ((mb_strlen($this->container['payment_address']) > 256)) {
            $invalidProperties[] = "invalid value for 'payment_address', the character length must be smaller than or equal to 256.";
        }

        if (!preg_match("/^[ -~]*$/", $this->container['payment_address'])) {
            $invalidProperties[] = "invalid value for 'payment_address', must be conform to the pattern /^[ -~]*$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email __Тег ФФД 1117.__ Адрес электронной почты компании. Отражается в чеке, который получит покупатель
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        if ((mb_strlen($email) > 64)) {
            throw new \InvalidArgumentException('invalid length for $email when calling OrderBundleCompany., must be smaller than or equal to 64.');
        }
        if ((mb_strlen($email) < 3)) {
            throw new \InvalidArgumentException('invalid length for $email when calling OrderBundleCompany., must be bigger than or equal to 3.');
        }
        if ((!preg_match("/^[ -~]+$/", ObjectSerializer::toString($email)))) {
            throw new \InvalidArgumentException("invalid value for \$email when calling OrderBundleCompany., must conform to the pattern /^[ -~]+$/.");
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets sno
     *
     * @return string
     */
    public function getSno()
    {
        return $this->container['sno'];
    }

    /**
     * Sets sno
     *
     * @param string $sno __Тег ФФД 1055.__ Система налогообложения. Может принимать следующие значения:   * `osn` - Общая система налогообложения   * `usn_income` - Упрощенная система налогообложения (доходы)   * `usn_income_outcome` - Упрощенная система налогообложения (доходы минус расходы)   * `esn` - Единый сельскохозяйственный налог   * `patent` - Патентная система налогообложения
     *
     * @return self
     */
    public function setSno($sno)
    {
        if (is_null($sno)) {
            throw new \InvalidArgumentException('non-nullable sno cannot be null');
        }
        $allowedValues = $this->getSnoAllowableValues();
        if (!in_array($sno, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'sno', must be one of '%s'",
                    $sno,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sno'] = $sno;

        return $this;
    }

    /**
     * Gets inn
     *
     * @return string
     */
    public function getInn()
    {
        return $this->container['inn'];
    }

    /**
     * Sets inn
     *
     * @param string $inn __Тег ФФД 1018.__ ИНН компании
     *
     * @return self
     */
    public function setInn($inn)
    {
        if (is_null($inn)) {
            throw new \InvalidArgumentException('non-nullable inn cannot be null');
        }
        if ((mb_strlen($inn) > 12)) {
            throw new \InvalidArgumentException('invalid length for $inn when calling OrderBundleCompany., must be smaller than or equal to 12.');
        }
        if ((mb_strlen($inn) < 10)) {
            throw new \InvalidArgumentException('invalid length for $inn when calling OrderBundleCompany., must be bigger than or equal to 10.');
        }
        if ((!preg_match("/([0-9])/", ObjectSerializer::toString($inn)))) {
            throw new \InvalidArgumentException("invalid value for \$inn when calling OrderBundleCompany., must conform to the pattern /([0-9])/.");
        }

        $this->container['inn'] = $inn;

        return $this;
    }

    /**
     * Gets payment_address
     *
     * @return string
     */
    public function getPaymentAddress()
    {
        return $this->container['payment_address'];
    }

    /**
     * Sets payment_address
     *
     * @param string $payment_address __Тег ФФД 1187.__ Адрес сайта, на котором производится расчет с покупателем
     *
     * @return self
     */
    public function setPaymentAddress($payment_address)
    {
        if (is_null($payment_address)) {
            throw new \InvalidArgumentException('non-nullable payment_address cannot be null');
        }
        if ((mb_strlen($payment_address) > 256)) {
            throw new \InvalidArgumentException('invalid length for $payment_address when calling OrderBundleCompany., must be smaller than or equal to 256.');
        }
        if ((!preg_match("/^[ -~]*$/", ObjectSerializer::toString($payment_address)))) {
            throw new \InvalidArgumentException("invalid value for \$payment_address when calling OrderBundleCompany., must conform to the pattern /^[ -~]*$/.");
        }

        $this->container['payment_address'] = $payment_address;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


