<?php
/**
 * ReceiptsInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Sberbank
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API платёжного шлюза Сбербанка
 *
 * Настоящий документ описывает программные интерфейсы платёжного шлюза Сбербанка, который позволяет проводить платежи в интернет-эквайринге.
 *
 * The version of the OpenAPI document: 1.0.7
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Sberbank\Model;

use \ArrayAccess;
use \Sberbank\ObjectSerializer;

/**
 * ReceiptsInner Class Doc Comment
 *
 * @category Class
 * @package  Sberbank
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ReceiptsInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'receipts_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'receipt_id' => 'string',
        'operation_id' => 'string',
        'operation_type' => 'string',
        'receipt_type' => 'string',
        'receipt_status' => 'int',
        'orig_receipt_id' => 'string',
        'error' => '\Sberbank\Model\ReceiptsInnerError',
        'payload' => '\Sberbank\Model\ReceiptsInnerPayload',
        'timestamp' => 'string',
        'group_code' => 'string',
        'daemon_code' => 'string',
        'device_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'receipt_id' => null,
        'operation_id' => null,
        'operation_type' => null,
        'receipt_type' => null,
        'receipt_status' => null,
        'orig_receipt_id' => null,
        'error' => null,
        'payload' => null,
        'timestamp' => null,
        'group_code' => null,
        'daemon_code' => null,
        'device_code' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'receipt_id' => false,
        'operation_id' => false,
        'operation_type' => false,
        'receipt_type' => false,
        'receipt_status' => false,
        'orig_receipt_id' => false,
        'error' => false,
        'payload' => false,
        'timestamp' => false,
        'group_code' => false,
        'daemon_code' => false,
        'device_code' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'receipt_id' => 'receiptId',
        'operation_id' => 'operationId',
        'operation_type' => 'operationType',
        'receipt_type' => 'receiptType',
        'receipt_status' => 'receiptStatus',
        'orig_receipt_id' => 'origReceiptId',
        'error' => 'error',
        'payload' => 'payload',
        'timestamp' => 'timestamp',
        'group_code' => 'groupCode',
        'daemon_code' => 'daemonCode',
        'device_code' => 'deviceCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'receipt_id' => 'setReceiptId',
        'operation_id' => 'setOperationId',
        'operation_type' => 'setOperationType',
        'receipt_type' => 'setReceiptType',
        'receipt_status' => 'setReceiptStatus',
        'orig_receipt_id' => 'setOrigReceiptId',
        'error' => 'setError',
        'payload' => 'setPayload',
        'timestamp' => 'setTimestamp',
        'group_code' => 'setGroupCode',
        'daemon_code' => 'setDaemonCode',
        'device_code' => 'setDeviceCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'receipt_id' => 'getReceiptId',
        'operation_id' => 'getOperationId',
        'operation_type' => 'getOperationType',
        'receipt_type' => 'getReceiptType',
        'receipt_status' => 'getReceiptStatus',
        'orig_receipt_id' => 'getOrigReceiptId',
        'error' => 'getError',
        'payload' => 'getPayload',
        'timestamp' => 'getTimestamp',
        'group_code' => 'getGroupCode',
        'daemon_code' => 'getDaemonCode',
        'device_code' => 'getDeviceCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('receipt_id', $data ?? [], null);
        $this->setIfExists('operation_id', $data ?? [], null);
        $this->setIfExists('operation_type', $data ?? [], null);
        $this->setIfExists('receipt_type', $data ?? [], null);
        $this->setIfExists('receipt_status', $data ?? [], null);
        $this->setIfExists('orig_receipt_id', $data ?? [], null);
        $this->setIfExists('error', $data ?? [], null);
        $this->setIfExists('payload', $data ?? [], null);
        $this->setIfExists('timestamp', $data ?? [], null);
        $this->setIfExists('group_code', $data ?? [], null);
        $this->setIfExists('daemon_code', $data ?? [], null);
        $this->setIfExists('device_code', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['receipt_id']) && (mb_strlen($this->container['receipt_id']) > 36)) {
            $invalidProperties[] = "invalid value for 'receipt_id', the character length must be smaller than or equal to 36.";
        }

        if (!is_null($this->container['receipt_id']) && (mb_strlen($this->container['receipt_id']) < 36)) {
            $invalidProperties[] = "invalid value for 'receipt_id', the character length must be bigger than or equal to 36.";
        }

        if (!is_null($this->container['receipt_id']) && !preg_match("/^[a-f0-9\\-]+$/", $this->container['receipt_id'])) {
            $invalidProperties[] = "invalid value for 'receipt_id', must be conform to the pattern /^[a-f0-9\\-]+$/.";
        }

        if (!is_null($this->container['operation_id']) && (mb_strlen($this->container['operation_id']) > 36)) {
            $invalidProperties[] = "invalid value for 'operation_id', the character length must be smaller than or equal to 36.";
        }

        if (!is_null($this->container['operation_id']) && (mb_strlen($this->container['operation_id']) < 36)) {
            $invalidProperties[] = "invalid value for 'operation_id', the character length must be bigger than or equal to 36.";
        }

        if (!is_null($this->container['operation_id']) && !preg_match("/^[a-f0-9\\-]+$/", $this->container['operation_id'])) {
            $invalidProperties[] = "invalid value for 'operation_id', must be conform to the pattern /^[a-f0-9\\-]+$/.";
        }

        if (!is_null($this->container['operation_type']) && (mb_strlen($this->container['operation_type']) > 20)) {
            $invalidProperties[] = "invalid value for 'operation_type', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['operation_type']) && (mb_strlen($this->container['operation_type']) < 1)) {
            $invalidProperties[] = "invalid value for 'operation_type', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['operation_type']) && !preg_match("/^[ -~]*$/", $this->container['operation_type'])) {
            $invalidProperties[] = "invalid value for 'operation_type', must be conform to the pattern /^[ -~]*$/.";
        }

        if (!is_null($this->container['receipt_type']) && (mb_strlen($this->container['receipt_type']) > 30)) {
            $invalidProperties[] = "invalid value for 'receipt_type', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['receipt_type']) && !preg_match("/^[ -~]*$/", $this->container['receipt_type'])) {
            $invalidProperties[] = "invalid value for 'receipt_type', must be conform to the pattern /^[ -~]*$/.";
        }

        if (!is_null($this->container['receipt_status']) && ($this->container['receipt_status'] > 6)) {
            $invalidProperties[] = "invalid value for 'receipt_status', must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['receipt_status']) && ($this->container['receipt_status'] < 0)) {
            $invalidProperties[] = "invalid value for 'receipt_status', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['orig_receipt_id']) && (mb_strlen($this->container['orig_receipt_id']) > 36)) {
            $invalidProperties[] = "invalid value for 'orig_receipt_id', the character length must be smaller than or equal to 36.";
        }

        if (!is_null($this->container['orig_receipt_id']) && (mb_strlen($this->container['orig_receipt_id']) < 36)) {
            $invalidProperties[] = "invalid value for 'orig_receipt_id', the character length must be bigger than or equal to 36.";
        }

        if (!is_null($this->container['orig_receipt_id']) && !preg_match("/^[a-f0-9\\-]+$/", $this->container['orig_receipt_id'])) {
            $invalidProperties[] = "invalid value for 'orig_receipt_id', must be conform to the pattern /^[a-f0-9\\-]+$/.";
        }

        if (!is_null($this->container['group_code']) && (mb_strlen($this->container['group_code']) > 32)) {
            $invalidProperties[] = "invalid value for 'group_code', the character length must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['group_code']) && !preg_match("/^[ -~]*$/", $this->container['group_code'])) {
            $invalidProperties[] = "invalid value for 'group_code', must be conform to the pattern /^[ -~]*$/.";
        }

        if (!is_null($this->container['daemon_code']) && (mb_strlen($this->container['daemon_code']) > 255)) {
            $invalidProperties[] = "invalid value for 'daemon_code', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['daemon_code']) && !preg_match("/^[ -~]*$/", $this->container['daemon_code'])) {
            $invalidProperties[] = "invalid value for 'daemon_code', must be conform to the pattern /^[ -~]*$/.";
        }

        if (!is_null($this->container['device_code']) && (mb_strlen($this->container['device_code']) > 255)) {
            $invalidProperties[] = "invalid value for 'device_code', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['device_code']) && !preg_match("/^[ -~]*$/", $this->container['device_code'])) {
            $invalidProperties[] = "invalid value for 'device_code', must be conform to the pattern /^[ -~]*$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets receipt_id
     *
     * @return string|null
     */
    public function getReceiptId()
    {
        return $this->container['receipt_id'];
    }

    /**
     * Sets receipt_id
     *
     * @param string|null $receipt_id Идентификатор чека, присвоенный кассовым сервисом (uuid)
     *
     * @return self
     */
    public function setReceiptId($receipt_id)
    {
        if (is_null($receipt_id)) {
            throw new \InvalidArgumentException('non-nullable receipt_id cannot be null');
        }
        if ((mb_strlen($receipt_id) > 36)) {
            throw new \InvalidArgumentException('invalid length for $receipt_id when calling ReceiptsInner., must be smaller than or equal to 36.');
        }
        if ((mb_strlen($receipt_id) < 36)) {
            throw new \InvalidArgumentException('invalid length for $receipt_id when calling ReceiptsInner., must be bigger than or equal to 36.');
        }
        if ((!preg_match("/^[a-f0-9\\-]+$/", ObjectSerializer::toString($receipt_id)))) {
            throw new \InvalidArgumentException("invalid value for \$receipt_id when calling ReceiptsInner., must conform to the pattern /^[a-f0-9\\-]+$/.");
        }

        $this->container['receipt_id'] = $receipt_id;

        return $this;
    }

    /**
     * Gets operation_id
     *
     * @return string|null
     */
    public function getOperationId()
    {
        return $this->container['operation_id'];
    }

    /**
     * Sets operation_id
     *
     * @param string|null $operation_id Идентификатор операции
     *
     * @return self
     */
    public function setOperationId($operation_id)
    {
        if (is_null($operation_id)) {
            throw new \InvalidArgumentException('non-nullable operation_id cannot be null');
        }
        if ((mb_strlen($operation_id) > 36)) {
            throw new \InvalidArgumentException('invalid length for $operation_id when calling ReceiptsInner., must be smaller than or equal to 36.');
        }
        if ((mb_strlen($operation_id) < 36)) {
            throw new \InvalidArgumentException('invalid length for $operation_id when calling ReceiptsInner., must be bigger than or equal to 36.');
        }
        if ((!preg_match("/^[a-f0-9\\-]+$/", ObjectSerializer::toString($operation_id)))) {
            throw new \InvalidArgumentException("invalid value for \$operation_id when calling ReceiptsInner., must conform to the pattern /^[a-f0-9\\-]+$/.");
        }

        $this->container['operation_id'] = $operation_id;

        return $this;
    }

    /**
     * Gets operation_type
     *
     * @return string|null
     */
    public function getOperationType()
    {
        return $this->container['operation_type'];
    }

    /**
     * Sets operation_type
     *
     * @param string|null $operation_type Тип платёжной операции. Возможные значения:   * `AUTHORIZATION`   * `PREAUTHORIZATION`   * `COMPLETION`   * `REVERSAL`   * `REFUND`
     *
     * @return self
     */
    public function setOperationType($operation_type)
    {
        if (is_null($operation_type)) {
            throw new \InvalidArgumentException('non-nullable operation_type cannot be null');
        }
        if ((mb_strlen($operation_type) > 20)) {
            throw new \InvalidArgumentException('invalid length for $operation_type when calling ReceiptsInner., must be smaller than or equal to 20.');
        }
        if ((mb_strlen($operation_type) < 1)) {
            throw new \InvalidArgumentException('invalid length for $operation_type when calling ReceiptsInner., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~]*$/", ObjectSerializer::toString($operation_type)))) {
            throw new \InvalidArgumentException("invalid value for \$operation_type when calling ReceiptsInner., must conform to the pattern /^[ -~]*$/.");
        }

        $this->container['operation_type'] = $operation_type;

        return $this;
    }

    /**
     * Gets receipt_type
     *
     * @return string|null
     */
    public function getReceiptType()
    {
        return $this->container['receipt_type'];
    }

    /**
     * Sets receipt_type
     *
     * @param string|null $receipt_type Тип чека: * `SELL` - Приход * `SELL_REFUND` - Возврат прихода
     *
     * @return self
     */
    public function setReceiptType($receipt_type)
    {
        if (is_null($receipt_type)) {
            throw new \InvalidArgumentException('non-nullable receipt_type cannot be null');
        }
        if ((mb_strlen($receipt_type) > 30)) {
            throw new \InvalidArgumentException('invalid length for $receipt_type when calling ReceiptsInner., must be smaller than or equal to 30.');
        }
        if ((!preg_match("/^[ -~]*$/", ObjectSerializer::toString($receipt_type)))) {
            throw new \InvalidArgumentException("invalid value for \$receipt_type when calling ReceiptsInner., must conform to the pattern /^[ -~]*$/.");
        }

        $this->container['receipt_type'] = $receipt_type;

        return $this;
    }

    /**
     * Gets receipt_status
     *
     * @return int|null
     */
    public function getReceiptStatus()
    {
        return $this->container['receipt_status'];
    }

    /**
     * Sets receipt_status
     *
     * @param int|null $receipt_status Статус чека * `0` - не определен; * `1` - ожидается отправка или переотправка чека * `2` - чек отправлен, ожидание результата обработки * `3` - чек обработан успешно * `4` - ошибка обработки чека * `5` - ошибка отправки чека (исчерпаны попытки отправки) * `6` - некорректные данные для отправки чека
     *
     * @return self
     */
    public function setReceiptStatus($receipt_status)
    {
        if (is_null($receipt_status)) {
            throw new \InvalidArgumentException('non-nullable receipt_status cannot be null');
        }

        if (($receipt_status > 6)) {
            throw new \InvalidArgumentException('invalid value for $receipt_status when calling ReceiptsInner., must be smaller than or equal to 6.');
        }
        if (($receipt_status < 0)) {
            throw new \InvalidArgumentException('invalid value for $receipt_status when calling ReceiptsInner., must be bigger than or equal to 0.');
        }

        $this->container['receipt_status'] = $receipt_status;

        return $this;
    }

    /**
     * Gets orig_receipt_id
     *
     * @return string|null
     */
    public function getOrigReceiptId()
    {
        return $this->container['orig_receipt_id'];
    }

    /**
     * Sets orig_receipt_id
     *
     * @param string|null $orig_receipt_id receiptId оригинального чека. Заполняется, если регистрация чека потребовала несколько попыток переотправки или были использованы сервисы `retryReceipt` или `doReceipt` (с указанием receiptId)
     *
     * @return self
     */
    public function setOrigReceiptId($orig_receipt_id)
    {
        if (is_null($orig_receipt_id)) {
            throw new \InvalidArgumentException('non-nullable orig_receipt_id cannot be null');
        }
        if ((mb_strlen($orig_receipt_id) > 36)) {
            throw new \InvalidArgumentException('invalid length for $orig_receipt_id when calling ReceiptsInner., must be smaller than or equal to 36.');
        }
        if ((mb_strlen($orig_receipt_id) < 36)) {
            throw new \InvalidArgumentException('invalid length for $orig_receipt_id when calling ReceiptsInner., must be bigger than or equal to 36.');
        }
        if ((!preg_match("/^[a-f0-9\\-]+$/", ObjectSerializer::toString($orig_receipt_id)))) {
            throw new \InvalidArgumentException("invalid value for \$orig_receipt_id when calling ReceiptsInner., must conform to the pattern /^[a-f0-9\\-]+$/.");
        }

        $this->container['orig_receipt_id'] = $orig_receipt_id;

        return $this;
    }

    /**
     * Gets error
     *
     * @return \Sberbank\Model\ReceiptsInnerError|null
     */
    public function getError()
    {
        return $this->container['error'];
    }

    /**
     * Sets error
     *
     * @param \Sberbank\Model\ReceiptsInnerError|null $error error
     *
     * @return self
     */
    public function setError($error)
    {
        if (is_null($error)) {
            throw new \InvalidArgumentException('non-nullable error cannot be null');
        }
        $this->container['error'] = $error;

        return $this;
    }

    /**
     * Gets payload
     *
     * @return \Sberbank\Model\ReceiptsInnerPayload|null
     */
    public function getPayload()
    {
        return $this->container['payload'];
    }

    /**
     * Sets payload
     *
     * @param \Sberbank\Model\ReceiptsInnerPayload|null $payload payload
     *
     * @return self
     */
    public function setPayload($payload)
    {
        if (is_null($payload)) {
            throw new \InvalidArgumentException('non-nullable payload cannot be null');
        }
        $this->container['payload'] = $payload;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return string|null
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param string|null $timestamp Дата и время получения ответа от кассового сервиса в формате «dd.mm.yyyy HH:MM:SS»
     *
     * @return self
     */
    public function setTimestamp($timestamp)
    {
        if (is_null($timestamp)) {
            throw new \InvalidArgumentException('non-nullable timestamp cannot be null');
        }
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets group_code
     *
     * @return string|null
     */
    public function getGroupCode()
    {
        return $this->container['group_code'];
    }

    /**
     * Sets group_code
     *
     * @param string|null $group_code Идентификатор группы ККТ
     *
     * @return self
     */
    public function setGroupCode($group_code)
    {
        if (is_null($group_code)) {
            throw new \InvalidArgumentException('non-nullable group_code cannot be null');
        }
        if ((mb_strlen($group_code) > 32)) {
            throw new \InvalidArgumentException('invalid length for $group_code when calling ReceiptsInner., must be smaller than or equal to 32.');
        }
        if ((!preg_match("/^[ -~]*$/", ObjectSerializer::toString($group_code)))) {
            throw new \InvalidArgumentException("invalid value for \$group_code when calling ReceiptsInner., must conform to the pattern /^[ -~]*$/.");
        }

        $this->container['group_code'] = $group_code;

        return $this;
    }

    /**
     * Gets daemon_code
     *
     * @return string|null
     */
    public function getDaemonCode()
    {
        return $this->container['daemon_code'];
    }

    /**
     * Sets daemon_code
     *
     * @param string|null $daemon_code Наименование сервера кассового сервиса
     *
     * @return self
     */
    public function setDaemonCode($daemon_code)
    {
        if (is_null($daemon_code)) {
            throw new \InvalidArgumentException('non-nullable daemon_code cannot be null');
        }
        if ((mb_strlen($daemon_code) > 255)) {
            throw new \InvalidArgumentException('invalid length for $daemon_code when calling ReceiptsInner., must be smaller than or equal to 255.');
        }
        if ((!preg_match("/^[ -~]*$/", ObjectSerializer::toString($daemon_code)))) {
            throw new \InvalidArgumentException("invalid value for \$daemon_code when calling ReceiptsInner., must conform to the pattern /^[ -~]*$/.");
        }

        $this->container['daemon_code'] = $daemon_code;

        return $this;
    }

    /**
     * Gets device_code
     *
     * @return string|null
     */
    public function getDeviceCode()
    {
        return $this->container['device_code'];
    }

    /**
     * Sets device_code
     *
     * @param string|null $device_code Код ККТ в кассовом сервисе
     *
     * @return self
     */
    public function setDeviceCode($device_code)
    {
        if (is_null($device_code)) {
            throw new \InvalidArgumentException('non-nullable device_code cannot be null');
        }
        if ((mb_strlen($device_code) > 255)) {
            throw new \InvalidArgumentException('invalid length for $device_code when calling ReceiptsInner., must be smaller than or equal to 255.');
        }
        if ((!preg_match("/^[ -~]*$/", ObjectSerializer::toString($device_code)))) {
            throw new \InvalidArgumentException("invalid value for \$device_code when calling ReceiptsInner., must conform to the pattern /^[ -~]*$/.");
        }

        $this->container['device_code'] = $device_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


