<?php
/**
 * TdsExternalAttributes
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Sberbank
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API платёжного шлюза Сбербанка
 *
 * Настоящий документ описывает программные интерфейсы платёжного шлюза Сбербанка, который позволяет проводить платежи в интернет-эквайринге.
 *
 * The version of the OpenAPI document: 1.0.7
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Sberbank\Model;

use \ArrayAccess;
use \Sberbank\ObjectSerializer;

/**
 * TdsExternalAttributes Class Doc Comment
 *
 * @category Class
 * @description Результат внешней 3-D Secure аутентификации
 * @package  Sberbank
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TdsExternalAttributes implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'tdsExternalAttributes';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'eci' => 'string',
        'xid' => 'string',
        'cavv' => 'string',
        'id_term' => 'string',
        'payment_system' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'eci' => null,
        'xid' => null,
        'cavv' => null,
        'id_term' => null,
        'payment_system' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'eci' => false,
        'xid' => false,
        'cavv' => false,
        'id_term' => false,
        'payment_system' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'eci' => 'eci',
        'xid' => 'xid',
        'cavv' => 'cavv',
        'id_term' => 'idTerm',
        'payment_system' => 'paymentSystem'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'eci' => 'setEci',
        'xid' => 'setXid',
        'cavv' => 'setCavv',
        'id_term' => 'setIdTerm',
        'payment_system' => 'setPaymentSystem'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'eci' => 'getEci',
        'xid' => 'getXid',
        'cavv' => 'getCavv',
        'id_term' => 'getIdTerm',
        'payment_system' => 'getPaymentSystem'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const PAYMENT_SYSTEM_VISA = 'VISA';
    public const PAYMENT_SYSTEM_MASTERCARD = 'MASTERCARD';
    public const PAYMENT_SYSTEM_AMEX = 'AMEX';
    public const PAYMENT_SYSTEM_JCB = 'JCB';
    public const PAYMENT_SYSTEM_CUP = 'CUP';
    public const PAYMENT_SYSTEM_MIR = 'MIR';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentSystemAllowableValues()
    {
        return [
            self::PAYMENT_SYSTEM_VISA,
            self::PAYMENT_SYSTEM_MASTERCARD,
            self::PAYMENT_SYSTEM_AMEX,
            self::PAYMENT_SYSTEM_JCB,
            self::PAYMENT_SYSTEM_CUP,
            self::PAYMENT_SYSTEM_MIR,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('eci', $data ?? [], null);
        $this->setIfExists('xid', $data ?? [], null);
        $this->setIfExists('cavv', $data ?? [], null);
        $this->setIfExists('id_term', $data ?? [], null);
        $this->setIfExists('payment_system', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['eci'] === null) {
            $invalidProperties[] = "'eci' can't be null";
        }
        if ((mb_strlen($this->container['eci']) > 2)) {
            $invalidProperties[] = "invalid value for 'eci', the character length must be smaller than or equal to 2.";
        }

        if ((mb_strlen($this->container['eci']) < 1)) {
            $invalidProperties[] = "invalid value for 'eci', the character length must be bigger than or equal to 1.";
        }

        if (!preg_match("/^\\d+$/", $this->container['eci'])) {
            $invalidProperties[] = "invalid value for 'eci', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['xid']) && (mb_strlen($this->container['xid']) > 36)) {
            $invalidProperties[] = "invalid value for 'xid', the character length must be smaller than or equal to 36.";
        }

        if (!is_null($this->container['xid']) && (mb_strlen($this->container['xid']) < 28)) {
            $invalidProperties[] = "invalid value for 'xid', the character length must be bigger than or equal to 28.";
        }

        if (!is_null($this->container['xid']) && !preg_match("/^[ -~]+$/", $this->container['xid'])) {
            $invalidProperties[] = "invalid value for 'xid', must be conform to the pattern /^[ -~]+$/.";
        }

        if (!is_null($this->container['cavv']) && (mb_strlen($this->container['cavv']) > 28)) {
            $invalidProperties[] = "invalid value for 'cavv', the character length must be smaller than or equal to 28.";
        }

        if (!is_null($this->container['cavv']) && (mb_strlen($this->container['cavv']) < 28)) {
            $invalidProperties[] = "invalid value for 'cavv', the character length must be bigger than or equal to 28.";
        }

        if (!is_null($this->container['cavv']) && !preg_match("/^[ -~]+$/", $this->container['cavv'])) {
            $invalidProperties[] = "invalid value for 'cavv', must be conform to the pattern /^[ -~]+$/.";
        }

        if (!is_null($this->container['id_term']) && (mb_strlen($this->container['id_term']) > 8)) {
            $invalidProperties[] = "invalid value for 'id_term', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['id_term']) && (mb_strlen($this->container['id_term']) < 1)) {
            $invalidProperties[] = "invalid value for 'id_term', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['id_term']) && !preg_match("/^\\d+$/", $this->container['id_term'])) {
            $invalidProperties[] = "invalid value for 'id_term', must be conform to the pattern /^\\d+$/.";
        }

        $allowedValues = $this->getPaymentSystemAllowableValues();
        if (!is_null($this->container['payment_system']) && !in_array($this->container['payment_system'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'payment_system', must be one of '%s'",
                $this->container['payment_system'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['payment_system']) && (mb_strlen($this->container['payment_system']) > 10)) {
            $invalidProperties[] = "invalid value for 'payment_system', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['payment_system']) && (mb_strlen($this->container['payment_system']) < 1)) {
            $invalidProperties[] = "invalid value for 'payment_system', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['payment_system']) && !preg_match("/^[A-Za-z]*$/", $this->container['payment_system'])) {
            $invalidProperties[] = "invalid value for 'payment_system', must be conform to the pattern /^[A-Za-z]*$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets eci
     *
     * @return string
     */
    public function getEci()
    {
        return $this->container['eci'];
    }

    /**
     * Sets eci
     *
     * @param string $eci Индикатор электронной коммерции, при проведении платежа   VISA     | Mastercard | МИР      | Описание   ---------|------------|----------|--------------------------   7 или 07 | 0 или 00   | 3 или 03 | Не проводилась или ошибка   6 или 06 | 1 или 01   | 1 или 01 | Попытка проведения   5 или 05 | 2 или 02   | 2 или 02 | Успешно проводилась
     *
     * @return self
     */
    public function setEci($eci)
    {
        if (is_null($eci)) {
            throw new \InvalidArgumentException('non-nullable eci cannot be null');
        }
        if ((mb_strlen($eci) > 2)) {
            throw new \InvalidArgumentException('invalid length for $eci when calling TdsExternalAttributes., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($eci) < 1)) {
            throw new \InvalidArgumentException('invalid length for $eci when calling TdsExternalAttributes., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($eci)))) {
            throw new \InvalidArgumentException("invalid value for \$eci when calling TdsExternalAttributes., must conform to the pattern /^\\d+$/.");
        }

        $this->container['eci'] = $eci;

        return $this;
    }

    /**
     * Gets xid
     *
     * @return string|null
     */
    public function getXid()
    {
        return $this->container['xid'];
    }

    /**
     * Sets xid
     *
     * @param string|null $xid Уникальный идентификатор 3-D Secure аутентификации (xid или dsTransId)
     *
     * @return self
     */
    public function setXid($xid)
    {
        if (is_null($xid)) {
            throw new \InvalidArgumentException('non-nullable xid cannot be null');
        }
        if ((mb_strlen($xid) > 36)) {
            throw new \InvalidArgumentException('invalid length for $xid when calling TdsExternalAttributes., must be smaller than or equal to 36.');
        }
        if ((mb_strlen($xid) < 28)) {
            throw new \InvalidArgumentException('invalid length for $xid when calling TdsExternalAttributes., must be bigger than or equal to 28.');
        }
        if ((!preg_match("/^[ -~]+$/", ObjectSerializer::toString($xid)))) {
            throw new \InvalidArgumentException("invalid value for \$xid when calling TdsExternalAttributes., must conform to the pattern /^[ -~]+$/.");
        }

        $this->container['xid'] = $xid;

        return $this;
    }

    /**
     * Gets cavv
     *
     * @return string|null
     */
    public function getCavv()
    {
        return $this->container['cavv'];
    }

    /**
     * Sets cavv
     *
     * @param string|null $cavv Криптограмма с результатом аутентификации Плательщика по протоколу 3-D Secure
     *
     * @return self
     */
    public function setCavv($cavv)
    {
        if (is_null($cavv)) {
            throw new \InvalidArgumentException('non-nullable cavv cannot be null');
        }
        if ((mb_strlen($cavv) > 28)) {
            throw new \InvalidArgumentException('invalid length for $cavv when calling TdsExternalAttributes., must be smaller than or equal to 28.');
        }
        if ((mb_strlen($cavv) < 28)) {
            throw new \InvalidArgumentException('invalid length for $cavv when calling TdsExternalAttributes., must be bigger than or equal to 28.');
        }
        if ((!preg_match("/^[ -~]+$/", ObjectSerializer::toString($cavv)))) {
            throw new \InvalidArgumentException("invalid value for \$cavv when calling TdsExternalAttributes., must conform to the pattern /^[ -~]+$/.");
        }

        $this->container['cavv'] = $cavv;

        return $this;
    }

    /**
     * Gets id_term
     *
     * @return string|null
     */
    public function getIdTerm()
    {
        return $this->container['id_term'];
    }

    /**
     * Sets id_term
     *
     * @param string|null $id_term Идентификатор терминала под которым проводилась операция
     *
     * @return self
     */
    public function setIdTerm($id_term)
    {
        if (is_null($id_term)) {
            throw new \InvalidArgumentException('non-nullable id_term cannot be null');
        }
        if ((mb_strlen($id_term) > 8)) {
            throw new \InvalidArgumentException('invalid length for $id_term when calling TdsExternalAttributes., must be smaller than or equal to 8.');
        }
        if ((mb_strlen($id_term) < 1)) {
            throw new \InvalidArgumentException('invalid length for $id_term when calling TdsExternalAttributes., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($id_term)))) {
            throw new \InvalidArgumentException("invalid value for \$id_term when calling TdsExternalAttributes., must conform to the pattern /^\\d+$/.");
        }

        $this->container['id_term'] = $id_term;

        return $this;
    }

    /**
     * Gets payment_system
     *
     * @return string|null
     */
    public function getPaymentSystem()
    {
        return $this->container['payment_system'];
    }

    /**
     * Sets payment_system
     *
     * @param string|null $payment_system Наименование платёжной системы, через которую проводилась аутентификация 3-D Secure
     *
     * @return self
     */
    public function setPaymentSystem($payment_system)
    {
        if (is_null($payment_system)) {
            throw new \InvalidArgumentException('non-nullable payment_system cannot be null');
        }
        $allowedValues = $this->getPaymentSystemAllowableValues();
        if (!in_array($payment_system, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'payment_system', must be one of '%s'",
                    $payment_system,
                    implode("', '", $allowedValues)
                )
            );
        }
        if ((mb_strlen($payment_system) > 10)) {
            throw new \InvalidArgumentException('invalid length for $payment_system when calling TdsExternalAttributes., must be smaller than or equal to 10.');
        }
        if ((mb_strlen($payment_system) < 1)) {
            throw new \InvalidArgumentException('invalid length for $payment_system when calling TdsExternalAttributes., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[A-Za-z]*$/", ObjectSerializer::toString($payment_system)))) {
            throw new \InvalidArgumentException("invalid value for \$payment_system when calling TdsExternalAttributes., must conform to the pattern /^[A-Za-z]*$/.");
        }

        $this->container['payment_system'] = $payment_system;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


