<?php
/**
 * CartItemsItemsInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Sberbank
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API платёжного шлюза Сбербанка
 *
 * Настоящий документ описывает программные интерфейсы платёжного шлюза Сбербанка, который позволяет проводить платежи в интернет-эквайринге.
 *
 * The version of the OpenAPI document: 1.0.7
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Sberbank\Model;

use \ArrayAccess;
use \Sberbank\ObjectSerializer;

/**
 * CartItemsItemsInner Class Doc Comment
 *
 * @category Class
 * @description Элемент массива с атрибутами товарной позиции в Корзине
 * @package  Sberbank
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CartItemsItemsInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'cartItems_items_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'position_id' => 'string',
        'item_code' => 'string',
        'discount' => '\Sberbank\Model\CartItemsItemsInnerDiscount',
        'agent_interest' => '\Sberbank\Model\CartItemsItemsInnerAgentInterest',
        'name' => 'string',
        'quantity' => '\Sberbank\Model\CartItemsItemsInnerQuantity',
        'measurement_unit' => 'string',
        'item_price' => 'int',
        'item_amount' => 'int',
        'item_currency' => 'float',
        'item_details' => '\Sberbank\Model\CartItemsItemsInnerItemDetails',
        'payment_method' => 'string',
        'payment_object' => 'string',
        'tax' => '\Sberbank\Model\CartItemsItemsInnerTax',
        'nomenclature_code' => 'string',
        'mark_code' => '\Sberbank\Model\CartItemsItemsInnerMarkCode',
        'mark_quantity' => '\Sberbank\Model\CartItemsItemsInnerMarkQuantity',
        'mark_processing_mode' => 'string',
        'excise' => 'string',
        'country_code' => 'string',
        'declaration_number' => 'string',
        'agent_info' => '\Sberbank\Model\CartItemsItemsInnerAgentInfo',
        'supplier_info' => '\Sberbank\Model\CartItemsItemsInnerSupplierInfo',
        'sectoral_item_props' => '\Sberbank\Model\CartItemsItemsInnerSectoralItemPropsInner[]',
        'user_data' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'position_id' => null,
        'item_code' => null,
        'discount' => null,
        'agent_interest' => null,
        'name' => null,
        'quantity' => null,
        'measurement_unit' => null,
        'item_price' => null,
        'item_amount' => null,
        'item_currency' => null,
        'item_details' => null,
        'payment_method' => null,
        'payment_object' => null,
        'tax' => null,
        'nomenclature_code' => null,
        'mark_code' => null,
        'mark_quantity' => null,
        'mark_processing_mode' => null,
        'excise' => null,
        'country_code' => null,
        'declaration_number' => null,
        'agent_info' => null,
        'supplier_info' => null,
        'sectoral_item_props' => null,
        'user_data' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'position_id' => false,
        'item_code' => false,
        'discount' => false,
        'agent_interest' => false,
        'name' => false,
        'quantity' => false,
        'measurement_unit' => false,
        'item_price' => false,
        'item_amount' => false,
        'item_currency' => false,
        'item_details' => false,
        'payment_method' => false,
        'payment_object' => false,
        'tax' => false,
        'nomenclature_code' => false,
        'mark_code' => false,
        'mark_quantity' => false,
        'mark_processing_mode' => false,
        'excise' => false,
        'country_code' => false,
        'declaration_number' => false,
        'agent_info' => false,
        'supplier_info' => false,
        'sectoral_item_props' => false,
        'user_data' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'position_id' => 'positionId',
        'item_code' => 'itemCode',
        'discount' => 'discount',
        'agent_interest' => 'agentInterest',
        'name' => 'name',
        'quantity' => 'quantity',
        'measurement_unit' => 'measurementUnit',
        'item_price' => 'itemPrice',
        'item_amount' => 'itemAmount',
        'item_currency' => 'itemCurrency',
        'item_details' => 'itemDetails',
        'payment_method' => 'paymentMethod',
        'payment_object' => 'paymentObject',
        'tax' => 'tax',
        'nomenclature_code' => 'nomenclatureCode',
        'mark_code' => 'markCode',
        'mark_quantity' => 'markQuantity',
        'mark_processing_mode' => 'markProcessingMode',
        'excise' => 'excise',
        'country_code' => 'countryCode',
        'declaration_number' => 'declarationNumber',
        'agent_info' => 'agentInfo',
        'supplier_info' => 'supplierInfo',
        'sectoral_item_props' => 'sectoralItemProps',
        'user_data' => 'userData'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'position_id' => 'setPositionId',
        'item_code' => 'setItemCode',
        'discount' => 'setDiscount',
        'agent_interest' => 'setAgentInterest',
        'name' => 'setName',
        'quantity' => 'setQuantity',
        'measurement_unit' => 'setMeasurementUnit',
        'item_price' => 'setItemPrice',
        'item_amount' => 'setItemAmount',
        'item_currency' => 'setItemCurrency',
        'item_details' => 'setItemDetails',
        'payment_method' => 'setPaymentMethod',
        'payment_object' => 'setPaymentObject',
        'tax' => 'setTax',
        'nomenclature_code' => 'setNomenclatureCode',
        'mark_code' => 'setMarkCode',
        'mark_quantity' => 'setMarkQuantity',
        'mark_processing_mode' => 'setMarkProcessingMode',
        'excise' => 'setExcise',
        'country_code' => 'setCountryCode',
        'declaration_number' => 'setDeclarationNumber',
        'agent_info' => 'setAgentInfo',
        'supplier_info' => 'setSupplierInfo',
        'sectoral_item_props' => 'setSectoralItemProps',
        'user_data' => 'setUserData'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'position_id' => 'getPositionId',
        'item_code' => 'getItemCode',
        'discount' => 'getDiscount',
        'agent_interest' => 'getAgentInterest',
        'name' => 'getName',
        'quantity' => 'getQuantity',
        'measurement_unit' => 'getMeasurementUnit',
        'item_price' => 'getItemPrice',
        'item_amount' => 'getItemAmount',
        'item_currency' => 'getItemCurrency',
        'item_details' => 'getItemDetails',
        'payment_method' => 'getPaymentMethod',
        'payment_object' => 'getPaymentObject',
        'tax' => 'getTax',
        'nomenclature_code' => 'getNomenclatureCode',
        'mark_code' => 'getMarkCode',
        'mark_quantity' => 'getMarkQuantity',
        'mark_processing_mode' => 'getMarkProcessingMode',
        'excise' => 'getExcise',
        'country_code' => 'getCountryCode',
        'declaration_number' => 'getDeclarationNumber',
        'agent_info' => 'getAgentInfo',
        'supplier_info' => 'getSupplierInfo',
        'sectoral_item_props' => 'getSectoralItemProps',
        'user_data' => 'getUserData'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const PAYMENT_METHOD_FULL_PREPAYMENT = 'full_prepayment';
    public const PAYMENT_METHOD_PREPAYMENT = 'prepayment';
    public const PAYMENT_METHOD_ADVANCE = 'advance';
    public const PAYMENT_METHOD_FULL_PAYMENT = 'full_payment';
    public const PAYMENT_METHOD_PARTIAL_PAYMENT = 'partial_payment';
    public const PAYMENT_METHOD_CREDIT = 'credit';
    public const PAYMENT_METHOD_CREDIT_PAYMENT = 'credit_payment';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentMethodAllowableValues()
    {
        return [
            self::PAYMENT_METHOD_FULL_PREPAYMENT,
            self::PAYMENT_METHOD_PREPAYMENT,
            self::PAYMENT_METHOD_ADVANCE,
            self::PAYMENT_METHOD_FULL_PAYMENT,
            self::PAYMENT_METHOD_PARTIAL_PAYMENT,
            self::PAYMENT_METHOD_CREDIT,
            self::PAYMENT_METHOD_CREDIT_PAYMENT,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('position_id', $data ?? [], null);
        $this->setIfExists('item_code', $data ?? [], null);
        $this->setIfExists('discount', $data ?? [], null);
        $this->setIfExists('agent_interest', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('measurement_unit', $data ?? [], null);
        $this->setIfExists('item_price', $data ?? [], null);
        $this->setIfExists('item_amount', $data ?? [], null);
        $this->setIfExists('item_currency', $data ?? [], null);
        $this->setIfExists('item_details', $data ?? [], null);
        $this->setIfExists('payment_method', $data ?? [], null);
        $this->setIfExists('payment_object', $data ?? [], null);
        $this->setIfExists('tax', $data ?? [], null);
        $this->setIfExists('nomenclature_code', $data ?? [], null);
        $this->setIfExists('mark_code', $data ?? [], null);
        $this->setIfExists('mark_quantity', $data ?? [], null);
        $this->setIfExists('mark_processing_mode', $data ?? [], null);
        $this->setIfExists('excise', $data ?? [], null);
        $this->setIfExists('country_code', $data ?? [], null);
        $this->setIfExists('declaration_number', $data ?? [], null);
        $this->setIfExists('agent_info', $data ?? [], null);
        $this->setIfExists('supplier_info', $data ?? [], null);
        $this->setIfExists('sectoral_item_props', $data ?? [], null);
        $this->setIfExists('user_data', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['position_id'] === null) {
            $invalidProperties[] = "'position_id' can't be null";
        }
        if ((mb_strlen($this->container['position_id']) > 12)) {
            $invalidProperties[] = "invalid value for 'position_id', the character length must be smaller than or equal to 12.";
        }

        if ((mb_strlen($this->container['position_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'position_id', the character length must be bigger than or equal to 1.";
        }

        if (!preg_match("/^[0-9]*$/", $this->container['position_id'])) {
            $invalidProperties[] = "invalid value for 'position_id', must be conform to the pattern /^[0-9]*$/.";
        }

        if ($this->container['item_code'] === null) {
            $invalidProperties[] = "'item_code' can't be null";
        }
        if ((mb_strlen($this->container['item_code']) > 100)) {
            $invalidProperties[] = "invalid value for 'item_code', the character length must be smaller than or equal to 100.";
        }

        if ((mb_strlen($this->container['item_code']) < 1)) {
            $invalidProperties[] = "invalid value for 'item_code', the character length must be bigger than or equal to 1.";
        }

        if (!preg_match("/^[ -~А-Яа-яЁё№]*$/", $this->container['item_code'])) {
            $invalidProperties[] = "invalid value for 'item_code', must be conform to the pattern /^[ -~А-Яа-яЁё№]*$/.";
        }

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 100)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 100.";
        }

        if ((mb_strlen($this->container['name']) < 1)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 1.";
        }

        if (!preg_match("/^[ -~А-Яа-яЁё№]*$/", $this->container['name'])) {
            $invalidProperties[] = "invalid value for 'name', must be conform to the pattern /^[ -~А-Яа-яЁё№]*$/.";
        }

        if ($this->container['quantity'] === null) {
            $invalidProperties[] = "'quantity' can't be null";
        }
        if (!is_null($this->container['measurement_unit']) && (mb_strlen($this->container['measurement_unit']) > 16)) {
            $invalidProperties[] = "invalid value for 'measurement_unit', the character length must be smaller than or equal to 16.";
        }

        if (!is_null($this->container['measurement_unit']) && (mb_strlen($this->container['measurement_unit']) < 1)) {
            $invalidProperties[] = "invalid value for 'measurement_unit', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['item_price'] === null) {
            $invalidProperties[] = "'item_price' can't be null";
        }
        if (($this->container['item_price'] > 4294967200)) {
            $invalidProperties[] = "invalid value for 'item_price', must be smaller than or equal to 4294967200.";
        }

        if (($this->container['item_price'] < 0)) {
            $invalidProperties[] = "invalid value for 'item_price', must be bigger than or equal to 0.";
        }

        if ($this->container['item_amount'] === null) {
            $invalidProperties[] = "'item_amount' can't be null";
        }
        if (($this->container['item_amount'] > 4294967200)) {
            $invalidProperties[] = "invalid value for 'item_amount', must be smaller than or equal to 4294967200.";
        }

        if (($this->container['item_amount'] < 0)) {
            $invalidProperties[] = "invalid value for 'item_amount', must be bigger than or equal to 0.";
        }

        if ($this->container['payment_method'] === null) {
            $invalidProperties[] = "'payment_method' can't be null";
        }
        $allowedValues = $this->getPaymentMethodAllowableValues();
        if (!is_null($this->container['payment_method']) && !in_array($this->container['payment_method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'payment_method', must be one of '%s'",
                $this->container['payment_method'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['payment_object'] === null) {
            $invalidProperties[] = "'payment_object' can't be null";
        }
        if ((mb_strlen($this->container['payment_object']) > 21)) {
            $invalidProperties[] = "invalid value for 'payment_object', the character length must be smaller than or equal to 21.";
        }

        if ((mb_strlen($this->container['payment_object']) < 1)) {
            $invalidProperties[] = "invalid value for 'payment_object', the character length must be bigger than or equal to 1.";
        }

        if (!preg_match("/^[A-Za-z0-9-_ ]+$/", $this->container['payment_object'])) {
            $invalidProperties[] = "invalid value for 'payment_object', must be conform to the pattern /^[A-Za-z0-9-_ ]+$/.";
        }

        if ($this->container['tax'] === null) {
            $invalidProperties[] = "'tax' can't be null";
        }
        if (!is_null($this->container['nomenclature_code']) && (mb_strlen($this->container['nomenclature_code']) > 150)) {
            $invalidProperties[] = "invalid value for 'nomenclature_code', the character length must be smaller than or equal to 150.";
        }

        if (!is_null($this->container['nomenclature_code']) && (mb_strlen($this->container['nomenclature_code']) < 18)) {
            $invalidProperties[] = "invalid value for 'nomenclature_code', the character length must be bigger than or equal to 18.";
        }

        if (!is_null($this->container['nomenclature_code']) && !preg_match("/^[A-F0-9\\-]+$/", $this->container['nomenclature_code'])) {
            $invalidProperties[] = "invalid value for 'nomenclature_code', must be conform to the pattern /^[A-F0-9\\-]+$/.";
        }

        if (!is_null($this->container['mark_processing_mode']) && !preg_match("/^\\d+$/", $this->container['mark_processing_mode'])) {
            $invalidProperties[] = "invalid value for 'mark_processing_mode', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['excise']) && (mb_strlen($this->container['excise']) > 10)) {
            $invalidProperties[] = "invalid value for 'excise', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['excise']) && (mb_strlen($this->container['excise']) < 1)) {
            $invalidProperties[] = "invalid value for 'excise', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['excise']) && !preg_match("/^\\d+$/", $this->container['excise'])) {
            $invalidProperties[] = "invalid value for 'excise', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['country_code']) && (mb_strlen($this->container['country_code']) > 3)) {
            $invalidProperties[] = "invalid value for 'country_code', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['country_code']) && (mb_strlen($this->container['country_code']) < 3)) {
            $invalidProperties[] = "invalid value for 'country_code', the character length must be bigger than or equal to 3.";
        }

        if (!is_null($this->container['country_code']) && !preg_match("/^\\d+$/", $this->container['country_code'])) {
            $invalidProperties[] = "invalid value for 'country_code', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['declaration_number']) && (mb_strlen($this->container['declaration_number']) > 32)) {
            $invalidProperties[] = "invalid value for 'declaration_number', the character length must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['declaration_number']) && (mb_strlen($this->container['declaration_number']) < 1)) {
            $invalidProperties[] = "invalid value for 'declaration_number', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['declaration_number']) && !preg_match("/^[ -~А-Яа-яЁё№]*$/", $this->container['declaration_number'])) {
            $invalidProperties[] = "invalid value for 'declaration_number', must be conform to the pattern /^[ -~А-Яа-яЁё№]*$/.";
        }

        if (!is_null($this->container['user_data']) && (mb_strlen($this->container['user_data']) > 64)) {
            $invalidProperties[] = "invalid value for 'user_data', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['user_data']) && (mb_strlen($this->container['user_data']) < 1)) {
            $invalidProperties[] = "invalid value for 'user_data', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['user_data']) && !preg_match("/^[ -~А-Яа-яЁё№]*$/", $this->container['user_data'])) {
            $invalidProperties[] = "invalid value for 'user_data', must be conform to the pattern /^[ -~А-Яа-яЁё№]*$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets position_id
     *
     * @return string
     */
    public function getPositionId()
    {
        return $this->container['position_id'];
    }

    /**
     * Sets position_id
     *
     * @param string $position_id Уникальный идентификатор товарной позиции внутри Корзины
     *
     * @return self
     */
    public function setPositionId($position_id)
    {
        if (is_null($position_id)) {
            throw new \InvalidArgumentException('non-nullable position_id cannot be null');
        }
        if ((mb_strlen($position_id) > 12)) {
            throw new \InvalidArgumentException('invalid length for $position_id when calling CartItemsItemsInner., must be smaller than or equal to 12.');
        }
        if ((mb_strlen($position_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $position_id when calling CartItemsItemsInner., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[0-9]*$/", ObjectSerializer::toString($position_id)))) {
            throw new \InvalidArgumentException("invalid value for \$position_id when calling CartItemsItemsInner., must conform to the pattern /^[0-9]*$/.");
        }

        $this->container['position_id'] = $position_id;

        return $this;
    }

    /**
     * Gets item_code
     *
     * @return string
     */
    public function getItemCode()
    {
        return $this->container['item_code'];
    }

    /**
     * Sets item_code
     *
     * @param string $item_code Номер (идентификатор) товарной позиции в системе Клиента. Параметр должен быть уникальным в рамках запроса
     *
     * @return self
     */
    public function setItemCode($item_code)
    {
        if (is_null($item_code)) {
            throw new \InvalidArgumentException('non-nullable item_code cannot be null');
        }
        if ((mb_strlen($item_code) > 100)) {
            throw new \InvalidArgumentException('invalid length for $item_code when calling CartItemsItemsInner., must be smaller than or equal to 100.');
        }
        if ((mb_strlen($item_code) < 1)) {
            throw new \InvalidArgumentException('invalid length for $item_code when calling CartItemsItemsInner., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~А-Яа-яЁё№]*$/", ObjectSerializer::toString($item_code)))) {
            throw new \InvalidArgumentException("invalid value for \$item_code when calling CartItemsItemsInner., must conform to the pattern /^[ -~А-Яа-яЁё№]*$/.");
        }

        $this->container['item_code'] = $item_code;

        return $this;
    }

    /**
     * Gets discount
     *
     * @return \Sberbank\Model\CartItemsItemsInnerDiscount|null
     */
    public function getDiscount()
    {
        return $this->container['discount'];
    }

    /**
     * Sets discount
     *
     * @param \Sberbank\Model\CartItemsItemsInnerDiscount|null $discount discount
     *
     * @return self
     */
    public function setDiscount($discount)
    {
        if (is_null($discount)) {
            throw new \InvalidArgumentException('non-nullable discount cannot be null');
        }
        $this->container['discount'] = $discount;

        return $this;
    }

    /**
     * Gets agent_interest
     *
     * @return \Sberbank\Model\CartItemsItemsInnerAgentInterest|null
     */
    public function getAgentInterest()
    {
        return $this->container['agent_interest'];
    }

    /**
     * Sets agent_interest
     *
     * @param \Sberbank\Model\CartItemsItemsInnerAgentInterest|null $agent_interest agent_interest
     *
     * @return self
     */
    public function setAgentInterest($agent_interest)
    {
        if (is_null($agent_interest)) {
            throw new \InvalidArgumentException('non-nullable agent_interest cannot be null');
        }
        $this->container['agent_interest'] = $agent_interest;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name __Тег ФФД 1030.__ Наименование или описание товарной позиции Корзины в свободной форме
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 100)) {
            throw new \InvalidArgumentException('invalid length for $name when calling CartItemsItemsInner., must be smaller than or equal to 100.');
        }
        if ((mb_strlen($name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $name when calling CartItemsItemsInner., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~А-Яа-яЁё№]*$/", ObjectSerializer::toString($name)))) {
            throw new \InvalidArgumentException("invalid value for \$name when calling CartItemsItemsInner., must conform to the pattern /^[ -~А-Яа-яЁё№]*$/.");
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return \Sberbank\Model\CartItemsItemsInnerQuantity
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param \Sberbank\Model\CartItemsItemsInnerQuantity $quantity quantity
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets measurement_unit
     *
     * @return string|null
     */
    public function getMeasurementUnit()
    {
        return $this->container['measurement_unit'];
    }

    /**
     * Sets measurement_unit
     *
     * @param string|null $measurement_unit __Тег ФФД 1197.__ Единица измерения предмета расчета. Передается только при использовании ФФД версии 1.05.
     *
     * @return self
     */
    public function setMeasurementUnit($measurement_unit)
    {
        if (is_null($measurement_unit)) {
            throw new \InvalidArgumentException('non-nullable measurement_unit cannot be null');
        }
        if ((mb_strlen($measurement_unit) > 16)) {
            throw new \InvalidArgumentException('invalid length for $measurement_unit when calling CartItemsItemsInner., must be smaller than or equal to 16.');
        }
        if ((mb_strlen($measurement_unit) < 1)) {
            throw new \InvalidArgumentException('invalid length for $measurement_unit when calling CartItemsItemsInner., must be bigger than or equal to 1.');
        }

        $this->container['measurement_unit'] = $measurement_unit;

        return $this;
    }

    /**
     * Gets item_price
     *
     * @return int
     */
    public function getItemPrice()
    {
        return $this->container['item_price'];
    }

    /**
     * Sets item_price
     *
     * @param int $item_price __Тег ФФД 1079.__ Стоимость единицы товара/услуги в минимальных единицах валюты, с учетом скидок, баллов, бонусов и т.п. Обязателен для фискализации.
     *
     * @return self
     */
    public function setItemPrice($item_price)
    {
        if (is_null($item_price)) {
            throw new \InvalidArgumentException('non-nullable item_price cannot be null');
        }

        if (($item_price > 4294967200)) {
            throw new \InvalidArgumentException('invalid value for $item_price when calling CartItemsItemsInner., must be smaller than or equal to 4294967200.');
        }
        if (($item_price < 0)) {
            throw new \InvalidArgumentException('invalid value for $item_price when calling CartItemsItemsInner., must be bigger than or equal to 0.');
        }

        $this->container['item_price'] = $item_price;

        return $this;
    }

    /**
     * Gets item_amount
     *
     * @return int
     */
    public function getItemAmount()
    {
        return $this->container['item_amount'];
    }

    /**
     * Sets item_amount
     *
     * @param int $item_amount __Тег ФФД 1043.__ Итоговая стоимость позиции с учетом скидок, баллов, бонусов в минимальных единицах валюты. Должна соответствовать произведению количества товара в позиции и стоимости единицы товара. Обязательно для фискализации. Сумма всех товарных позиций Корзины должна быть равна сумме Заказа
     *
     * @return self
     */
    public function setItemAmount($item_amount)
    {
        if (is_null($item_amount)) {
            throw new \InvalidArgumentException('non-nullable item_amount cannot be null');
        }

        if (($item_amount > 4294967200)) {
            throw new \InvalidArgumentException('invalid value for $item_amount when calling CartItemsItemsInner., must be smaller than or equal to 4294967200.');
        }
        if (($item_amount < 0)) {
            throw new \InvalidArgumentException('invalid value for $item_amount when calling CartItemsItemsInner., must be bigger than or equal to 0.');
        }

        $this->container['item_amount'] = $item_amount;

        return $this;
    }

    /**
     * Gets item_currency
     *
     * @return float|null
     */
    public function getItemCurrency()
    {
        return $this->container['item_currency'];
    }

    /**
     * Sets item_currency
     *
     * @param float|null $item_currency Код валюты товарной позиции ISO 4217. Если не указан, считается равным валюте заказа. Все товарные позиции Корзины должны быть выражены в одной и той же валюте и должны совпадать с валютой оригинального Заказа
     *
     * @return self
     */
    public function setItemCurrency($item_currency)
    {
        if (is_null($item_currency)) {
            throw new \InvalidArgumentException('non-nullable item_currency cannot be null');
        }


        $this->container['item_currency'] = $item_currency;

        return $this;
    }

    /**
     * Gets item_details
     *
     * @return \Sberbank\Model\CartItemsItemsInnerItemDetails|null
     */
    public function getItemDetails()
    {
        return $this->container['item_details'];
    }

    /**
     * Sets item_details
     *
     * @param \Sberbank\Model\CartItemsItemsInnerItemDetails|null $item_details item_details
     *
     * @return self
     */
    public function setItemDetails($item_details)
    {
        if (is_null($item_details)) {
            throw new \InvalidArgumentException('non-nullable item_details cannot be null');
        }
        $this->container['item_details'] = $item_details;

        return $this;
    }

    /**
     * Gets payment_method
     *
     * @return string
     */
    public function getPaymentMethod()
    {
        return $this->container['payment_method'];
    }

    /**
     * Sets payment_method
     *
     * @param string $payment_method __Тег ФФД 1214.__ Признак способа расчета. Может принимать следующие значения:   * `full_prepayment` - Полная предоплата   * `prepayment` - Частичная предоплата   * `advance` - Аванс   * `full_payment` - Полный расчет. В том числе и с учетом аванса или предоплаты   * `partial_payment` - Частичный расчет и кредит   * `credit` - Кредит   * `credit_payment` - Оплата кредита
     *
     * @return self
     */
    public function setPaymentMethod($payment_method)
    {
        if (is_null($payment_method)) {
            throw new \InvalidArgumentException('non-nullable payment_method cannot be null');
        }
        $allowedValues = $this->getPaymentMethodAllowableValues();
        if (!in_array($payment_method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'payment_method', must be one of '%s'",
                    $payment_method,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payment_method'] = $payment_method;

        return $this;
    }

    /**
     * Gets payment_object
     *
     * @return string
     */
    public function getPaymentObject()
    {
        return $this->container['payment_object'];
    }

    /**
     * Sets payment_object
     *
     * @param string $payment_object __Тег ФФД 1212.__ Признак предмета расчета. Значения в справочнике.  Предмет расчета                                                                                                                                        | ФФД 1.05               | ФФД 1.2 -------------------------------------------------------------------------------------------------------------------------------------------------------|------------------------|--------- Товар                                                                                                                                                  | commodity              | 1 Подакцизный товар без маркировки. Например, легковой автомобиль, моторное масло, сахаросодержащие напитки.                                             | excise                 | 2 Услуга                                                                                                                                                 | service                | 4 Работа                                                                                                                                                 | job                    | 3 Платеж. Передается, если формируется чек Аванса или Предоплаты                                                                                         | payment                | 10 Товар, подлежащий маркировке и имеющий код маркировки. Например, молочная продукция, товары легкой промышленности.                                     | отсутствует            | 33 Товар, подлежащий маркировке и не имеющий кода маркировки. Например, если код маркировки испорчен и не подлежит считыванию и восстановлению.           | отсутствует            | 32 Подакцизный маркированный товар, имеющий код маркировки                                                                                                | отсутствует            | 31 Ставка азартной игры                                                                                                                                   | gambling_bet           | 5 Лотерейный билет                                                                                                                                       | lottery                | 7 Результат интеллектуальной деятельности                                                                                                                | intellectual_activity  | 9 Курортный сбор                                                                                                                                         | отсутствует            | 18 Внереализационный доход. Может использоваться, например, в случае предъявления штрафа покупателю или невозможности вернуть остаток с подарочной карты. | non-operating_gain     | 15 Взнос в счет оплаты пени, штрафе, вознаграждении                                                                                                       | award                  | 12 Агентское вознаграждение                                                                                                                               | agent_commission       | 11 Имущественное право                                                                                                                                    | property_right         | 14 Страховые взносы                                                                                                                                       | insurance_premium      | 16 Торговый сбор                                                                                                                                          | sales_tax              | 17 Залог                                                                                                                                                  | deposit                | 19 О суммах произведенных расходов в соответствии со статьей 346.16                                                                                       | expense                | 20 Взносы на ОПС ИП                                                                                                                                       | pension_insurance_ip   | 21 Взносы на ОПС                                                                                                                                          | pension_insurance      | 22 Взносы на ОМС ИП                                                                                                                                       | medical_insurance_ip   | 23 Взносы на ОМС                                                                                                                                          | medical_insurance      | 24 Взносы на ОСС                                                                                                                                          | social_insurance       | 25 Платеж казино                                                                                                                                          | casino_payment         | 26 Выдача денежных средств банковским платежным агентом                                                                                                   | отсутствует            | 27 Иной предмет расчета                                                                                                                                   | another                | 13
     *
     * @return self
     */
    public function setPaymentObject($payment_object)
    {
        if (is_null($payment_object)) {
            throw new \InvalidArgumentException('non-nullable payment_object cannot be null');
        }
        if ((mb_strlen($payment_object) > 21)) {
            throw new \InvalidArgumentException('invalid length for $payment_object when calling CartItemsItemsInner., must be smaller than or equal to 21.');
        }
        if ((mb_strlen($payment_object) < 1)) {
            throw new \InvalidArgumentException('invalid length for $payment_object when calling CartItemsItemsInner., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[A-Za-z0-9-_ ]+$/", ObjectSerializer::toString($payment_object)))) {
            throw new \InvalidArgumentException("invalid value for \$payment_object when calling CartItemsItemsInner., must conform to the pattern /^[A-Za-z0-9-_ ]+$/.");
        }

        $this->container['payment_object'] = $payment_object;

        return $this;
    }

    /**
     * Gets tax
     *
     * @return \Sberbank\Model\CartItemsItemsInnerTax
     */
    public function getTax()
    {
        return $this->container['tax'];
    }

    /**
     * Sets tax
     *
     * @param \Sberbank\Model\CartItemsItemsInnerTax $tax tax
     *
     * @return self
     */
    public function setTax($tax)
    {
        if (is_null($tax)) {
            throw new \InvalidArgumentException('non-nullable tax cannot be null');
        }
        $this->container['tax'] = $tax;

        return $this;
    }

    /**
     * Gets nomenclature_code
     *
     * @return string|null
     */
    public function getNomenclatureCode()
    {
        return $this->container['nomenclature_code'];
    }

    /**
     * Sets nomenclature_code
     *
     * @param string|null $nomenclature_code __Тег ФФД 1162.__ Используется только при продаже маркированных товаров. Код товара в шестнадцатиричном представлении, с пробелами. Передается при реализации маркированных товаров в ФФД 1.05. Максимальная длина 32 байта. Для касс АТОЛ Онлайн допускается прямая передача кода товара, считанного в формате GS1 Data Matrix. В таком случае сервис сам преобразует значение в необходимый шестнадцатиричный вид.
     *
     * @return self
     */
    public function setNomenclatureCode($nomenclature_code)
    {
        if (is_null($nomenclature_code)) {
            throw new \InvalidArgumentException('non-nullable nomenclature_code cannot be null');
        }
        if ((mb_strlen($nomenclature_code) > 150)) {
            throw new \InvalidArgumentException('invalid length for $nomenclature_code when calling CartItemsItemsInner., must be smaller than or equal to 150.');
        }
        if ((mb_strlen($nomenclature_code) < 18)) {
            throw new \InvalidArgumentException('invalid length for $nomenclature_code when calling CartItemsItemsInner., must be bigger than or equal to 18.');
        }
        if ((!preg_match("/^[A-F0-9\\-]+$/", ObjectSerializer::toString($nomenclature_code)))) {
            throw new \InvalidArgumentException("invalid value for \$nomenclature_code when calling CartItemsItemsInner., must conform to the pattern /^[A-F0-9\\-]+$/.");
        }

        $this->container['nomenclature_code'] = $nomenclature_code;

        return $this;
    }

    /**
     * Gets mark_code
     *
     * @return \Sberbank\Model\CartItemsItemsInnerMarkCode|null
     */
    public function getMarkCode()
    {
        return $this->container['mark_code'];
    }

    /**
     * Sets mark_code
     *
     * @param \Sberbank\Model\CartItemsItemsInnerMarkCode|null $mark_code mark_code
     *
     * @return self
     */
    public function setMarkCode($mark_code)
    {
        if (is_null($mark_code)) {
            throw new \InvalidArgumentException('non-nullable mark_code cannot be null');
        }
        $this->container['mark_code'] = $mark_code;

        return $this;
    }

    /**
     * Gets mark_quantity
     *
     * @return \Sberbank\Model\CartItemsItemsInnerMarkQuantity|null
     */
    public function getMarkQuantity()
    {
        return $this->container['mark_quantity'];
    }

    /**
     * Sets mark_quantity
     *
     * @param \Sberbank\Model\CartItemsItemsInnerMarkQuantity|null $mark_quantity mark_quantity
     *
     * @return self
     */
    public function setMarkQuantity($mark_quantity)
    {
        if (is_null($mark_quantity)) {
            throw new \InvalidArgumentException('non-nullable mark_quantity cannot be null');
        }
        $this->container['mark_quantity'] = $mark_quantity;

        return $this;
    }

    /**
     * Gets mark_processing_mode
     *
     * @return string|null
     */
    public function getMarkProcessingMode()
    {
        return $this->container['mark_processing_mode'];
    }

    /**
     * Sets mark_processing_mode
     *
     * @param string|null $mark_processing_mode __Тег ФФД 2102.__ Режим обработки кода маркировки. Передается значение \"0\" при торговле маркированными товарами. Только для ФФД 1.2.
     *
     * @return self
     */
    public function setMarkProcessingMode($mark_processing_mode)
    {
        if (is_null($mark_processing_mode)) {
            throw new \InvalidArgumentException('non-nullable mark_processing_mode cannot be null');
        }

        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($mark_processing_mode)))) {
            throw new \InvalidArgumentException("invalid value for \$mark_processing_mode when calling CartItemsItemsInner., must conform to the pattern /^\\d+$/.");
        }

        $this->container['mark_processing_mode'] = $mark_processing_mode;

        return $this;
    }

    /**
     * Gets excise
     *
     * @return string|null
     */
    public function getExcise()
    {
        return $this->container['excise'];
    }

    /**
     * Sets excise
     *
     * @param string|null $excise __Тег ФФД 1229.__ Используется при продаже подакцизных товаров. Сумма акциза в минимальных единицах валюты
     *
     * @return self
     */
    public function setExcise($excise)
    {
        if (is_null($excise)) {
            throw new \InvalidArgumentException('non-nullable excise cannot be null');
        }
        if ((mb_strlen($excise) > 10)) {
            throw new \InvalidArgumentException('invalid length for $excise when calling CartItemsItemsInner., must be smaller than or equal to 10.');
        }
        if ((mb_strlen($excise) < 1)) {
            throw new \InvalidArgumentException('invalid length for $excise when calling CartItemsItemsInner., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($excise)))) {
            throw new \InvalidArgumentException("invalid value for \$excise when calling CartItemsItemsInner., must conform to the pattern /^\\d+$/.");
        }

        $this->container['excise'] = $excise;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string|null
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string|null $country_code __Тег ФФД 1230.__ Используется при продаже подакцизных товаров. Код страны происхождения товара, 3 цифры.
     *
     * @return self
     */
    public function setCountryCode($country_code)
    {
        if (is_null($country_code)) {
            throw new \InvalidArgumentException('non-nullable country_code cannot be null');
        }
        if ((mb_strlen($country_code) > 3)) {
            throw new \InvalidArgumentException('invalid length for $country_code when calling CartItemsItemsInner., must be smaller than or equal to 3.');
        }
        if ((mb_strlen($country_code) < 3)) {
            throw new \InvalidArgumentException('invalid length for $country_code when calling CartItemsItemsInner., must be bigger than or equal to 3.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($country_code)))) {
            throw new \InvalidArgumentException("invalid value for \$country_code when calling CartItemsItemsInner., must conform to the pattern /^\\d+$/.");
        }

        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets declaration_number
     *
     * @return string|null
     */
    public function getDeclarationNumber()
    {
        return $this->container['declaration_number'];
    }

    /**
     * Sets declaration_number
     *
     * @param string|null $declaration_number __Тег ФФД 1231.__ Используется при продаже подакцизных товаров. Номер таможенной декларации
     *
     * @return self
     */
    public function setDeclarationNumber($declaration_number)
    {
        if (is_null($declaration_number)) {
            throw new \InvalidArgumentException('non-nullable declaration_number cannot be null');
        }
        if ((mb_strlen($declaration_number) > 32)) {
            throw new \InvalidArgumentException('invalid length for $declaration_number when calling CartItemsItemsInner., must be smaller than or equal to 32.');
        }
        if ((mb_strlen($declaration_number) < 1)) {
            throw new \InvalidArgumentException('invalid length for $declaration_number when calling CartItemsItemsInner., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~А-Яа-яЁё№]*$/", ObjectSerializer::toString($declaration_number)))) {
            throw new \InvalidArgumentException("invalid value for \$declaration_number when calling CartItemsItemsInner., must conform to the pattern /^[ -~А-Яа-яЁё№]*$/.");
        }

        $this->container['declaration_number'] = $declaration_number;

        return $this;
    }

    /**
     * Gets agent_info
     *
     * @return \Sberbank\Model\CartItemsItemsInnerAgentInfo|null
     */
    public function getAgentInfo()
    {
        return $this->container['agent_info'];
    }

    /**
     * Sets agent_info
     *
     * @param \Sberbank\Model\CartItemsItemsInnerAgentInfo|null $agent_info agent_info
     *
     * @return self
     */
    public function setAgentInfo($agent_info)
    {
        if (is_null($agent_info)) {
            throw new \InvalidArgumentException('non-nullable agent_info cannot be null');
        }
        $this->container['agent_info'] = $agent_info;

        return $this;
    }

    /**
     * Gets supplier_info
     *
     * @return \Sberbank\Model\CartItemsItemsInnerSupplierInfo|null
     */
    public function getSupplierInfo()
    {
        return $this->container['supplier_info'];
    }

    /**
     * Sets supplier_info
     *
     * @param \Sberbank\Model\CartItemsItemsInnerSupplierInfo|null $supplier_info supplier_info
     *
     * @return self
     */
    public function setSupplierInfo($supplier_info)
    {
        if (is_null($supplier_info)) {
            throw new \InvalidArgumentException('non-nullable supplier_info cannot be null');
        }
        $this->container['supplier_info'] = $supplier_info;

        return $this;
    }

    /**
     * Gets sectoral_item_props
     *
     * @return \Sberbank\Model\CartItemsItemsInnerSectoralItemPropsInner[]|null
     */
    public function getSectoralItemProps()
    {
        return $this->container['sectoral_item_props'];
    }

    /**
     * Sets sectoral_item_props
     *
     * @param \Sberbank\Model\CartItemsItemsInnerSectoralItemPropsInner[]|null $sectoral_item_props __Тег ФФД 1260.__ Отраслевой реквизит предмета расчета. Передается, если в предмете расчета содержится маркированный товар и включение указанного реквизита предусмотрено нормативными актами для этой товарной группы. Только для ФФД 1.2.
     *
     * @return self
     */
    public function setSectoralItemProps($sectoral_item_props)
    {
        if (is_null($sectoral_item_props)) {
            throw new \InvalidArgumentException('non-nullable sectoral_item_props cannot be null');
        }
        $this->container['sectoral_item_props'] = $sectoral_item_props;

        return $this;
    }

    /**
     * Gets user_data
     *
     * @return string|null
     */
    public function getUserData()
    {
        return $this->container['user_data'];
    }

    /**
     * Sets user_data
     *
     * @param string|null $user_data __Тег ФФД 1191.__ Дополнительный реквизит предмета расчета. Может включатся в чек с учетом особенностей сферы деятельности.
     *
     * @return self
     */
    public function setUserData($user_data)
    {
        if (is_null($user_data)) {
            throw new \InvalidArgumentException('non-nullable user_data cannot be null');
        }
        if ((mb_strlen($user_data) > 64)) {
            throw new \InvalidArgumentException('invalid length for $user_data when calling CartItemsItemsInner., must be smaller than or equal to 64.');
        }
        if ((mb_strlen($user_data) < 1)) {
            throw new \InvalidArgumentException('invalid length for $user_data when calling CartItemsItemsInner., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~А-Яа-яЁё№]*$/", ObjectSerializer::toString($user_data)))) {
            throw new \InvalidArgumentException("invalid value for \$user_data when calling CartItemsItemsInner., must conform to the pattern /^[ -~А-Яа-яЁё№]*$/.");
        }

        $this->container['user_data'] = $user_data;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


