<?php
/**
 * DataEntryModeAttributes
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Sberbank
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API платёжного шлюза Сбербанка
 *
 * Настоящий документ описывает программные интерфейсы платёжного шлюза Сбербанка, который позволяет проводить платежи в интернет-эквайринге.
 *
 * The version of the OpenAPI document: 1.0.7
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Sberbank\Model;

use \ArrayAccess;
use \Sberbank\ObjectSerializer;

/**
 * DataEntryModeAttributes Class Doc Comment
 *
 * @category Class
 * @description Атрибуты режима ввода карточных данных
 * @package  Sberbank
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DataEntryModeAttributes implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'dataEntryModeAttributes';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'data_entry_mode' => 'string',
        'initial_order_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'data_entry_mode' => null,
        'initial_order_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'data_entry_mode' => false,
        'initial_order_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'data_entry_mode' => 'dataEntryMode',
        'initial_order_id' => 'initialOrderId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'data_entry_mode' => 'setDataEntryMode',
        'initial_order_id' => 'setInitialOrderId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'data_entry_mode' => 'getDataEntryMode',
        'initial_order_id' => 'getInitialOrderId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const DATA_ENTRY_MODE_CAPTURED = 'CAPTURED';
    public const DATA_ENTRY_MODE_DEFERRED = 'DEFERRED';
    public const DATA_ENTRY_MODE_CREDENTIAL_ON_FILE = 'CREDENTIAL-ON-FILE';
    public const DATA_ENTRY_MODE_RECURRING = 'RECURRING';
    public const DATA_ENTRY_MODE_INSTALLMENT = 'INSTALLMENT';
    public const DATA_ENTRY_MODE_RESUBMISSION = 'RESUBMISSION';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDataEntryModeAllowableValues()
    {
        return [
            self::DATA_ENTRY_MODE_CAPTURED,
            self::DATA_ENTRY_MODE_DEFERRED,
            self::DATA_ENTRY_MODE_CREDENTIAL_ON_FILE,
            self::DATA_ENTRY_MODE_RECURRING,
            self::DATA_ENTRY_MODE_INSTALLMENT,
            self::DATA_ENTRY_MODE_RESUBMISSION,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('data_entry_mode', $data ?? [], null);
        $this->setIfExists('initial_order_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDataEntryModeAllowableValues();
        if (!is_null($this->container['data_entry_mode']) && !in_array($this->container['data_entry_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'data_entry_mode', must be one of '%s'",
                $this->container['data_entry_mode'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['data_entry_mode']) && (mb_strlen($this->container['data_entry_mode']) > 20)) {
            $invalidProperties[] = "invalid value for 'data_entry_mode', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['data_entry_mode']) && (mb_strlen($this->container['data_entry_mode']) < 1)) {
            $invalidProperties[] = "invalid value for 'data_entry_mode', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['data_entry_mode']) && !preg_match("/^[ -~]+$/", $this->container['data_entry_mode'])) {
            $invalidProperties[] = "invalid value for 'data_entry_mode', must be conform to the pattern /^[ -~]+$/.";
        }

        if (!is_null($this->container['initial_order_id']) && (mb_strlen($this->container['initial_order_id']) > 36)) {
            $invalidProperties[] = "invalid value for 'initial_order_id', the character length must be smaller than or equal to 36.";
        }

        if (!is_null($this->container['initial_order_id']) && (mb_strlen($this->container['initial_order_id']) < 36)) {
            $invalidProperties[] = "invalid value for 'initial_order_id', the character length must be bigger than or equal to 36.";
        }

        if (!is_null($this->container['initial_order_id']) && !preg_match("/^[a-f0-9\\-]+$/", $this->container['initial_order_id'])) {
            $invalidProperties[] = "invalid value for 'initial_order_id', must be conform to the pattern /^[a-f0-9\\-]+$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets data_entry_mode
     *
     * @return string|null
     */
    public function getDataEntryMode()
    {
        return $this->container['data_entry_mode'];
    }

    /**
     * Sets data_entry_mode
     *
     * @param string|null $data_entry_mode Режим ввода платёжных данных в операции. В случае отсутствия воспринимается, как операция, инициированная Плательщиком без сохранения реквизитов.   * `CAPTURED` = Операция инициирована Плательщиком; реквизиты сохраняются для последующих операций;   * `DEFERRED` = Операция инициирована Плательщиком; реквизиты сохраняются для последующих операций, отложенная авторизация;   * `CREDENTIAL-ON-FILE` = Операция инициирована Плательщиком с использованием ранее сохраненных реквизитов;   * `RECURRING` = Операция инициирована Клиентом с использованием сохраненных реквизитов; периодический платёж по поручению Плательщика без графика;   * `INSTALLMENT` = Операция инициирована Клиентом с использованием сохраненных реквизитов; периодический платёж по поручению Плательщика по графику;   * `RESUBMISSION` = Операция инициирована Клиентом с использованием сохраненных реквизитов; повторная авторизация.
     *
     * @return self
     */
    public function setDataEntryMode($data_entry_mode)
    {
        if (is_null($data_entry_mode)) {
            throw new \InvalidArgumentException('non-nullable data_entry_mode cannot be null');
        }
        $allowedValues = $this->getDataEntryModeAllowableValues();
        if (!in_array($data_entry_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'data_entry_mode', must be one of '%s'",
                    $data_entry_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        if ((mb_strlen($data_entry_mode) > 20)) {
            throw new \InvalidArgumentException('invalid length for $data_entry_mode when calling DataEntryModeAttributes., must be smaller than or equal to 20.');
        }
        if ((mb_strlen($data_entry_mode) < 1)) {
            throw new \InvalidArgumentException('invalid length for $data_entry_mode when calling DataEntryModeAttributes., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~]+$/", ObjectSerializer::toString($data_entry_mode)))) {
            throw new \InvalidArgumentException("invalid value for \$data_entry_mode when calling DataEntryModeAttributes., must conform to the pattern /^[ -~]+$/.");
        }

        $this->container['data_entry_mode'] = $data_entry_mode;

        return $this;
    }

    /**
     * Gets initial_order_id
     *
     * @return string|null
     */
    public function getInitialOrderId()
    {
        return $this->container['initial_order_id'];
    }

    /**
     * Sets initial_order_id
     *
     * @param string|null $initial_order_id Идентификатор заказа в ПШ сохранения реквизитов Плательщика. Передается в операциях, осуществляемых по ранее сохраненным реквизитам Плательщика
     *
     * @return self
     */
    public function setInitialOrderId($initial_order_id)
    {
        if (is_null($initial_order_id)) {
            throw new \InvalidArgumentException('non-nullable initial_order_id cannot be null');
        }
        if ((mb_strlen($initial_order_id) > 36)) {
            throw new \InvalidArgumentException('invalid length for $initial_order_id when calling DataEntryModeAttributes., must be smaller than or equal to 36.');
        }
        if ((mb_strlen($initial_order_id) < 36)) {
            throw new \InvalidArgumentException('invalid length for $initial_order_id when calling DataEntryModeAttributes., must be bigger than or equal to 36.');
        }
        if ((!preg_match("/^[a-f0-9\\-]+$/", ObjectSerializer::toString($initial_order_id)))) {
            throw new \InvalidArgumentException("invalid value for \$initial_order_id when calling DataEntryModeAttributes., must conform to the pattern /^[a-f0-9\\-]+$/.");
        }

        $this->container['initial_order_id'] = $initial_order_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


