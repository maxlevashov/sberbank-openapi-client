<?php
/**
 * ExternalParams
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Sberbank
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API платёжного шлюза Сбербанка
 *
 * Настоящий документ описывает программные интерфейсы платёжного шлюза Сбербанка, который позволяет проводить платежи в интернет-эквайринге.
 *
 * The version of the OpenAPI document: 1.0.7
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Sberbank\Model;

use \ArrayAccess;
use \Sberbank\ObjectSerializer;

/**
 * ExternalParams Class Doc Comment
 *
 * @category Class
 * @description Блок дополнительных параметров, который возвращается Клиенту для специфичных сценариев
 * @package  Sberbank
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ExternalParams implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'externalParams';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'sbol_deep_link' => 'string',
        'sbol_bank_invoice_id' => 'string',
        'sbp_payload' => 'string',
        'sbp_deeplink' => 'string',
        'sber_payload' => 'string',
        'qrc_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'sbol_deep_link' => null,
        'sbol_bank_invoice_id' => null,
        'sbp_payload' => null,
        'sbp_deeplink' => null,
        'sber_payload' => null,
        'qrc_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'sbol_deep_link' => false,
        'sbol_bank_invoice_id' => false,
        'sbp_payload' => false,
        'sbp_deeplink' => false,
        'sber_payload' => false,
        'qrc_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sbol_deep_link' => 'sbolDeepLink',
        'sbol_bank_invoice_id' => 'sbolBankInvoiceId',
        'sbp_payload' => 'sbpPayload',
        'sbp_deeplink' => 'sbpDeeplink',
        'sber_payload' => 'sberPayload',
        'qrc_id' => 'qrcId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sbol_deep_link' => 'setSbolDeepLink',
        'sbol_bank_invoice_id' => 'setSbolBankInvoiceId',
        'sbp_payload' => 'setSbpPayload',
        'sbp_deeplink' => 'setSbpDeeplink',
        'sber_payload' => 'setSberPayload',
        'qrc_id' => 'setQrcId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sbol_deep_link' => 'getSbolDeepLink',
        'sbol_bank_invoice_id' => 'getSbolBankInvoiceId',
        'sbp_payload' => 'getSbpPayload',
        'sbp_deeplink' => 'getSbpDeeplink',
        'sber_payload' => 'getSberPayload',
        'qrc_id' => 'getQrcId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('sbol_deep_link', $data ?? [], null);
        $this->setIfExists('sbol_bank_invoice_id', $data ?? [], null);
        $this->setIfExists('sbp_payload', $data ?? [], null);
        $this->setIfExists('sbp_deeplink', $data ?? [], null);
        $this->setIfExists('sber_payload', $data ?? [], null);
        $this->setIfExists('qrc_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['sbol_deep_link']) && (mb_strlen($this->container['sbol_deep_link']) > 1024)) {
            $invalidProperties[] = "invalid value for 'sbol_deep_link', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['sbol_deep_link']) && (mb_strlen($this->container['sbol_deep_link']) < 1)) {
            $invalidProperties[] = "invalid value for 'sbol_deep_link', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['sbol_deep_link']) && !preg_match("/^[ -~]*$/", $this->container['sbol_deep_link'])) {
            $invalidProperties[] = "invalid value for 'sbol_deep_link', must be conform to the pattern /^[ -~]*$/.";
        }

        if (!is_null($this->container['sbol_bank_invoice_id']) && (mb_strlen($this->container['sbol_bank_invoice_id']) > 1024)) {
            $invalidProperties[] = "invalid value for 'sbol_bank_invoice_id', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['sbol_bank_invoice_id']) && (mb_strlen($this->container['sbol_bank_invoice_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'sbol_bank_invoice_id', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['sbol_bank_invoice_id']) && !preg_match("/^[ -~]*$/", $this->container['sbol_bank_invoice_id'])) {
            $invalidProperties[] = "invalid value for 'sbol_bank_invoice_id', must be conform to the pattern /^[ -~]*$/.";
        }

        if (!is_null($this->container['sbp_payload']) && (mb_strlen($this->container['sbp_payload']) > 999)) {
            $invalidProperties[] = "invalid value for 'sbp_payload', the character length must be smaller than or equal to 999.";
        }

        if (!is_null($this->container['sbp_payload']) && (mb_strlen($this->container['sbp_payload']) < 1)) {
            $invalidProperties[] = "invalid value for 'sbp_payload', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['sbp_payload']) && !preg_match("/^[ -~]*$/", $this->container['sbp_payload'])) {
            $invalidProperties[] = "invalid value for 'sbp_payload', must be conform to the pattern /^[ -~]*$/.";
        }

        if (!is_null($this->container['sbp_deeplink']) && (mb_strlen($this->container['sbp_deeplink']) > 999)) {
            $invalidProperties[] = "invalid value for 'sbp_deeplink', the character length must be smaller than or equal to 999.";
        }

        if (!is_null($this->container['sbp_deeplink']) && (mb_strlen($this->container['sbp_deeplink']) < 1)) {
            $invalidProperties[] = "invalid value for 'sbp_deeplink', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['sbp_deeplink']) && !preg_match("/^[ -~]*$/", $this->container['sbp_deeplink'])) {
            $invalidProperties[] = "invalid value for 'sbp_deeplink', must be conform to the pattern /^[ -~]*$/.";
        }

        if (!is_null($this->container['sber_payload']) && (mb_strlen($this->container['sber_payload']) > 256)) {
            $invalidProperties[] = "invalid value for 'sber_payload', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['sber_payload']) && (mb_strlen($this->container['sber_payload']) < 1)) {
            $invalidProperties[] = "invalid value for 'sber_payload', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['sber_payload']) && !preg_match("/^[ -~]*$/", $this->container['sber_payload'])) {
            $invalidProperties[] = "invalid value for 'sber_payload', must be conform to the pattern /^[ -~]*$/.";
        }

        if (!is_null($this->container['qrc_id']) && (mb_strlen($this->container['qrc_id']) > 32)) {
            $invalidProperties[] = "invalid value for 'qrc_id', the character length must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['qrc_id']) && (mb_strlen($this->container['qrc_id']) < 32)) {
            $invalidProperties[] = "invalid value for 'qrc_id', the character length must be bigger than or equal to 32.";
        }

        if (!is_null($this->container['qrc_id']) && !preg_match("/[A-Z0-9]+", $this->container['qrc_id'])) {
            $invalidProperties[] = "invalid value for 'qrc_id', must be conform to the pattern /[A-Z0-9]+.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sbol_deep_link
     *
     * @return string|null
     */
    public function getSbolDeepLink()
    {
        return $this->container['sbol_deep_link'];
    }

    /**
     * Sets sbol_deep_link
     *
     * @param string|null $sbol_deep_link Ссылка на переход в мобильное приложение \"Сбербанк-Онлайн\" для завершения оплаты
     *
     * @return self
     */
    public function setSbolDeepLink($sbol_deep_link)
    {
        if (is_null($sbol_deep_link)) {
            throw new \InvalidArgumentException('non-nullable sbol_deep_link cannot be null');
        }
        if ((mb_strlen($sbol_deep_link) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $sbol_deep_link when calling ExternalParams., must be smaller than or equal to 1024.');
        }
        if ((mb_strlen($sbol_deep_link) < 1)) {
            throw new \InvalidArgumentException('invalid length for $sbol_deep_link when calling ExternalParams., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~]*$/", ObjectSerializer::toString($sbol_deep_link)))) {
            throw new \InvalidArgumentException("invalid value for \$sbol_deep_link when calling ExternalParams., must conform to the pattern /^[ -~]*$/.");
        }

        $this->container['sbol_deep_link'] = $sbol_deep_link;

        return $this;
    }

    /**
     * Gets sbol_bank_invoice_id
     *
     * @return string|null
     */
    public function getSbolBankInvoiceId()
    {
        return $this->container['sbol_bank_invoice_id'];
    }

    /**
     * Sets sbol_bank_invoice_id
     *
     * @param string|null $sbol_bank_invoice_id Уникальный идентификатор заказа, сгенерированный ПШ
     *
     * @return self
     */
    public function setSbolBankInvoiceId($sbol_bank_invoice_id)
    {
        if (is_null($sbol_bank_invoice_id)) {
            throw new \InvalidArgumentException('non-nullable sbol_bank_invoice_id cannot be null');
        }
        if ((mb_strlen($sbol_bank_invoice_id) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $sbol_bank_invoice_id when calling ExternalParams., must be smaller than or equal to 1024.');
        }
        if ((mb_strlen($sbol_bank_invoice_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $sbol_bank_invoice_id when calling ExternalParams., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~]*$/", ObjectSerializer::toString($sbol_bank_invoice_id)))) {
            throw new \InvalidArgumentException("invalid value for \$sbol_bank_invoice_id when calling ExternalParams., must conform to the pattern /^[ -~]*$/.");
        }

        $this->container['sbol_bank_invoice_id'] = $sbol_bank_invoice_id;

        return $this;
    }

    /**
     * Gets sbp_payload
     *
     * @return string|null
     */
    public function getSbpPayload()
    {
        return $this->container['sbp_payload'];
    }

    /**
     * Sets sbp_payload
     *
     * @param string|null $sbp_payload Зарегистрированная Платежная или Информационная ссылка СБП актуальной версии формата двухмерного QR-кода (ISO/IEC 18004-2015), представляемая в виде URLBased.  Не возвращается если: * Отсутствует соответствующее разрешение. * Заказ не зарегистрировался * Отсутствует информация от НСПК, получаемая любым путем
     *
     * @return self
     */
    public function setSbpPayload($sbp_payload)
    {
        if (is_null($sbp_payload)) {
            throw new \InvalidArgumentException('non-nullable sbp_payload cannot be null');
        }
        if ((mb_strlen($sbp_payload) > 999)) {
            throw new \InvalidArgumentException('invalid length for $sbp_payload when calling ExternalParams., must be smaller than or equal to 999.');
        }
        if ((mb_strlen($sbp_payload) < 1)) {
            throw new \InvalidArgumentException('invalid length for $sbp_payload when calling ExternalParams., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~]*$/", ObjectSerializer::toString($sbp_payload)))) {
            throw new \InvalidArgumentException("invalid value for \$sbp_payload when calling ExternalParams., must conform to the pattern /^[ -~]*$/.");
        }

        $this->container['sbp_payload'] = $sbp_payload;

        return $this;
    }

    /**
     * Gets sbp_deeplink
     *
     * @return string|null
     */
    public function getSbpDeeplink()
    {
        return $this->container['sbp_deeplink'];
    }

    /**
     * Sets sbp_deeplink
     *
     * @param string|null $sbp_deeplink Зарезервировано
     *
     * @return self
     */
    public function setSbpDeeplink($sbp_deeplink)
    {
        if (is_null($sbp_deeplink)) {
            throw new \InvalidArgumentException('non-nullable sbp_deeplink cannot be null');
        }
        if ((mb_strlen($sbp_deeplink) > 999)) {
            throw new \InvalidArgumentException('invalid length for $sbp_deeplink when calling ExternalParams., must be smaller than or equal to 999.');
        }
        if ((mb_strlen($sbp_deeplink) < 1)) {
            throw new \InvalidArgumentException('invalid length for $sbp_deeplink when calling ExternalParams., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~]*$/", ObjectSerializer::toString($sbp_deeplink)))) {
            throw new \InvalidArgumentException("invalid value for \$sbp_deeplink when calling ExternalParams., must conform to the pattern /^[ -~]*$/.");
        }

        $this->container['sbp_deeplink'] = $sbp_deeplink;

        return $this;
    }

    /**
     * Gets sber_payload
     *
     * @return string|null
     */
    public function getSberPayload()
    {
        return $this->container['sber_payload'];
    }

    /**
     * Sets sber_payload
     *
     * @param string|null $sber_payload Зарегистрированная ссылка Плати QR от Сбербанка формата двухмерного QR-кода (ISO/IEC 18004-2015), представляемая в виде URL-Based.  Не возвращается если: * Отсутствует соответствующее разрешение * Заказ не зарегистрировался * Отсутствует информация от смежного модуля, который обрабатывает Плати QR от Сбербанка
     *
     * @return self
     */
    public function setSberPayload($sber_payload)
    {
        if (is_null($sber_payload)) {
            throw new \InvalidArgumentException('non-nullable sber_payload cannot be null');
        }
        if ((mb_strlen($sber_payload) > 256)) {
            throw new \InvalidArgumentException('invalid length for $sber_payload when calling ExternalParams., must be smaller than or equal to 256.');
        }
        if ((mb_strlen($sber_payload) < 1)) {
            throw new \InvalidArgumentException('invalid length for $sber_payload when calling ExternalParams., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~]*$/", ObjectSerializer::toString($sber_payload)))) {
            throw new \InvalidArgumentException("invalid value for \$sber_payload when calling ExternalParams., must conform to the pattern /^[ -~]*$/.");
        }

        $this->container['sber_payload'] = $sber_payload;

        return $this;
    }

    /**
     * Gets qrc_id
     *
     * @return string|null
     */
    public function getQrcId()
    {
        return $this->container['qrc_id'];
    }

    /**
     * Sets qrc_id
     *
     * @param string|null $qrc_id Идентификатор Функциональной ссылки СБП
     *
     * @return self
     */
    public function setQrcId($qrc_id)
    {
        if (is_null($qrc_id)) {
            throw new \InvalidArgumentException('non-nullable qrc_id cannot be null');
        }
        if ((mb_strlen($qrc_id) > 32)) {
            throw new \InvalidArgumentException('invalid length for $qrc_id when calling ExternalParams., must be smaller than or equal to 32.');
        }
        if ((mb_strlen($qrc_id) < 32)) {
            throw new \InvalidArgumentException('invalid length for $qrc_id when calling ExternalParams., must be bigger than or equal to 32.');
        }
        if ((!preg_match("/[A-Z0-9]+", ObjectSerializer::toString($qrc_id)))) {
            throw new \InvalidArgumentException("invalid value for \$qrc_id when calling ExternalParams., must conform to the pattern /[A-Z0-9]+.");
        }

        $this->container['qrc_id'] = $qrc_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


