<?php
/**
 * ReceiptsInnerPayload
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Sberbank
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API платёжного шлюза Сбербанка
 *
 * Настоящий документ описывает программные интерфейсы платёжного шлюза Сбербанка, который позволяет проводить платежи в интернет-эквайринге.
 *
 * The version of the OpenAPI document: 1.0.7
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Sberbank\Model;

use \ArrayAccess;
use \Sberbank\ObjectSerializer;

/**
 * ReceiptsInnerPayload Class Doc Comment
 *
 * @category Class
 * @description Реквизиты фискального чека
 * @package  Sberbank
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ReceiptsInnerPayload implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'receipts_inner_payload';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'fiscal_receipt_number' => 'int',
        'shift_number' => 'int',
        'receipt_datetime' => 'string',
        'total' => 'float',
        'fn_number' => 'string',
        'ecr_registration_number' => 'string',
        'fiscal_document_number' => 'int',
        'fiscal_document_attribute' => 'int',
        'fns_site' => 'string',
        'ofd_inn' => 'string',
        'ofd_receipt_url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'fiscal_receipt_number' => null,
        'shift_number' => null,
        'receipt_datetime' => null,
        'total' => null,
        'fn_number' => null,
        'ecr_registration_number' => null,
        'fiscal_document_number' => null,
        'fiscal_document_attribute' => null,
        'fns_site' => null,
        'ofd_inn' => null,
        'ofd_receipt_url' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'fiscal_receipt_number' => false,
        'shift_number' => false,
        'receipt_datetime' => false,
        'total' => false,
        'fn_number' => false,
        'ecr_registration_number' => false,
        'fiscal_document_number' => false,
        'fiscal_document_attribute' => false,
        'fns_site' => false,
        'ofd_inn' => false,
        'ofd_receipt_url' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'fiscal_receipt_number' => 'fiscalReceiptNumber',
        'shift_number' => 'shiftNumber',
        'receipt_datetime' => 'receiptDatetime',
        'total' => 'total',
        'fn_number' => 'fnNumber',
        'ecr_registration_number' => 'ecrRegistrationNumber',
        'fiscal_document_number' => 'fiscalDocumentNumber',
        'fiscal_document_attribute' => 'fiscalDocumentAttribute',
        'fns_site' => 'fnsSite',
        'ofd_inn' => 'ofdInn',
        'ofd_receipt_url' => 'ofdReceiptUrl'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'fiscal_receipt_number' => 'setFiscalReceiptNumber',
        'shift_number' => 'setShiftNumber',
        'receipt_datetime' => 'setReceiptDatetime',
        'total' => 'setTotal',
        'fn_number' => 'setFnNumber',
        'ecr_registration_number' => 'setEcrRegistrationNumber',
        'fiscal_document_number' => 'setFiscalDocumentNumber',
        'fiscal_document_attribute' => 'setFiscalDocumentAttribute',
        'fns_site' => 'setFnsSite',
        'ofd_inn' => 'setOfdInn',
        'ofd_receipt_url' => 'setOfdReceiptUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'fiscal_receipt_number' => 'getFiscalReceiptNumber',
        'shift_number' => 'getShiftNumber',
        'receipt_datetime' => 'getReceiptDatetime',
        'total' => 'getTotal',
        'fn_number' => 'getFnNumber',
        'ecr_registration_number' => 'getEcrRegistrationNumber',
        'fiscal_document_number' => 'getFiscalDocumentNumber',
        'fiscal_document_attribute' => 'getFiscalDocumentAttribute',
        'fns_site' => 'getFnsSite',
        'ofd_inn' => 'getOfdInn',
        'ofd_receipt_url' => 'getOfdReceiptUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('fiscal_receipt_number', $data ?? [], null);
        $this->setIfExists('shift_number', $data ?? [], null);
        $this->setIfExists('receipt_datetime', $data ?? [], null);
        $this->setIfExists('total', $data ?? [], null);
        $this->setIfExists('fn_number', $data ?? [], null);
        $this->setIfExists('ecr_registration_number', $data ?? [], null);
        $this->setIfExists('fiscal_document_number', $data ?? [], null);
        $this->setIfExists('fiscal_document_attribute', $data ?? [], null);
        $this->setIfExists('fns_site', $data ?? [], null);
        $this->setIfExists('ofd_inn', $data ?? [], null);
        $this->setIfExists('ofd_receipt_url', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['fiscal_receipt_number']) && ($this->container['fiscal_receipt_number'] > 250000)) {
            $invalidProperties[] = "invalid value for 'fiscal_receipt_number', must be smaller than or equal to 250000.";
        }

        if (!is_null($this->container['fiscal_receipt_number']) && ($this->container['fiscal_receipt_number'] < 0)) {
            $invalidProperties[] = "invalid value for 'fiscal_receipt_number', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['shift_number']) && ($this->container['shift_number'] > 9999999999)) {
            $invalidProperties[] = "invalid value for 'shift_number', must be smaller than or equal to 9999999999.";
        }

        if (!is_null($this->container['shift_number']) && ($this->container['shift_number'] < 0)) {
            $invalidProperties[] = "invalid value for 'shift_number', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['receipt_datetime']) && (mb_strlen($this->container['receipt_datetime']) > 30)) {
            $invalidProperties[] = "invalid value for 'receipt_datetime', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['receipt_datetime']) && !preg_match("/^[ -~]*$/", $this->container['receipt_datetime'])) {
            $invalidProperties[] = "invalid value for 'receipt_datetime', must be conform to the pattern /^[ -~]*$/.";
        }

        if (!is_null($this->container['fn_number']) && (mb_strlen($this->container['fn_number']) > 255)) {
            $invalidProperties[] = "invalid value for 'fn_number', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['fn_number']) && !preg_match("/^[ -~]*$/", $this->container['fn_number'])) {
            $invalidProperties[] = "invalid value for 'fn_number', must be conform to the pattern /^[ -~]*$/.";
        }

        if (!is_null($this->container['ecr_registration_number']) && (mb_strlen($this->container['ecr_registration_number']) > 255)) {
            $invalidProperties[] = "invalid value for 'ecr_registration_number', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['ecr_registration_number']) && !preg_match("/^[ -~]*$/", $this->container['ecr_registration_number'])) {
            $invalidProperties[] = "invalid value for 'ecr_registration_number', must be conform to the pattern /^[ -~]*$/.";
        }

        if (!is_null($this->container['fiscal_document_number']) && ($this->container['fiscal_document_number'] > 99999999)) {
            $invalidProperties[] = "invalid value for 'fiscal_document_number', must be smaller than or equal to 99999999.";
        }

        if (!is_null($this->container['fiscal_document_number']) && ($this->container['fiscal_document_number'] < 0)) {
            $invalidProperties[] = "invalid value for 'fiscal_document_number', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fiscal_document_attribute']) && ($this->container['fiscal_document_attribute'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'fiscal_document_attribute', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['fiscal_document_attribute']) && ($this->container['fiscal_document_attribute'] < 0)) {
            $invalidProperties[] = "invalid value for 'fiscal_document_attribute', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fns_site']) && (mb_strlen($this->container['fns_site']) > 1024)) {
            $invalidProperties[] = "invalid value for 'fns_site', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['fns_site']) && !preg_match("/^[ -~]*$/", $this->container['fns_site'])) {
            $invalidProperties[] = "invalid value for 'fns_site', must be conform to the pattern /^[ -~]*$/.";
        }

        if (!is_null($this->container['ofd_inn']) && (mb_strlen($this->container['ofd_inn']) > 20)) {
            $invalidProperties[] = "invalid value for 'ofd_inn', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['ofd_inn']) && !preg_match("/^[ -~]*$/", $this->container['ofd_inn'])) {
            $invalidProperties[] = "invalid value for 'ofd_inn', must be conform to the pattern /^[ -~]*$/.";
        }

        if (!is_null($this->container['ofd_receipt_url']) && (mb_strlen($this->container['ofd_receipt_url']) > 2048)) {
            $invalidProperties[] = "invalid value for 'ofd_receipt_url', the character length must be smaller than or equal to 2048.";
        }

        if (!is_null($this->container['ofd_receipt_url']) && !preg_match("/^[ -~]*$/", $this->container['ofd_receipt_url'])) {
            $invalidProperties[] = "invalid value for 'ofd_receipt_url', must be conform to the pattern /^[ -~]*$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets fiscal_receipt_number
     *
     * @return int|null
     */
    public function getFiscalReceiptNumber()
    {
        return $this->container['fiscal_receipt_number'];
    }

    /**
     * Sets fiscal_receipt_number
     *
     * @param int|null $fiscal_receipt_number Номер чека в смене
     *
     * @return self
     */
    public function setFiscalReceiptNumber($fiscal_receipt_number)
    {
        if (is_null($fiscal_receipt_number)) {
            throw new \InvalidArgumentException('non-nullable fiscal_receipt_number cannot be null');
        }

        if (($fiscal_receipt_number > 250000)) {
            throw new \InvalidArgumentException('invalid value for $fiscal_receipt_number when calling ReceiptsInnerPayload., must be smaller than or equal to 250000.');
        }
        if (($fiscal_receipt_number < 0)) {
            throw new \InvalidArgumentException('invalid value for $fiscal_receipt_number when calling ReceiptsInnerPayload., must be bigger than or equal to 0.');
        }

        $this->container['fiscal_receipt_number'] = $fiscal_receipt_number;

        return $this;
    }

    /**
     * Gets shift_number
     *
     * @return int|null
     */
    public function getShiftNumber()
    {
        return $this->container['shift_number'];
    }

    /**
     * Sets shift_number
     *
     * @param int|null $shift_number Номер чека в смене
     *
     * @return self
     */
    public function setShiftNumber($shift_number)
    {
        if (is_null($shift_number)) {
            throw new \InvalidArgumentException('non-nullable shift_number cannot be null');
        }

        if (($shift_number > 9999999999)) {
            throw new \InvalidArgumentException('invalid value for $shift_number when calling ReceiptsInnerPayload., must be smaller than or equal to 9999999999.');
        }
        if (($shift_number < 0)) {
            throw new \InvalidArgumentException('invalid value for $shift_number when calling ReceiptsInnerPayload., must be bigger than or equal to 0.');
        }

        $this->container['shift_number'] = $shift_number;

        return $this;
    }

    /**
     * Gets receipt_datetime
     *
     * @return string|null
     */
    public function getReceiptDatetime()
    {
        return $this->container['receipt_datetime'];
    }

    /**
     * Sets receipt_datetime
     *
     * @param string|null $receipt_datetime Дата и время фискального чека в формате «dd.mm.yyyy HH:MM:SS»
     *
     * @return self
     */
    public function setReceiptDatetime($receipt_datetime)
    {
        if (is_null($receipt_datetime)) {
            throw new \InvalidArgumentException('non-nullable receipt_datetime cannot be null');
        }
        if ((mb_strlen($receipt_datetime) > 30)) {
            throw new \InvalidArgumentException('invalid length for $receipt_datetime when calling ReceiptsInnerPayload., must be smaller than or equal to 30.');
        }
        if ((!preg_match("/^[ -~]*$/", ObjectSerializer::toString($receipt_datetime)))) {
            throw new \InvalidArgumentException("invalid value for \$receipt_datetime when calling ReceiptsInnerPayload., must conform to the pattern /^[ -~]*$/.");
        }

        $this->container['receipt_datetime'] = $receipt_datetime;

        return $this;
    }

    /**
     * Gets total
     *
     * @return float|null
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param float|null $total Итоговая сумма документа в рублях
     *
     * @return self
     */
    public function setTotal($total)
    {
        if (is_null($total)) {
            throw new \InvalidArgumentException('non-nullable total cannot be null');
        }
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets fn_number
     *
     * @return string|null
     */
    public function getFnNumber()
    {
        return $this->container['fn_number'];
    }

    /**
     * Sets fn_number
     *
     * @param string|null $fn_number Номер ФН (фискального накопителя)
     *
     * @return self
     */
    public function setFnNumber($fn_number)
    {
        if (is_null($fn_number)) {
            throw new \InvalidArgumentException('non-nullable fn_number cannot be null');
        }
        if ((mb_strlen($fn_number) > 255)) {
            throw new \InvalidArgumentException('invalid length for $fn_number when calling ReceiptsInnerPayload., must be smaller than or equal to 255.');
        }
        if ((!preg_match("/^[ -~]*$/", ObjectSerializer::toString($fn_number)))) {
            throw new \InvalidArgumentException("invalid value for \$fn_number when calling ReceiptsInnerPayload., must conform to the pattern /^[ -~]*$/.");
        }

        $this->container['fn_number'] = $fn_number;

        return $this;
    }

    /**
     * Gets ecr_registration_number
     *
     * @return string|null
     */
    public function getEcrRegistrationNumber()
    {
        return $this->container['ecr_registration_number'];
    }

    /**
     * Sets ecr_registration_number
     *
     * @param string|null $ecr_registration_number Регистрационный номер ККТ
     *
     * @return self
     */
    public function setEcrRegistrationNumber($ecr_registration_number)
    {
        if (is_null($ecr_registration_number)) {
            throw new \InvalidArgumentException('non-nullable ecr_registration_number cannot be null');
        }
        if ((mb_strlen($ecr_registration_number) > 255)) {
            throw new \InvalidArgumentException('invalid length for $ecr_registration_number when calling ReceiptsInnerPayload., must be smaller than or equal to 255.');
        }
        if ((!preg_match("/^[ -~]*$/", ObjectSerializer::toString($ecr_registration_number)))) {
            throw new \InvalidArgumentException("invalid value for \$ecr_registration_number when calling ReceiptsInnerPayload., must conform to the pattern /^[ -~]*$/.");
        }

        $this->container['ecr_registration_number'] = $ecr_registration_number;

        return $this;
    }

    /**
     * Gets fiscal_document_number
     *
     * @return int|null
     */
    public function getFiscalDocumentNumber()
    {
        return $this->container['fiscal_document_number'];
    }

    /**
     * Sets fiscal_document_number
     *
     * @param int|null $fiscal_document_number Фискальный номер документа
     *
     * @return self
     */
    public function setFiscalDocumentNumber($fiscal_document_number)
    {
        if (is_null($fiscal_document_number)) {
            throw new \InvalidArgumentException('non-nullable fiscal_document_number cannot be null');
        }

        if (($fiscal_document_number > 99999999)) {
            throw new \InvalidArgumentException('invalid value for $fiscal_document_number when calling ReceiptsInnerPayload., must be smaller than or equal to 99999999.');
        }
        if (($fiscal_document_number < 0)) {
            throw new \InvalidArgumentException('invalid value for $fiscal_document_number when calling ReceiptsInnerPayload., must be bigger than or equal to 0.');
        }

        $this->container['fiscal_document_number'] = $fiscal_document_number;

        return $this;
    }

    /**
     * Gets fiscal_document_attribute
     *
     * @return int|null
     */
    public function getFiscalDocumentAttribute()
    {
        return $this->container['fiscal_document_attribute'];
    }

    /**
     * Sets fiscal_document_attribute
     *
     * @param int|null $fiscal_document_attribute Фискальный признак документа
     *
     * @return self
     */
    public function setFiscalDocumentAttribute($fiscal_document_attribute)
    {
        if (is_null($fiscal_document_attribute)) {
            throw new \InvalidArgumentException('non-nullable fiscal_document_attribute cannot be null');
        }

        if (($fiscal_document_attribute > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $fiscal_document_attribute when calling ReceiptsInnerPayload., must be smaller than or equal to 4294967295.');
        }
        if (($fiscal_document_attribute < 0)) {
            throw new \InvalidArgumentException('invalid value for $fiscal_document_attribute when calling ReceiptsInnerPayload., must be bigger than or equal to 0.');
        }

        $this->container['fiscal_document_attribute'] = $fiscal_document_attribute;

        return $this;
    }

    /**
     * Gets fns_site
     *
     * @return string|null
     */
    public function getFnsSite()
    {
        return $this->container['fns_site'];
    }

    /**
     * Sets fns_site
     *
     * @param string|null $fns_site Адрес сайта ФНС
     *
     * @return self
     */
    public function setFnsSite($fns_site)
    {
        if (is_null($fns_site)) {
            throw new \InvalidArgumentException('non-nullable fns_site cannot be null');
        }
        if ((mb_strlen($fns_site) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $fns_site when calling ReceiptsInnerPayload., must be smaller than or equal to 1024.');
        }
        if ((!preg_match("/^[ -~]*$/", ObjectSerializer::toString($fns_site)))) {
            throw new \InvalidArgumentException("invalid value for \$fns_site when calling ReceiptsInnerPayload., must conform to the pattern /^[ -~]*$/.");
        }

        $this->container['fns_site'] = $fns_site;

        return $this;
    }

    /**
     * Gets ofd_inn
     *
     * @return string|null
     */
    public function getOfdInn()
    {
        return $this->container['ofd_inn'];
    }

    /**
     * Sets ofd_inn
     *
     * @param string|null $ofd_inn ИНН ОФД
     *
     * @return self
     */
    public function setOfdInn($ofd_inn)
    {
        if (is_null($ofd_inn)) {
            throw new \InvalidArgumentException('non-nullable ofd_inn cannot be null');
        }
        if ((mb_strlen($ofd_inn) > 20)) {
            throw new \InvalidArgumentException('invalid length for $ofd_inn when calling ReceiptsInnerPayload., must be smaller than or equal to 20.');
        }
        if ((!preg_match("/^[ -~]*$/", ObjectSerializer::toString($ofd_inn)))) {
            throw new \InvalidArgumentException("invalid value for \$ofd_inn when calling ReceiptsInnerPayload., must conform to the pattern /^[ -~]*$/.");
        }

        $this->container['ofd_inn'] = $ofd_inn;

        return $this;
    }

    /**
     * Gets ofd_receipt_url
     *
     * @return string|null
     */
    public function getOfdReceiptUrl()
    {
        return $this->container['ofd_receipt_url'];
    }

    /**
     * Sets ofd_receipt_url
     *
     * @param string|null $ofd_receipt_url URL для просмотра чека на сайте ОФД. Отражается не для всех ОФД
     *
     * @return self
     */
    public function setOfdReceiptUrl($ofd_receipt_url)
    {
        if (is_null($ofd_receipt_url)) {
            throw new \InvalidArgumentException('non-nullable ofd_receipt_url cannot be null');
        }
        if ((mb_strlen($ofd_receipt_url) > 2048)) {
            throw new \InvalidArgumentException('invalid length for $ofd_receipt_url when calling ReceiptsInnerPayload., must be smaller than or equal to 2048.');
        }
        if ((!preg_match("/^[ -~]*$/", ObjectSerializer::toString($ofd_receipt_url)))) {
            throw new \InvalidArgumentException("invalid value for \$ofd_receipt_url when calling ReceiptsInnerPayload., must conform to the pattern /^[ -~]*$/.");
        }

        $this->container['ofd_receipt_url'] = $ofd_receipt_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


