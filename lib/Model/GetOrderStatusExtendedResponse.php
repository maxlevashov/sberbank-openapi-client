<?php
/**
 * GetOrderStatusExtendedResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Sberbank
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API платёжного шлюза Сбербанка
 *
 * Настоящий документ описывает программные интерфейсы платёжного шлюза Сбербанка, который позволяет проводить платежи в интернет-эквайринге.
 *
 * The version of the OpenAPI document: 1.0.7
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Sberbank\Model;

use \ArrayAccess;
use \Sberbank\ObjectSerializer;

/**
 * GetOrderStatusExtendedResponse Class Doc Comment
 *
 * @category Class
 * @package  Sberbank
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetOrderStatusExtendedResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'getOrderStatusExtendedResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'error_code' => 'string',
        'error_message' => 'string',
        'order_number' => 'string',
        'order_status' => 'int',
        'action_code' => 'int',
        'action_code_description' => 'string',
        'amount' => 'int',
        'currency' => 'string',
        'date' => 'float',
        'deposited_date' => 'float',
        'order_description' => 'string',
        'ip' => 'string',
        'auth_ref_num' => 'string',
        'refunded_date' => '\DateTime',
        'transaction_attributes' => '\Sberbank\Model\TransactionAttributesInner[]',
        'attributes' => '\Sberbank\Model\GetOrderStatusExtendedResponseAttributes',
        'merchant_order_params' => '\Sberbank\Model\MerchantOrderParamsInner[]',
        'card_auth_info' => '\Sberbank\Model\CardAuthInfo',
        'auth_date_time' => 'float',
        'terminal_id' => 'string',
        'payment_amount_info' => '\Sberbank\Model\PaymentAmountInfo',
        'bank_info' => '\Sberbank\Model\BankInfo',
        'payer_data' => '\Sberbank\Model\PayerData',
        'binding_info' => '\Sberbank\Model\BindingInfo',
        'order_bundle' => '\Sberbank\Model\OrderBundle',
        'operations' => '\Sberbank\Model\OperationsInner[]',
        'loyalty_info' => '\Sberbank\Model\LoyaltyInfo'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'error_code' => null,
        'error_message' => null,
        'order_number' => null,
        'order_status' => null,
        'action_code' => null,
        'action_code_description' => null,
        'amount' => null,
        'currency' => null,
        'date' => null,
        'deposited_date' => null,
        'order_description' => null,
        'ip' => null,
        'auth_ref_num' => null,
        'refunded_date' => 'date-time',
        'transaction_attributes' => null,
        'attributes' => null,
        'merchant_order_params' => null,
        'card_auth_info' => null,
        'auth_date_time' => null,
        'terminal_id' => null,
        'payment_amount_info' => null,
        'bank_info' => null,
        'payer_data' => null,
        'binding_info' => null,
        'order_bundle' => null,
        'operations' => null,
        'loyalty_info' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'error_code' => false,
        'error_message' => false,
        'order_number' => false,
        'order_status' => false,
        'action_code' => false,
        'action_code_description' => false,
        'amount' => false,
        'currency' => false,
        'date' => false,
        'deposited_date' => false,
        'order_description' => false,
        'ip' => false,
        'auth_ref_num' => false,
        'refunded_date' => false,
        'transaction_attributes' => false,
        'attributes' => false,
        'merchant_order_params' => false,
        'card_auth_info' => false,
        'auth_date_time' => false,
        'terminal_id' => false,
        'payment_amount_info' => false,
        'bank_info' => false,
        'payer_data' => false,
        'binding_info' => false,
        'order_bundle' => false,
        'operations' => false,
        'loyalty_info' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'error_code' => 'errorCode',
        'error_message' => 'errorMessage',
        'order_number' => 'orderNumber',
        'order_status' => 'orderStatus',
        'action_code' => 'actionCode',
        'action_code_description' => 'actionCodeDescription',
        'amount' => 'amount',
        'currency' => 'currency',
        'date' => 'date',
        'deposited_date' => 'depositedDate',
        'order_description' => 'orderDescription',
        'ip' => 'ip',
        'auth_ref_num' => 'authRefNum',
        'refunded_date' => 'refundedDate',
        'transaction_attributes' => 'transactionAttributes',
        'attributes' => 'attributes',
        'merchant_order_params' => 'merchantOrderParams',
        'card_auth_info' => 'cardAuthInfo',
        'auth_date_time' => 'authDateTime',
        'terminal_id' => 'terminalId',
        'payment_amount_info' => 'paymentAmountInfo',
        'bank_info' => 'bankInfo',
        'payer_data' => 'payerData',
        'binding_info' => 'bindingInfo',
        'order_bundle' => 'orderBundle',
        'operations' => 'operations',
        'loyalty_info' => 'loyaltyInfo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'error_code' => 'setErrorCode',
        'error_message' => 'setErrorMessage',
        'order_number' => 'setOrderNumber',
        'order_status' => 'setOrderStatus',
        'action_code' => 'setActionCode',
        'action_code_description' => 'setActionCodeDescription',
        'amount' => 'setAmount',
        'currency' => 'setCurrency',
        'date' => 'setDate',
        'deposited_date' => 'setDepositedDate',
        'order_description' => 'setOrderDescription',
        'ip' => 'setIp',
        'auth_ref_num' => 'setAuthRefNum',
        'refunded_date' => 'setRefundedDate',
        'transaction_attributes' => 'setTransactionAttributes',
        'attributes' => 'setAttributes',
        'merchant_order_params' => 'setMerchantOrderParams',
        'card_auth_info' => 'setCardAuthInfo',
        'auth_date_time' => 'setAuthDateTime',
        'terminal_id' => 'setTerminalId',
        'payment_amount_info' => 'setPaymentAmountInfo',
        'bank_info' => 'setBankInfo',
        'payer_data' => 'setPayerData',
        'binding_info' => 'setBindingInfo',
        'order_bundle' => 'setOrderBundle',
        'operations' => 'setOperations',
        'loyalty_info' => 'setLoyaltyInfo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'error_code' => 'getErrorCode',
        'error_message' => 'getErrorMessage',
        'order_number' => 'getOrderNumber',
        'order_status' => 'getOrderStatus',
        'action_code' => 'getActionCode',
        'action_code_description' => 'getActionCodeDescription',
        'amount' => 'getAmount',
        'currency' => 'getCurrency',
        'date' => 'getDate',
        'deposited_date' => 'getDepositedDate',
        'order_description' => 'getOrderDescription',
        'ip' => 'getIp',
        'auth_ref_num' => 'getAuthRefNum',
        'refunded_date' => 'getRefundedDate',
        'transaction_attributes' => 'getTransactionAttributes',
        'attributes' => 'getAttributes',
        'merchant_order_params' => 'getMerchantOrderParams',
        'card_auth_info' => 'getCardAuthInfo',
        'auth_date_time' => 'getAuthDateTime',
        'terminal_id' => 'getTerminalId',
        'payment_amount_info' => 'getPaymentAmountInfo',
        'bank_info' => 'getBankInfo',
        'payer_data' => 'getPayerData',
        'binding_info' => 'getBindingInfo',
        'order_bundle' => 'getOrderBundle',
        'operations' => 'getOperations',
        'loyalty_info' => 'getLoyaltyInfo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('error_code', $data ?? [], null);
        $this->setIfExists('error_message', $data ?? [], null);
        $this->setIfExists('order_number', $data ?? [], null);
        $this->setIfExists('order_status', $data ?? [], null);
        $this->setIfExists('action_code', $data ?? [], null);
        $this->setIfExists('action_code_description', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('date', $data ?? [], null);
        $this->setIfExists('deposited_date', $data ?? [], null);
        $this->setIfExists('order_description', $data ?? [], null);
        $this->setIfExists('ip', $data ?? [], null);
        $this->setIfExists('auth_ref_num', $data ?? [], null);
        $this->setIfExists('refunded_date', $data ?? [], null);
        $this->setIfExists('transaction_attributes', $data ?? [], null);
        $this->setIfExists('attributes', $data ?? [], null);
        $this->setIfExists('merchant_order_params', $data ?? [], null);
        $this->setIfExists('card_auth_info', $data ?? [], null);
        $this->setIfExists('auth_date_time', $data ?? [], null);
        $this->setIfExists('terminal_id', $data ?? [], null);
        $this->setIfExists('payment_amount_info', $data ?? [], null);
        $this->setIfExists('bank_info', $data ?? [], null);
        $this->setIfExists('payer_data', $data ?? [], null);
        $this->setIfExists('binding_info', $data ?? [], null);
        $this->setIfExists('order_bundle', $data ?? [], null);
        $this->setIfExists('operations', $data ?? [], null);
        $this->setIfExists('loyalty_info', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['error_code'] === null) {
            $invalidProperties[] = "'error_code' can't be null";
        }
        if ((mb_strlen($this->container['error_code']) > 3)) {
            $invalidProperties[] = "invalid value for 'error_code', the character length must be smaller than or equal to 3.";
        }

        if ((mb_strlen($this->container['error_code']) < 1)) {
            $invalidProperties[] = "invalid value for 'error_code', the character length must be bigger than or equal to 1.";
        }

        if (!preg_match("/^\\d{1,3}$/", $this->container['error_code'])) {
            $invalidProperties[] = "invalid value for 'error_code', must be conform to the pattern /^\\d{1,3}$/.";
        }

        if (!is_null($this->container['error_message']) && (mb_strlen($this->container['error_message']) > 512)) {
            $invalidProperties[] = "invalid value for 'error_message', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['error_message']) && (mb_strlen($this->container['error_message']) < 0)) {
            $invalidProperties[] = "invalid value for 'error_message', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['error_message']) && !preg_match("/^[ -~А-Яа-яЁё№]*$/", $this->container['error_message'])) {
            $invalidProperties[] = "invalid value for 'error_message', must be conform to the pattern /^[ -~А-Яа-яЁё№]*$/.";
        }

        if (!is_null($this->container['order_number']) && (mb_strlen($this->container['order_number']) > 36)) {
            $invalidProperties[] = "invalid value for 'order_number', the character length must be smaller than or equal to 36.";
        }

        if (!is_null($this->container['order_number']) && (mb_strlen($this->container['order_number']) < 1)) {
            $invalidProperties[] = "invalid value for 'order_number', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['order_status']) && ($this->container['order_status'] > 9)) {
            $invalidProperties[] = "invalid value for 'order_status', must be smaller than or equal to 9.";
        }

        if (!is_null($this->container['order_status']) && ($this->container['order_status'] < 0)) {
            $invalidProperties[] = "invalid value for 'order_status', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['action_code']) && ($this->container['action_code'] > 9999999)) {
            $invalidProperties[] = "invalid value for 'action_code', must be smaller than or equal to 9999999.";
        }

        if (!is_null($this->container['action_code']) && ($this->container['action_code'] < -9999999)) {
            $invalidProperties[] = "invalid value for 'action_code', must be bigger than or equal to -9999999.";
        }

        if (!is_null($this->container['action_code_description']) && (mb_strlen($this->container['action_code_description']) > 512)) {
            $invalidProperties[] = "invalid value for 'action_code_description', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['action_code_description']) && (mb_strlen($this->container['action_code_description']) < 0)) {
            $invalidProperties[] = "invalid value for 'action_code_description', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['action_code_description']) && !preg_match("/^[ -~А-Яа-яЁё№]*$/", $this->container['action_code_description'])) {
            $invalidProperties[] = "invalid value for 'action_code_description', must be conform to the pattern /^[ -~А-Яа-яЁё№]*$/.";
        }

        if (!is_null($this->container['amount']) && ($this->container['amount'] > 999999999999)) {
            $invalidProperties[] = "invalid value for 'amount', must be smaller than or equal to 999999999999.";
        }

        if (!is_null($this->container['amount']) && ($this->container['amount'] < 0)) {
            $invalidProperties[] = "invalid value for 'amount', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['currency']) && (mb_strlen($this->container['currency']) > 3)) {
            $invalidProperties[] = "invalid value for 'currency', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['currency']) && (mb_strlen($this->container['currency']) < 3)) {
            $invalidProperties[] = "invalid value for 'currency', the character length must be bigger than or equal to 3.";
        }

        if (!is_null($this->container['currency']) && !preg_match("/^\\d{3}$/", $this->container['currency'])) {
            $invalidProperties[] = "invalid value for 'currency', must be conform to the pattern /^\\d{3}$/.";
        }

        if (!is_null($this->container['date']) && ($this->container['date'] > 999999999999999)) {
            $invalidProperties[] = "invalid value for 'date', must be smaller than or equal to 999999999999999.";
        }

        if (!is_null($this->container['date']) && ($this->container['date'] < 0)) {
            $invalidProperties[] = "invalid value for 'date', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['deposited_date']) && ($this->container['deposited_date'] > 999999999999999)) {
            $invalidProperties[] = "invalid value for 'deposited_date', must be smaller than or equal to 999999999999999.";
        }

        if (!is_null($this->container['deposited_date']) && ($this->container['deposited_date'] < 0)) {
            $invalidProperties[] = "invalid value for 'deposited_date', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['order_description']) && (mb_strlen($this->container['order_description']) > 512)) {
            $invalidProperties[] = "invalid value for 'order_description', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['order_description']) && (mb_strlen($this->container['order_description']) < 1)) {
            $invalidProperties[] = "invalid value for 'order_description', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['order_description']) && !preg_match("/^[ -~А-Яа-яЁё№]*$/", $this->container['order_description'])) {
            $invalidProperties[] = "invalid value for 'order_description', must be conform to the pattern /^[ -~А-Яа-яЁё№]*$/.";
        }

        if (!is_null($this->container['ip']) && (mb_strlen($this->container['ip']) > 39)) {
            $invalidProperties[] = "invalid value for 'ip', the character length must be smaller than or equal to 39.";
        }

        if (!is_null($this->container['ip']) && (mb_strlen($this->container['ip']) < 1)) {
            $invalidProperties[] = "invalid value for 'ip', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['ip']) && !preg_match("/^[ -~]*$/", $this->container['ip'])) {
            $invalidProperties[] = "invalid value for 'ip', must be conform to the pattern /^[ -~]*$/.";
        }

        if (!is_null($this->container['auth_ref_num']) && (mb_strlen($this->container['auth_ref_num']) > 24)) {
            $invalidProperties[] = "invalid value for 'auth_ref_num', the character length must be smaller than or equal to 24.";
        }

        if (!is_null($this->container['auth_ref_num']) && (mb_strlen($this->container['auth_ref_num']) < 0)) {
            $invalidProperties[] = "invalid value for 'auth_ref_num', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['auth_ref_num']) && !preg_match("/^[A-Za-z0-9]+$/", $this->container['auth_ref_num'])) {
            $invalidProperties[] = "invalid value for 'auth_ref_num', must be conform to the pattern /^[A-Za-z0-9]+$/.";
        }

        if (!is_null($this->container['auth_date_time']) && ($this->container['auth_date_time'] > 999999999999999)) {
            $invalidProperties[] = "invalid value for 'auth_date_time', must be smaller than or equal to 999999999999999.";
        }

        if (!is_null($this->container['auth_date_time']) && ($this->container['auth_date_time'] < 0)) {
            $invalidProperties[] = "invalid value for 'auth_date_time', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['terminal_id']) && (mb_strlen($this->container['terminal_id']) > 10)) {
            $invalidProperties[] = "invalid value for 'terminal_id', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['terminal_id']) && (mb_strlen($this->container['terminal_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'terminal_id', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['terminal_id']) && !preg_match("/^\\w+$/", $this->container['terminal_id'])) {
            $invalidProperties[] = "invalid value for 'terminal_id', must be conform to the pattern /^\\w+$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets error_code
     *
     * @return string
     */
    public function getErrorCode()
    {
        return $this->container['error_code'];
    }

    /**
     * Sets error_code
     *
     * @param string $error_code Код ошибки
     *
     * @return self
     */
    public function setErrorCode($error_code)
    {
        if (is_null($error_code)) {
            throw new \InvalidArgumentException('non-nullable error_code cannot be null');
        }
        if ((mb_strlen($error_code) > 3)) {
            throw new \InvalidArgumentException('invalid length for $error_code when calling GetOrderStatusExtendedResponse., must be smaller than or equal to 3.');
        }
        if ((mb_strlen($error_code) < 1)) {
            throw new \InvalidArgumentException('invalid length for $error_code when calling GetOrderStatusExtendedResponse., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^\\d{1,3}$/", ObjectSerializer::toString($error_code)))) {
            throw new \InvalidArgumentException("invalid value for \$error_code when calling GetOrderStatusExtendedResponse., must conform to the pattern /^\\d{1,3}$/.");
        }

        $this->container['error_code'] = $error_code;

        return $this;
    }

    /**
     * Gets error_message
     *
     * @return string|null
     */
    public function getErrorMessage()
    {
        return $this->container['error_message'];
    }

    /**
     * Sets error_message
     *
     * @param string|null $error_message Описание ошибки на языке, переданном в параметре language в запросе
     *
     * @return self
     */
    public function setErrorMessage($error_message)
    {
        if (is_null($error_message)) {
            throw new \InvalidArgumentException('non-nullable error_message cannot be null');
        }
        if ((mb_strlen($error_message) > 512)) {
            throw new \InvalidArgumentException('invalid length for $error_message when calling GetOrderStatusExtendedResponse., must be smaller than or equal to 512.');
        }
        if ((mb_strlen($error_message) < 0)) {
            throw new \InvalidArgumentException('invalid length for $error_message when calling GetOrderStatusExtendedResponse., must be bigger than or equal to 0.');
        }
        if ((!preg_match("/^[ -~А-Яа-яЁё№]*$/", ObjectSerializer::toString($error_message)))) {
            throw new \InvalidArgumentException("invalid value for \$error_message when calling GetOrderStatusExtendedResponse., must conform to the pattern /^[ -~А-Яа-яЁё№]*$/.");
        }

        $this->container['error_message'] = $error_message;

        return $this;
    }

    /**
     * Gets order_number
     *
     * @return string|null
     */
    public function getOrderNumber()
    {
        return $this->container['order_number'];
    }

    /**
     * Sets order_number
     *
     * @param string|null $order_number Уникальный номер (идентификатор) заказа в системе Клиента. Обязателен, если в запросе отсутствует orderId.
     *
     * @return self
     */
    public function setOrderNumber($order_number)
    {
        if (is_null($order_number)) {
            throw new \InvalidArgumentException('non-nullable order_number cannot be null');
        }
        if ((mb_strlen($order_number) > 36)) {
            throw new \InvalidArgumentException('invalid length for $order_number when calling GetOrderStatusExtendedResponse., must be smaller than or equal to 36.');
        }
        if ((mb_strlen($order_number) < 1)) {
            throw new \InvalidArgumentException('invalid length for $order_number when calling GetOrderStatusExtendedResponse., must be bigger than or equal to 1.');
        }

        $this->container['order_number'] = $order_number;

        return $this;
    }

    /**
     * Gets order_status
     *
     * @return int|null
     */
    public function getOrderStatus()
    {
        return $this->container['order_status'];
    }

    /**
     * Sets order_status
     *
     * @param int|null $order_status По значению этого параметра определяется состояние заказа в платёжном шлюзе. Отсутствует, если заказ не был найден. Возможны следующие значения:   * `0` = заказ зарегистрирован, но не оплачен;   * `1` = сумма захолдирована (для двухстадийного сценария);   * `2` = проведена полная авторизация суммы заказа / создана подписка СБП;   * `3` = авторизация отменена;   * `4` = по заказу была проведена операция возврата;   * `5` = инициирована аутентификация через ACS Банка-эмитента;   * `6` = авторизация отклонена.
     *
     * @return self
     */
    public function setOrderStatus($order_status)
    {
        if (is_null($order_status)) {
            throw new \InvalidArgumentException('non-nullable order_status cannot be null');
        }

        if (($order_status > 9)) {
            throw new \InvalidArgumentException('invalid value for $order_status when calling GetOrderStatusExtendedResponse., must be smaller than or equal to 9.');
        }
        if (($order_status < 0)) {
            throw new \InvalidArgumentException('invalid value for $order_status when calling GetOrderStatusExtendedResponse., must be bigger than or equal to 0.');
        }

        $this->container['order_status'] = $order_status;

        return $this;
    }

    /**
     * Gets action_code
     *
     * @return int|null
     */
    public function getActionCode()
    {
        return $this->container['action_code'];
    }

    /**
     * Sets action_code
     *
     * @param int|null $action_code Код ответа платёжного шлюза - цифровое обозначение результата, к которому привело обращение со стороны Клиента
     *
     * @return self
     */
    public function setActionCode($action_code)
    {
        if (is_null($action_code)) {
            throw new \InvalidArgumentException('non-nullable action_code cannot be null');
        }

        if (($action_code > 9999999)) {
            throw new \InvalidArgumentException('invalid value for $action_code when calling GetOrderStatusExtendedResponse., must be smaller than or equal to 9999999.');
        }
        if (($action_code < -9999999)) {
            throw new \InvalidArgumentException('invalid value for $action_code when calling GetOrderStatusExtendedResponse., must be bigger than or equal to -9999999.');
        }

        $this->container['action_code'] = $action_code;

        return $this;
    }

    /**
     * Gets action_code_description
     *
     * @return string|null
     */
    public function getActionCodeDescription()
    {
        return $this->container['action_code_description'];
    }

    /**
     * Sets action_code_description
     *
     * @param string|null $action_code_description Расшифровка кода ответа на языке, переданном в параметре запроса language
     *
     * @return self
     */
    public function setActionCodeDescription($action_code_description)
    {
        if (is_null($action_code_description)) {
            throw new \InvalidArgumentException('non-nullable action_code_description cannot be null');
        }
        if ((mb_strlen($action_code_description) > 512)) {
            throw new \InvalidArgumentException('invalid length for $action_code_description when calling GetOrderStatusExtendedResponse., must be smaller than or equal to 512.');
        }
        if ((mb_strlen($action_code_description) < 0)) {
            throw new \InvalidArgumentException('invalid length for $action_code_description when calling GetOrderStatusExtendedResponse., must be bigger than or equal to 0.');
        }
        if ((!preg_match("/^[ -~А-Яа-яЁё№]*$/", ObjectSerializer::toString($action_code_description)))) {
            throw new \InvalidArgumentException("invalid value for \$action_code_description when calling GetOrderStatusExtendedResponse., must conform to the pattern /^[ -~А-Яа-яЁё№]*$/.");
        }

        $this->container['action_code_description'] = $action_code_description;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return int|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int|null $amount Сумма операции в минимальных единицах валюты
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }

        if (($amount > 999999999999)) {
            throw new \InvalidArgumentException('invalid value for $amount when calling GetOrderStatusExtendedResponse., must be smaller than or equal to 999999999999.');
        }
        if (($amount < 0)) {
            throw new \InvalidArgumentException('invalid value for $amount when calling GetOrderStatusExtendedResponse., must be bigger than or equal to 0.');
        }

        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency Цифровой код валюты операции ISO-4217
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        if ((mb_strlen($currency) > 3)) {
            throw new \InvalidArgumentException('invalid length for $currency when calling GetOrderStatusExtendedResponse., must be smaller than or equal to 3.');
        }
        if ((mb_strlen($currency) < 3)) {
            throw new \InvalidArgumentException('invalid length for $currency when calling GetOrderStatusExtendedResponse., must be bigger than or equal to 3.');
        }
        if ((!preg_match("/^\\d{3}$/", ObjectSerializer::toString($currency)))) {
            throw new \InvalidArgumentException("invalid value for \$currency when calling GetOrderStatusExtendedResponse., must conform to the pattern /^\\d{3}$/.");
        }

        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets date
     *
     * @return float|null
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param float|null $date Дата и время регистрации заказа в формате UNIX-времени (POSIX-времени)
     *
     * @return self
     */
    public function setDate($date)
    {
        if (is_null($date)) {
            throw new \InvalidArgumentException('non-nullable date cannot be null');
        }

        if (($date > 999999999999999)) {
            throw new \InvalidArgumentException('invalid value for $date when calling GetOrderStatusExtendedResponse., must be smaller than or equal to 999999999999999.');
        }
        if (($date < 0)) {
            throw new \InvalidArgumentException('invalid value for $date when calling GetOrderStatusExtendedResponse., must be bigger than or equal to 0.');
        }

        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets deposited_date
     *
     * @return float|null
     */
    public function getDepositedDate()
    {
        return $this->container['deposited_date'];
    }

    /**
     * Sets deposited_date
     *
     * @param float|null $deposited_date Дата и время оплаты/завершения оплаты заказа в формате UNIX-времени (POSIX-времени)
     *
     * @return self
     */
    public function setDepositedDate($deposited_date)
    {
        if (is_null($deposited_date)) {
            throw new \InvalidArgumentException('non-nullable deposited_date cannot be null');
        }

        if (($deposited_date > 999999999999999)) {
            throw new \InvalidArgumentException('invalid value for $deposited_date when calling GetOrderStatusExtendedResponse., must be smaller than or equal to 999999999999999.');
        }
        if (($deposited_date < 0)) {
            throw new \InvalidArgumentException('invalid value for $deposited_date when calling GetOrderStatusExtendedResponse., must be bigger than or equal to 0.');
        }

        $this->container['deposited_date'] = $deposited_date;

        return $this;
    }

    /**
     * Gets order_description
     *
     * @return string|null
     */
    public function getOrderDescription()
    {
        return $this->container['order_description'];
    }

    /**
     * Sets order_description
     *
     * @param string|null $order_description Описание заказа в свободной форме на стороне Клиента. Рекомендуемая длина до 99 символов
     *
     * @return self
     */
    public function setOrderDescription($order_description)
    {
        if (is_null($order_description)) {
            throw new \InvalidArgumentException('non-nullable order_description cannot be null');
        }
        if ((mb_strlen($order_description) > 512)) {
            throw new \InvalidArgumentException('invalid length for $order_description when calling GetOrderStatusExtendedResponse., must be smaller than or equal to 512.');
        }
        if ((mb_strlen($order_description) < 1)) {
            throw new \InvalidArgumentException('invalid length for $order_description when calling GetOrderStatusExtendedResponse., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~А-Яа-яЁё№]*$/", ObjectSerializer::toString($order_description)))) {
            throw new \InvalidArgumentException("invalid value for \$order_description when calling GetOrderStatusExtendedResponse., must conform to the pattern /^[ -~А-Яа-яЁё№]*$/.");
        }

        $this->container['order_description'] = $order_description;

        return $this;
    }

    /**
     * Gets ip
     *
     * @return string|null
     */
    public function getIp()
    {
        return $this->container['ip'];
    }

    /**
     * Sets ip
     *
     * @param string|null $ip IP-адрес Плательщика
     *
     * @return self
     */
    public function setIp($ip)
    {
        if (is_null($ip)) {
            throw new \InvalidArgumentException('non-nullable ip cannot be null');
        }
        if ((mb_strlen($ip) > 39)) {
            throw new \InvalidArgumentException('invalid length for $ip when calling GetOrderStatusExtendedResponse., must be smaller than or equal to 39.');
        }
        if ((mb_strlen($ip) < 1)) {
            throw new \InvalidArgumentException('invalid length for $ip when calling GetOrderStatusExtendedResponse., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~]*$/", ObjectSerializer::toString($ip)))) {
            throw new \InvalidArgumentException("invalid value for \$ip when calling GetOrderStatusExtendedResponse., must conform to the pattern /^[ -~]*$/.");
        }

        $this->container['ip'] = $ip;

        return $this;
    }

    /**
     * Gets auth_ref_num
     *
     * @return string|null
     */
    public function getAuthRefNum()
    {
        return $this->container['auth_ref_num'];
    }

    /**
     * Sets auth_ref_num
     *
     * @param string|null $auth_ref_num Ссылочный номер авторизации платежа, который присваивается при регистрации платежа на стороне платёжной системы
     *
     * @return self
     */
    public function setAuthRefNum($auth_ref_num)
    {
        if (is_null($auth_ref_num)) {
            throw new \InvalidArgumentException('non-nullable auth_ref_num cannot be null');
        }
        if ((mb_strlen($auth_ref_num) > 24)) {
            throw new \InvalidArgumentException('invalid length for $auth_ref_num when calling GetOrderStatusExtendedResponse., must be smaller than or equal to 24.');
        }
        if ((mb_strlen($auth_ref_num) < 0)) {
            throw new \InvalidArgumentException('invalid length for $auth_ref_num when calling GetOrderStatusExtendedResponse., must be bigger than or equal to 0.');
        }
        if ((!preg_match("/^[A-Za-z0-9]+$/", ObjectSerializer::toString($auth_ref_num)))) {
            throw new \InvalidArgumentException("invalid value for \$auth_ref_num when calling GetOrderStatusExtendedResponse., must conform to the pattern /^[A-Za-z0-9]+$/.");
        }

        $this->container['auth_ref_num'] = $auth_ref_num;

        return $this;
    }

    /**
     * Gets refunded_date
     *
     * @return \DateTime|null
     */
    public function getRefundedDate()
    {
        return $this->container['refunded_date'];
    }

    /**
     * Sets refunded_date
     *
     * @param \DateTime|null $refunded_date Дата и время возврата средств.
     *
     * @return self
     */
    public function setRefundedDate($refunded_date)
    {
        if (is_null($refunded_date)) {
            throw new \InvalidArgumentException('non-nullable refunded_date cannot be null');
        }
        $this->container['refunded_date'] = $refunded_date;

        return $this;
    }

    /**
     * Gets transaction_attributes
     *
     * @return \Sberbank\Model\TransactionAttributesInner[]|null
     */
    public function getTransactionAttributes()
    {
        return $this->container['transaction_attributes'];
    }

    /**
     * Sets transaction_attributes
     *
     * @param \Sberbank\Model\TransactionAttributesInner[]|null $transaction_attributes Дополнительные параметры деталей заказа. Элемент присутствует в ответе, если при формировании ответа на создание заказа содержатся дополнительные параметры блока jsonParams которые могут использоваться в различных сценариях, каждый возвращаемый параметр представлен в отдельном блоке transactionAttributes
     *
     * @return self
     */
    public function setTransactionAttributes($transaction_attributes)
    {
        if (is_null($transaction_attributes)) {
            throw new \InvalidArgumentException('non-nullable transaction_attributes cannot be null');
        }
        $this->container['transaction_attributes'] = $transaction_attributes;

        return $this;
    }

    /**
     * Gets attributes
     *
     * @return \Sberbank\Model\GetOrderStatusExtendedResponseAttributes|null
     */
    public function getAttributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     *
     * @param \Sberbank\Model\GetOrderStatusExtendedResponseAttributes|null $attributes attributes
     *
     * @return self
     */
    public function setAttributes($attributes)
    {
        if (is_null($attributes)) {
            throw new \InvalidArgumentException('non-nullable attributes cannot be null');
        }
        $this->container['attributes'] = $attributes;

        return $this;
    }

    /**
     * Gets merchant_order_params
     *
     * @return \Sberbank\Model\MerchantOrderParamsInner[]|null
     */
    public function getMerchantOrderParams()
    {
        return $this->container['merchant_order_params'];
    }

    /**
     * Sets merchant_order_params
     *
     * @param \Sberbank\Model\MerchantOrderParamsInner[]|null $merchant_order_params Дополнительные параметры заказа со стороны Клиента. Элемент присутствует в ответе, если при создании заказа содержатся дополнительные параметры блока jsonParams, каждый возвращаемый параметр представлен в отдельном блоке merchantOrderParams
     *
     * @return self
     */
    public function setMerchantOrderParams($merchant_order_params)
    {
        if (is_null($merchant_order_params)) {
            throw new \InvalidArgumentException('non-nullable merchant_order_params cannot be null');
        }
        $this->container['merchant_order_params'] = $merchant_order_params;

        return $this;
    }

    /**
     * Gets card_auth_info
     *
     * @return \Sberbank\Model\CardAuthInfo|null
     */
    public function getCardAuthInfo()
    {
        return $this->container['card_auth_info'];
    }

    /**
     * Sets card_auth_info
     *
     * @param \Sberbank\Model\CardAuthInfo|null $card_auth_info card_auth_info
     *
     * @return self
     */
    public function setCardAuthInfo($card_auth_info)
    {
        if (is_null($card_auth_info)) {
            throw new \InvalidArgumentException('non-nullable card_auth_info cannot be null');
        }
        $this->container['card_auth_info'] = $card_auth_info;

        return $this;
    }

    /**
     * Gets auth_date_time
     *
     * @return float|null
     */
    public function getAuthDateTime()
    {
        return $this->container['auth_date_time'];
    }

    /**
     * Sets auth_date_time
     *
     * @param float|null $auth_date_time Дата и время авторизации в Банке-эквайрере в формате UNIX-времени (POSIX-времени)
     *
     * @return self
     */
    public function setAuthDateTime($auth_date_time)
    {
        if (is_null($auth_date_time)) {
            throw new \InvalidArgumentException('non-nullable auth_date_time cannot be null');
        }

        if (($auth_date_time > 999999999999999)) {
            throw new \InvalidArgumentException('invalid value for $auth_date_time when calling GetOrderStatusExtendedResponse., must be smaller than or equal to 999999999999999.');
        }
        if (($auth_date_time < 0)) {
            throw new \InvalidArgumentException('invalid value for $auth_date_time when calling GetOrderStatusExtendedResponse., must be bigger than or equal to 0.');
        }

        $this->container['auth_date_time'] = $auth_date_time;

        return $this;
    }

    /**
     * Gets terminal_id
     *
     * @return string|null
     */
    public function getTerminalId()
    {
        return $this->container['terminal_id'];
    }

    /**
     * Sets terminal_id
     *
     * @param string|null $terminal_id Идентификатор терминала в платёжном шлюзе Банка-эквайрера, через который осуществлялась оплата
     *
     * @return self
     */
    public function setTerminalId($terminal_id)
    {
        if (is_null($terminal_id)) {
            throw new \InvalidArgumentException('non-nullable terminal_id cannot be null');
        }
        if ((mb_strlen($terminal_id) > 10)) {
            throw new \InvalidArgumentException('invalid length for $terminal_id when calling GetOrderStatusExtendedResponse., must be smaller than or equal to 10.');
        }
        if ((mb_strlen($terminal_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $terminal_id when calling GetOrderStatusExtendedResponse., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^\\w+$/", ObjectSerializer::toString($terminal_id)))) {
            throw new \InvalidArgumentException("invalid value for \$terminal_id when calling GetOrderStatusExtendedResponse., must conform to the pattern /^\\w+$/.");
        }

        $this->container['terminal_id'] = $terminal_id;

        return $this;
    }

    /**
     * Gets payment_amount_info
     *
     * @return \Sberbank\Model\PaymentAmountInfo|null
     */
    public function getPaymentAmountInfo()
    {
        return $this->container['payment_amount_info'];
    }

    /**
     * Sets payment_amount_info
     *
     * @param \Sberbank\Model\PaymentAmountInfo|null $payment_amount_info payment_amount_info
     *
     * @return self
     */
    public function setPaymentAmountInfo($payment_amount_info)
    {
        if (is_null($payment_amount_info)) {
            throw new \InvalidArgumentException('non-nullable payment_amount_info cannot be null');
        }
        $this->container['payment_amount_info'] = $payment_amount_info;

        return $this;
    }

    /**
     * Gets bank_info
     *
     * @return \Sberbank\Model\BankInfo|null
     */
    public function getBankInfo()
    {
        return $this->container['bank_info'];
    }

    /**
     * Sets bank_info
     *
     * @param \Sberbank\Model\BankInfo|null $bank_info bank_info
     *
     * @return self
     */
    public function setBankInfo($bank_info)
    {
        if (is_null($bank_info)) {
            throw new \InvalidArgumentException('non-nullable bank_info cannot be null');
        }
        $this->container['bank_info'] = $bank_info;

        return $this;
    }

    /**
     * Gets payer_data
     *
     * @return \Sberbank\Model\PayerData|null
     */
    public function getPayerData()
    {
        return $this->container['payer_data'];
    }

    /**
     * Sets payer_data
     *
     * @param \Sberbank\Model\PayerData|null $payer_data payer_data
     *
     * @return self
     */
    public function setPayerData($payer_data)
    {
        if (is_null($payer_data)) {
            throw new \InvalidArgumentException('non-nullable payer_data cannot be null');
        }
        $this->container['payer_data'] = $payer_data;

        return $this;
    }

    /**
     * Gets binding_info
     *
     * @return \Sberbank\Model\BindingInfo|null
     */
    public function getBindingInfo()
    {
        return $this->container['binding_info'];
    }

    /**
     * Sets binding_info
     *
     * @param \Sberbank\Model\BindingInfo|null $binding_info binding_info
     *
     * @return self
     */
    public function setBindingInfo($binding_info)
    {
        if (is_null($binding_info)) {
            throw new \InvalidArgumentException('non-nullable binding_info cannot be null');
        }
        $this->container['binding_info'] = $binding_info;

        return $this;
    }

    /**
     * Gets order_bundle
     *
     * @return \Sberbank\Model\OrderBundle|null
     */
    public function getOrderBundle()
    {
        return $this->container['order_bundle'];
    }

    /**
     * Sets order_bundle
     *
     * @param \Sberbank\Model\OrderBundle|null $order_bundle order_bundle
     *
     * @return self
     */
    public function setOrderBundle($order_bundle)
    {
        if (is_null($order_bundle)) {
            throw new \InvalidArgumentException('non-nullable order_bundle cannot be null');
        }
        $this->container['order_bundle'] = $order_bundle;

        return $this;
    }

    /**
     * Gets operations
     *
     * @return \Sberbank\Model\OperationsInner[]|null
     */
    public function getOperations()
    {
        return $this->container['operations'];
    }

    /**
     * Sets operations
     *
     * @param \Sberbank\Model\OperationsInner[]|null $operations Массив объектов, содержащий информацию по всем платёжным операциям в рамках заказа. Возвращается в ответе, если Клиенту разрешено использование данного функционала
     *
     * @return self
     */
    public function setOperations($operations)
    {
        if (is_null($operations)) {
            throw new \InvalidArgumentException('non-nullable operations cannot be null');
        }
        $this->container['operations'] = $operations;

        return $this;
    }

    /**
     * Gets loyalty_info
     *
     * @return \Sberbank\Model\LoyaltyInfo|null
     */
    public function getLoyaltyInfo()
    {
        return $this->container['loyalty_info'];
    }

    /**
     * Sets loyalty_info
     *
     * @param \Sberbank\Model\LoyaltyInfo|null $loyalty_info loyalty_info
     *
     * @return self
     */
    public function setLoyaltyInfo($loyalty_info)
    {
        if (is_null($loyalty_info)) {
            throw new \InvalidArgumentException('non-nullable loyalty_info cannot be null');
        }
        $this->container['loyalty_info'] = $loyalty_info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


