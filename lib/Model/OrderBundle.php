<?php
/**
 * OrderBundle
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Sberbank
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API платёжного шлюза Сбербанка
 *
 * Настоящий документ описывает программные интерфейсы платёжного шлюза Сбербанка, который позволяет проводить платежи в интернет-эквайринге.
 *
 * The version of the OpenAPI document: 1.0.7
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Sberbank\Model;

use \ArrayAccess;
use \Sberbank\ObjectSerializer;

/**
 * OrderBundle Class Doc Comment
 *
 * @category Class
 * @description Блок, необходимый для формирования фискальных чеков. Содержит данные фискализации и корзину заказа. Обязателен в случае отправки запросов POS-кредитования
 * @package  Sberbank
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OrderBundle implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'orderBundle';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'order_creation_date' => 'string',
        'installments' => '\Sberbank\Model\OrderBundleInstallments',
        'ffd_version' => 'string',
        'receipt_type' => 'string',
        'ism_optional' => 'bool',
        'company' => '\Sberbank\Model\OrderBundleCompany',
        'customer_details' => '\Sberbank\Model\CustomerDetails',
        'cart_items' => '\Sberbank\Model\CartItems',
        'payments' => '\Sberbank\Model\OrderBundlePaymentsInner[]',
        'total' => 'float',
        'additional_user_props' => '\Sberbank\Model\OrderBundleAdditionalUserProps',
        'additional_check_props' => 'string',
        'operating_check_props' => '\Sberbank\Model\OrderBundleOperatingCheckProps',
        'sectoral_check_props' => '\Sberbank\Model\OrderBundleSectoralCheckPropsInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'order_creation_date' => 'YYYY-MM-DDTHH:mm:ss',
        'installments' => null,
        'ffd_version' => null,
        'receipt_type' => null,
        'ism_optional' => null,
        'company' => null,
        'customer_details' => null,
        'cart_items' => null,
        'payments' => null,
        'total' => null,
        'additional_user_props' => null,
        'additional_check_props' => null,
        'operating_check_props' => null,
        'sectoral_check_props' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'order_creation_date' => false,
        'installments' => false,
        'ffd_version' => false,
        'receipt_type' => false,
        'ism_optional' => false,
        'company' => false,
        'customer_details' => false,
        'cart_items' => false,
        'payments' => false,
        'total' => false,
        'additional_user_props' => false,
        'additional_check_props' => false,
        'operating_check_props' => false,
        'sectoral_check_props' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'order_creation_date' => 'orderCreationDate',
        'installments' => 'installments',
        'ffd_version' => 'ffdVersion',
        'receipt_type' => 'receiptType',
        'ism_optional' => 'ismOptional',
        'company' => 'company',
        'customer_details' => 'customerDetails',
        'cart_items' => 'cartItems',
        'payments' => 'payments',
        'total' => 'total',
        'additional_user_props' => 'additionalUserProps',
        'additional_check_props' => 'additionalCheckProps',
        'operating_check_props' => 'operatingCheckProps',
        'sectoral_check_props' => 'sectoralCheckProps'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'order_creation_date' => 'setOrderCreationDate',
        'installments' => 'setInstallments',
        'ffd_version' => 'setFfdVersion',
        'receipt_type' => 'setReceiptType',
        'ism_optional' => 'setIsmOptional',
        'company' => 'setCompany',
        'customer_details' => 'setCustomerDetails',
        'cart_items' => 'setCartItems',
        'payments' => 'setPayments',
        'total' => 'setTotal',
        'additional_user_props' => 'setAdditionalUserProps',
        'additional_check_props' => 'setAdditionalCheckProps',
        'operating_check_props' => 'setOperatingCheckProps',
        'sectoral_check_props' => 'setSectoralCheckProps'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'order_creation_date' => 'getOrderCreationDate',
        'installments' => 'getInstallments',
        'ffd_version' => 'getFfdVersion',
        'receipt_type' => 'getReceiptType',
        'ism_optional' => 'getIsmOptional',
        'company' => 'getCompany',
        'customer_details' => 'getCustomerDetails',
        'cart_items' => 'getCartItems',
        'payments' => 'getPayments',
        'total' => 'getTotal',
        'additional_user_props' => 'getAdditionalUserProps',
        'additional_check_props' => 'getAdditionalCheckProps',
        'operating_check_props' => 'getOperatingCheckProps',
        'sectoral_check_props' => 'getSectoralCheckProps'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const FFD_VERSION__05 = '1.05';
    public const FFD_VERSION__2 = '1.2';
    public const RECEIPT_TYPE_SELL = 'sell';
    public const RECEIPT_TYPE_SELL_REFUND = 'sell_refund';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFfdVersionAllowableValues()
    {
        return [
            self::FFD_VERSION__05,
            self::FFD_VERSION__2,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getReceiptTypeAllowableValues()
    {
        return [
            self::RECEIPT_TYPE_SELL,
            self::RECEIPT_TYPE_SELL_REFUND,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('order_creation_date', $data ?? [], null);
        $this->setIfExists('installments', $data ?? [], null);
        $this->setIfExists('ffd_version', $data ?? [], null);
        $this->setIfExists('receipt_type', $data ?? [], null);
        $this->setIfExists('ism_optional', $data ?? [], null);
        $this->setIfExists('company', $data ?? [], null);
        $this->setIfExists('customer_details', $data ?? [], null);
        $this->setIfExists('cart_items', $data ?? [], null);
        $this->setIfExists('payments', $data ?? [], null);
        $this->setIfExists('total', $data ?? [], null);
        $this->setIfExists('additional_user_props', $data ?? [], null);
        $this->setIfExists('additional_check_props', $data ?? [], null);
        $this->setIfExists('operating_check_props', $data ?? [], null);
        $this->setIfExists('sectoral_check_props', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getFfdVersionAllowableValues();
        if (!is_null($this->container['ffd_version']) && !in_array($this->container['ffd_version'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ffd_version', must be one of '%s'",
                $this->container['ffd_version'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getReceiptTypeAllowableValues();
        if (!is_null($this->container['receipt_type']) && !in_array($this->container['receipt_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'receipt_type', must be one of '%s'",
                $this->container['receipt_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['cart_items'] === null) {
            $invalidProperties[] = "'cart_items' can't be null";
        }
        if (!is_null($this->container['total']) && ($this->container['total'] > 4294967200)) {
            $invalidProperties[] = "invalid value for 'total', must be smaller than or equal to 4294967200.";
        }

        if (!is_null($this->container['total']) && ($this->container['total'] < 0)) {
            $invalidProperties[] = "invalid value for 'total', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['additional_check_props']) && (mb_strlen($this->container['additional_check_props']) > 16)) {
            $invalidProperties[] = "invalid value for 'additional_check_props', the character length must be smaller than or equal to 16.";
        }

        if (!is_null($this->container['additional_check_props']) && (mb_strlen($this->container['additional_check_props']) < 1)) {
            $invalidProperties[] = "invalid value for 'additional_check_props', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['additional_check_props']) && !preg_match("/^[ -~А-Яа-яЁё№]*$/", $this->container['additional_check_props'])) {
            $invalidProperties[] = "invalid value for 'additional_check_props', must be conform to the pattern /^[ -~А-Яа-яЁё№]*$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets order_creation_date
     *
     * @return string|null
     */
    public function getOrderCreationDate()
    {
        return $this->container['order_creation_date'];
    }

    /**
     * Sets order_creation_date
     *
     * @param string|null $order_creation_date Дата создания заказа
     *
     * @return self
     */
    public function setOrderCreationDate($order_creation_date)
    {
        if (is_null($order_creation_date)) {
            throw new \InvalidArgumentException('non-nullable order_creation_date cannot be null');
        }
        $this->container['order_creation_date'] = $order_creation_date;

        return $this;
    }

    /**
     * Gets installments
     *
     * @return \Sberbank\Model\OrderBundleInstallments|null
     */
    public function getInstallments()
    {
        return $this->container['installments'];
    }

    /**
     * Sets installments
     *
     * @param \Sberbank\Model\OrderBundleInstallments|null $installments installments
     *
     * @return self
     */
    public function setInstallments($installments)
    {
        if (is_null($installments)) {
            throw new \InvalidArgumentException('non-nullable installments cannot be null');
        }
        $this->container['installments'] = $installments;

        return $this;
    }

    /**
     * Gets ffd_version
     *
     * @return string|null
     */
    public function getFfdVersion()
    {
        return $this->container['ffd_version'];
    }

    /**
     * Sets ffd_version
     *
     * @param string|null $ffd_version Версия ФФД кассы (уточняется у Вашего кассового сервиса). <span style=\"color:red;\">Параметр обязателен при необходимости формирования фискального чека.</span> Может принимать значения:    * `1.2` = Версия ФФД 1.2;    * `1.05` = Версия ФФД 1.05.
     *
     * @return self
     */
    public function setFfdVersion($ffd_version)
    {
        if (is_null($ffd_version)) {
            throw new \InvalidArgumentException('non-nullable ffd_version cannot be null');
        }
        $allowedValues = $this->getFfdVersionAllowableValues();
        if (!in_array($ffd_version, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ffd_version', must be one of '%s'",
                    $ffd_version,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ffd_version'] = $ffd_version;

        return $this;
    }

    /**
     * Gets receipt_type
     *
     * @return string|null
     */
    public function getReceiptType()
    {
        return $this->container['receipt_type'];
    }

    /**
     * Sets receipt_type
     *
     * @param string|null $receipt_type Тип формируемого чека. <span style=\"color:red;\">Параметр обязателен при необходимости формирования фискального чека.</span> Может принимать следующие значения:   * `sell` = Чек \"Приход\". Данный чек формируется в том числе при проведении частичного полного расчета.   * `sell_refund` = Чек \"Возврат прихода\".
     *
     * @return self
     */
    public function setReceiptType($receipt_type)
    {
        if (is_null($receipt_type)) {
            throw new \InvalidArgumentException('non-nullable receipt_type cannot be null');
        }
        $allowedValues = $this->getReceiptTypeAllowableValues();
        if (!in_array($receipt_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'receipt_type', must be one of '%s'",
                    $receipt_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['receipt_type'] = $receipt_type;

        return $this;
    }

    /**
     * Gets ism_optional
     *
     * @return bool|null
     */
    public function getIsmOptional()
    {
        return $this->container['ism_optional'];
    }

    /**
     * Sets ism_optional
     *
     * @param bool|null $ism_optional Параметр указывает необходимость регистрации чека, в случае недоступности системы маркировки (ИСМ). Используется только для ФФД 1.2 и касс АТОЛ Онлайн. Может принимать значения:   * `true` - Чек будет зарегистрирован даже в случае, если \"Честный знак\" не ответил за установленное время. В результате проверки сведений о товаре укажется значение \"0\"   * `false` (значение по умолчанию) - Чек не будет зарегистрирован при недоступности \"Честный знак\". Вернется ошибка 421 (Истек таймаут проверки КМ)
     *
     * @return self
     */
    public function setIsmOptional($ism_optional)
    {
        if (is_null($ism_optional)) {
            throw new \InvalidArgumentException('non-nullable ism_optional cannot be null');
        }
        $this->container['ism_optional'] = $ism_optional;

        return $this;
    }

    /**
     * Gets company
     *
     * @return \Sberbank\Model\OrderBundleCompany|null
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param \Sberbank\Model\OrderBundleCompany|null $company company
     *
     * @return self
     */
    public function setCompany($company)
    {
        if (is_null($company)) {
            throw new \InvalidArgumentException('non-nullable company cannot be null');
        }
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets customer_details
     *
     * @return \Sberbank\Model\CustomerDetails|null
     */
    public function getCustomerDetails()
    {
        return $this->container['customer_details'];
    }

    /**
     * Sets customer_details
     *
     * @param \Sberbank\Model\CustomerDetails|null $customer_details customer_details
     *
     * @return self
     */
    public function setCustomerDetails($customer_details)
    {
        if (is_null($customer_details)) {
            throw new \InvalidArgumentException('non-nullable customer_details cannot be null');
        }
        $this->container['customer_details'] = $customer_details;

        return $this;
    }

    /**
     * Gets cart_items
     *
     * @return \Sberbank\Model\CartItems
     */
    public function getCartItems()
    {
        return $this->container['cart_items'];
    }

    /**
     * Sets cart_items
     *
     * @param \Sberbank\Model\CartItems $cart_items cart_items
     *
     * @return self
     */
    public function setCartItems($cart_items)
    {
        if (is_null($cart_items)) {
            throw new \InvalidArgumentException('non-nullable cart_items cannot be null');
        }
        $this->container['cart_items'] = $cart_items;

        return $this;
    }

    /**
     * Gets payments
     *
     * @return \Sberbank\Model\OrderBundlePaymentsInner[]|null
     */
    public function getPayments()
    {
        return $this->container['payments'];
    }

    /**
     * Sets payments
     *
     * @param \Sberbank\Model\OrderBundlePaymentsInner[]|null $payments Виды оплаты. Обязателен при использовании фискализации.
     *
     * @return self
     */
    public function setPayments($payments)
    {
        if (is_null($payments)) {
            throw new \InvalidArgumentException('non-nullable payments cannot be null');
        }
        $this->container['payments'] = $payments;

        return $this;
    }

    /**
     * Gets total
     *
     * @return float|null
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param float|null $total __Тег ФФД 1020.__ Итоговая сумма чека в минимальных единицах валюты. Должна соответствовать сумме всех значений поля itemAmount. Обязательно при использовании фискализации.
     *
     * @return self
     */
    public function setTotal($total)
    {
        if (is_null($total)) {
            throw new \InvalidArgumentException('non-nullable total cannot be null');
        }

        if (($total > 4294967200)) {
            throw new \InvalidArgumentException('invalid value for $total when calling OrderBundle., must be smaller than or equal to 4294967200.');
        }
        if (($total < 0)) {
            throw new \InvalidArgumentException('invalid value for $total when calling OrderBundle., must be bigger than or equal to 0.');
        }

        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets additional_user_props
     *
     * @return \Sberbank\Model\OrderBundleAdditionalUserProps|null
     */
    public function getAdditionalUserProps()
    {
        return $this->container['additional_user_props'];
    }

    /**
     * Sets additional_user_props
     *
     * @param \Sberbank\Model\OrderBundleAdditionalUserProps|null $additional_user_props additional_user_props
     *
     * @return self
     */
    public function setAdditionalUserProps($additional_user_props)
    {
        if (is_null($additional_user_props)) {
            throw new \InvalidArgumentException('non-nullable additional_user_props cannot be null');
        }
        $this->container['additional_user_props'] = $additional_user_props;

        return $this;
    }

    /**
     * Gets additional_check_props
     *
     * @return string|null
     */
    public function getAdditionalCheckProps()
    {
        return $this->container['additional_check_props'];
    }

    /**
     * Sets additional_check_props
     *
     * @param string|null $additional_check_props __Тег ФФД 1192.__ Дополнительный реквизит чека
     *
     * @return self
     */
    public function setAdditionalCheckProps($additional_check_props)
    {
        if (is_null($additional_check_props)) {
            throw new \InvalidArgumentException('non-nullable additional_check_props cannot be null');
        }
        if ((mb_strlen($additional_check_props) > 16)) {
            throw new \InvalidArgumentException('invalid length for $additional_check_props when calling OrderBundle., must be smaller than or equal to 16.');
        }
        if ((mb_strlen($additional_check_props) < 1)) {
            throw new \InvalidArgumentException('invalid length for $additional_check_props when calling OrderBundle., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~А-Яа-яЁё№]*$/", ObjectSerializer::toString($additional_check_props)))) {
            throw new \InvalidArgumentException("invalid value for \$additional_check_props when calling OrderBundle., must conform to the pattern /^[ -~А-Яа-яЁё№]*$/.");
        }

        $this->container['additional_check_props'] = $additional_check_props;

        return $this;
    }

    /**
     * Gets operating_check_props
     *
     * @return \Sberbank\Model\OrderBundleOperatingCheckProps|null
     */
    public function getOperatingCheckProps()
    {
        return $this->container['operating_check_props'];
    }

    /**
     * Sets operating_check_props
     *
     * @param \Sberbank\Model\OrderBundleOperatingCheckProps|null $operating_check_props operating_check_props
     *
     * @return self
     */
    public function setOperatingCheckProps($operating_check_props)
    {
        if (is_null($operating_check_props)) {
            throw new \InvalidArgumentException('non-nullable operating_check_props cannot be null');
        }
        $this->container['operating_check_props'] = $operating_check_props;

        return $this;
    }

    /**
     * Gets sectoral_check_props
     *
     * @return \Sberbank\Model\OrderBundleSectoralCheckPropsInner[]|null
     */
    public function getSectoralCheckProps()
    {
        return $this->container['sectoral_check_props'];
    }

    /**
     * Sets sectoral_check_props
     *
     * @param \Sberbank\Model\OrderBundleSectoralCheckPropsInner[]|null $sectoral_check_props __Тег ФФД 1261.__ Отраслевой реквизит чека. Передается, если в чеке есть маркированные товары и включение указанного реквизита предусмотрено нормативными актами для этой товарной группы. Только для ФФД 1.2.
     *
     * @return self
     */
    public function setSectoralCheckProps($sectoral_check_props)
    {
        if (is_null($sectoral_check_props)) {
            throw new \InvalidArgumentException('non-nullable sectoral_check_props cannot be null');
        }
        $this->container['sectoral_check_props'] = $sectoral_check_props;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


