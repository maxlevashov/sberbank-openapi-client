<?php
/**
 * TdsDestinationNumberAttributes
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Sberbank
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API платёжного шлюза Сбербанка
 *
 * Настоящий документ описывает программные интерфейсы платёжного шлюза Сбербанка, который позволяет проводить платежи в интернет-эквайринге.
 *
 * The version of the OpenAPI document: 1.0.7
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Sberbank\Model;

use \ArrayAccess;
use \Sberbank\ObjectSerializer;

/**
 * TdsDestinationNumberAttributes Class Doc Comment
 *
 * @category Class
 * @description Реквизиты получателя денежных средств для 3-D Secure
 * @package  Sberbank
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TdsDestinationNumberAttributes implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'tdsDestinationNumberAttributes';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'dest_wallet_num' => 'string',
        'dest_phone_num' => 'string',
        'dest_card_num' => 'string',
        'dest_acct_num' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'dest_wallet_num' => null,
        'dest_phone_num' => null,
        'dest_card_num' => null,
        'dest_acct_num' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'dest_wallet_num' => false,
        'dest_phone_num' => false,
        'dest_card_num' => false,
        'dest_acct_num' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'dest_wallet_num' => 'destWalletNum',
        'dest_phone_num' => 'destPhoneNum',
        'dest_card_num' => 'destCardNum',
        'dest_acct_num' => 'destAcctNum'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'dest_wallet_num' => 'setDestWalletNum',
        'dest_phone_num' => 'setDestPhoneNum',
        'dest_card_num' => 'setDestCardNum',
        'dest_acct_num' => 'setDestAcctNum'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'dest_wallet_num' => 'getDestWalletNum',
        'dest_phone_num' => 'getDestPhoneNum',
        'dest_card_num' => 'getDestCardNum',
        'dest_acct_num' => 'getDestAcctNum'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('dest_wallet_num', $data ?? [], null);
        $this->setIfExists('dest_phone_num', $data ?? [], null);
        $this->setIfExists('dest_card_num', $data ?? [], null);
        $this->setIfExists('dest_acct_num', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['dest_wallet_num']) && (mb_strlen($this->container['dest_wallet_num']) > 30)) {
            $invalidProperties[] = "invalid value for 'dest_wallet_num', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['dest_wallet_num']) && (mb_strlen($this->container['dest_wallet_num']) < 1)) {
            $invalidProperties[] = "invalid value for 'dest_wallet_num', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['dest_wallet_num']) && !preg_match("/^[ -~]*$/", $this->container['dest_wallet_num'])) {
            $invalidProperties[] = "invalid value for 'dest_wallet_num', must be conform to the pattern /^[ -~]*$/.";
        }

        if (!is_null($this->container['dest_phone_num']) && (mb_strlen($this->container['dest_phone_num']) > 30)) {
            $invalidProperties[] = "invalid value for 'dest_phone_num', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['dest_phone_num']) && (mb_strlen($this->container['dest_phone_num']) < 1)) {
            $invalidProperties[] = "invalid value for 'dest_phone_num', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['dest_phone_num']) && !preg_match("/^(\\+?)\\d{7,15}$/", $this->container['dest_phone_num'])) {
            $invalidProperties[] = "invalid value for 'dest_phone_num', must be conform to the pattern /^(\\+?)\\d{7,15}$/.";
        }

        if (!is_null($this->container['dest_card_num']) && (mb_strlen($this->container['dest_card_num']) > 19)) {
            $invalidProperties[] = "invalid value for 'dest_card_num', the character length must be smaller than or equal to 19.";
        }

        if (!is_null($this->container['dest_card_num']) && (mb_strlen($this->container['dest_card_num']) < 13)) {
            $invalidProperties[] = "invalid value for 'dest_card_num', the character length must be bigger than or equal to 13.";
        }

        if (!is_null($this->container['dest_card_num']) && !preg_match("/^\\d+$/", $this->container['dest_card_num'])) {
            $invalidProperties[] = "invalid value for 'dest_card_num', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['dest_acct_num']) && (mb_strlen($this->container['dest_acct_num']) > 29)) {
            $invalidProperties[] = "invalid value for 'dest_acct_num', the character length must be smaller than or equal to 29.";
        }

        if (!is_null($this->container['dest_acct_num']) && (mb_strlen($this->container['dest_acct_num']) < 1)) {
            $invalidProperties[] = "invalid value for 'dest_acct_num', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['dest_acct_num']) && !preg_match("/^\\d+$/", $this->container['dest_acct_num'])) {
            $invalidProperties[] = "invalid value for 'dest_acct_num', must be conform to the pattern /^\\d+$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets dest_wallet_num
     *
     * @return string|null
     */
    public function getDestWalletNum()
    {
        return $this->container['dest_wallet_num'];
    }

    /**
     * Sets dest_wallet_num
     *
     * @param string|null $dest_wallet_num Номер (идентификатор) электронного кошелька получателя электронных денежных средств.  <span style=\"color:red;\">Обязательно, если MCC=6050 или 6051</span>
     *
     * @return self
     */
    public function setDestWalletNum($dest_wallet_num)
    {
        if (is_null($dest_wallet_num)) {
            throw new \InvalidArgumentException('non-nullable dest_wallet_num cannot be null');
        }
        if ((mb_strlen($dest_wallet_num) > 30)) {
            throw new \InvalidArgumentException('invalid length for $dest_wallet_num when calling TdsDestinationNumberAttributes., must be smaller than or equal to 30.');
        }
        if ((mb_strlen($dest_wallet_num) < 1)) {
            throw new \InvalidArgumentException('invalid length for $dest_wallet_num when calling TdsDestinationNumberAttributes., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~]*$/", ObjectSerializer::toString($dest_wallet_num)))) {
            throw new \InvalidArgumentException("invalid value for \$dest_wallet_num when calling TdsDestinationNumberAttributes., must conform to the pattern /^[ -~]*$/.");
        }

        $this->container['dest_wallet_num'] = $dest_wallet_num;

        return $this;
    }

    /**
     * Gets dest_phone_num
     *
     * @return string|null
     */
    public function getDestPhoneNum()
    {
        return $this->container['dest_phone_num'];
    }

    /**
     * Sets dest_phone_num
     *
     * @param string|null $dest_phone_num Номер телефона абонента получателя денежных средств.  <span style=\"color:red;\">Обязательно, если MCC=4814</span>
     *
     * @return self
     */
    public function setDestPhoneNum($dest_phone_num)
    {
        if (is_null($dest_phone_num)) {
            throw new \InvalidArgumentException('non-nullable dest_phone_num cannot be null');
        }
        if ((mb_strlen($dest_phone_num) > 30)) {
            throw new \InvalidArgumentException('invalid length for $dest_phone_num when calling TdsDestinationNumberAttributes., must be smaller than or equal to 30.');
        }
        if ((mb_strlen($dest_phone_num) < 1)) {
            throw new \InvalidArgumentException('invalid length for $dest_phone_num when calling TdsDestinationNumberAttributes., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^(\\+?)\\d{7,15}$/", ObjectSerializer::toString($dest_phone_num)))) {
            throw new \InvalidArgumentException("invalid value for \$dest_phone_num when calling TdsDestinationNumberAttributes., must conform to the pattern /^(\\+?)\\d{7,15}$/.");
        }

        $this->container['dest_phone_num'] = $dest_phone_num;

        return $this;
    }

    /**
     * Gets dest_card_num
     *
     * @return string|null
     */
    public function getDestCardNum()
    {
        return $this->container['dest_card_num'];
    }

    /**
     * Sets dest_card_num
     *
     * @param string|null $dest_card_num Номер карты получателя перевода.  <span style=\"color:red;\">Обязательно при проведении операции перевода денежных средств на карту, кредитование, для MCC=6538</span>
     *
     * @return self
     */
    public function setDestCardNum($dest_card_num)
    {
        if (is_null($dest_card_num)) {
            throw new \InvalidArgumentException('non-nullable dest_card_num cannot be null');
        }
        if ((mb_strlen($dest_card_num) > 19)) {
            throw new \InvalidArgumentException('invalid length for $dest_card_num when calling TdsDestinationNumberAttributes., must be smaller than or equal to 19.');
        }
        if ((mb_strlen($dest_card_num) < 13)) {
            throw new \InvalidArgumentException('invalid length for $dest_card_num when calling TdsDestinationNumberAttributes., must be bigger than or equal to 13.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($dest_card_num)))) {
            throw new \InvalidArgumentException("invalid value for \$dest_card_num when calling TdsDestinationNumberAttributes., must conform to the pattern /^\\d+$/.");
        }

        $this->container['dest_card_num'] = $dest_card_num;

        return $this;
    }

    /**
     * Gets dest_acct_num
     *
     * @return string|null
     */
    public function getDestAcctNum()
    {
        return $this->container['dest_acct_num'];
    }

    /**
     * Sets dest_acct_num
     *
     * @param string|null $dest_acct_num Конкатенированное значение БИК Банка (bik) получателя (044583999) и номер счета (bankAccount) получателя 40817810570000123456 для перевода  <span style=\"color:red;\">Обязательно при проведении операции перевода денежных средств на счет, кредитование, для MCC=6538</span>
     *
     * @return self
     */
    public function setDestAcctNum($dest_acct_num)
    {
        if (is_null($dest_acct_num)) {
            throw new \InvalidArgumentException('non-nullable dest_acct_num cannot be null');
        }
        if ((mb_strlen($dest_acct_num) > 29)) {
            throw new \InvalidArgumentException('invalid length for $dest_acct_num when calling TdsDestinationNumberAttributes., must be smaller than or equal to 29.');
        }
        if ((mb_strlen($dest_acct_num) < 1)) {
            throw new \InvalidArgumentException('invalid length for $dest_acct_num when calling TdsDestinationNumberAttributes., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($dest_acct_num)))) {
            throw new \InvalidArgumentException("invalid value for \$dest_acct_num when calling TdsDestinationNumberAttributes., must conform to the pattern /^\\d+$/.");
        }

        $this->container['dest_acct_num'] = $dest_acct_num;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


