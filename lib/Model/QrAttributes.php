<?php
/**
 * QrAttributes
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Sberbank
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API платёжного шлюза Сбербанка
 *
 * Настоящий документ описывает программные интерфейсы платёжного шлюза Сбербанка, который позволяет проводить платежи в интернет-эквайринге.
 *
 * The version of the OpenAPI document: 1.0.7
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Sberbank\Model;

use \ArrayAccess;
use \Sberbank\ObjectSerializer;

/**
 * QrAttributes Class Doc Comment
 *
 * @category Class
 * @description Атрибуты для проведения платежей с использованием QR-кодов (СБП и Сбера)
 * @package  Sberbank
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class QrAttributes implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'qrAttributes';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'qr_type' => 'string',
        'sbp_scenario' => 'string',
        'sbp_subscription_purpose' => 'string',
        'sberpay_qr_c2b' => 'bool',
        'sberpay_sbp_cash_link' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'qr_type' => null,
        'sbp_scenario' => null,
        'sbp_subscription_purpose' => null,
        'sberpay_qr_c2b' => null,
        'sberpay_sbp_cash_link' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'qr_type' => false,
        'sbp_scenario' => false,
        'sbp_subscription_purpose' => false,
        'sberpay_qr_c2b' => false,
        'sberpay_sbp_cash_link' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'qr_type' => 'qrType',
        'sbp_scenario' => 'sbp.scenario',
        'sbp_subscription_purpose' => 'sbp.subscriptionPurpose',
        'sberpay_qr_c2b' => 'sberpay.qr.c2b',
        'sberpay_sbp_cash_link' => 'sberpay.sbp.cashLink'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'qr_type' => 'setQrType',
        'sbp_scenario' => 'setSbpScenario',
        'sbp_subscription_purpose' => 'setSbpSubscriptionPurpose',
        'sberpay_qr_c2b' => 'setSberpayQrC2b',
        'sberpay_sbp_cash_link' => 'setSberpaySbpCashLink'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'qr_type' => 'getQrType',
        'sbp_scenario' => 'getSbpScenario',
        'sbp_subscription_purpose' => 'getSbpSubscriptionPurpose',
        'sberpay_qr_c2b' => 'getSberpayQrC2b',
        'sberpay_sbp_cash_link' => 'getSberpaySbpCashLink'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const QR_TYPE_DYNAMIC_QR_SBP = 'DYNAMIC_QR_SBP';
    public const QR_TYPE_SUBSCRIPTION_SBP = 'SUBSCRIPTION_SBP';
    public const QR_TYPE_SBERPAY_DYNAMIC_QR = 'SBERPAY_DYNAMIC_QR';
    public const SBP_SCENARIO_C2_B = 'C2B';
    public const SBP_SCENARIO_C2_B_CASH_REGISTER = 'C2B_CASH_REGISTER';
    public const SBP_SCENARIO_C2_B_SUBSCRIPTION = 'C2B_SUBSCRIPTION';
    public const SBP_SCENARIO_C2_B_SUBSCRIPTION_WITH_PAYMENT = 'C2B_SUBSCRIPTION_WITH_PAYMENT';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getQrTypeAllowableValues()
    {
        return [
            self::QR_TYPE_DYNAMIC_QR_SBP,
            self::QR_TYPE_SUBSCRIPTION_SBP,
            self::QR_TYPE_SBERPAY_DYNAMIC_QR,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSbpScenarioAllowableValues()
    {
        return [
            self::SBP_SCENARIO_C2_B,
            self::SBP_SCENARIO_C2_B_CASH_REGISTER,
            self::SBP_SCENARIO_C2_B_SUBSCRIPTION,
            self::SBP_SCENARIO_C2_B_SUBSCRIPTION_WITH_PAYMENT,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('qr_type', $data ?? [], null);
        $this->setIfExists('sbp_scenario', $data ?? [], null);
        $this->setIfExists('sbp_subscription_purpose', $data ?? [], null);
        $this->setIfExists('sberpay_qr_c2b', $data ?? [], null);
        $this->setIfExists('sberpay_sbp_cash_link', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['qr_type'] === null) {
            $invalidProperties[] = "'qr_type' can't be null";
        }
        $allowedValues = $this->getQrTypeAllowableValues();
        if (!is_null($this->container['qr_type']) && !in_array($this->container['qr_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'qr_type', must be one of '%s'",
                $this->container['qr_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSbpScenarioAllowableValues();
        if (!is_null($this->container['sbp_scenario']) && !in_array($this->container['sbp_scenario'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'sbp_scenario', must be one of '%s'",
                $this->container['sbp_scenario'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['sbp_subscription_purpose']) && (mb_strlen($this->container['sbp_subscription_purpose']) > 256)) {
            $invalidProperties[] = "invalid value for 'sbp_subscription_purpose', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['sbp_subscription_purpose']) && !preg_match("/^[ -~А-Яа-яЁё№]*$/", $this->container['sbp_subscription_purpose'])) {
            $invalidProperties[] = "invalid value for 'sbp_subscription_purpose', must be conform to the pattern /^[ -~А-Яа-яЁё№]*$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets qr_type
     *
     * @return string
     */
    public function getQrType()
    {
        return $this->container['qr_type'];
    }

    /**
     * Sets qr_type
     *
     * @param string $qr_type Тип регистрируемого QR. Допустимые значения: * `DYNAMIC_QR_SBP` - динамический QR СБП * `SUBSCRIPTION_SBP` - подписка для оплаты по СБП * `SBERPAY_DYNAMIC_QR` - динамический Плати QR от Сбербанка
     *
     * @return self
     */
    public function setQrType($qr_type)
    {
        if (is_null($qr_type)) {
            throw new \InvalidArgumentException('non-nullable qr_type cannot be null');
        }
        $allowedValues = $this->getQrTypeAllowableValues();
        if (!in_array($qr_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'qr_type', must be one of '%s'",
                    $qr_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['qr_type'] = $qr_type;

        return $this;
    }

    /**
     * Gets sbp_scenario
     *
     * @return string|null
     */
    public function getSbpScenario()
    {
        return $this->container['sbp_scenario'];
    }

    /**
     * Sets sbp_scenario
     *
     * @param string|null $sbp_scenario Сценарий СБП. Допустимые значения: * `C2B` – Одноразовая Платежная ссылка СБП с фиксированной суммой * `C2B_CASH_REGISTER` – Кассовая Платежная ссылка СБП  * `C2B_SUBSCRIPTION` - Информационная ссылка СБП для привязки счета Плательщика * `C2B_SUBSCRIPTION_WITH_PAYMENT` - Одноразовая Платежная ссылка СБП с одновременной привязкой счета Плательщика
     *
     * @return self
     */
    public function setSbpScenario($sbp_scenario)
    {
        if (is_null($sbp_scenario)) {
            throw new \InvalidArgumentException('non-nullable sbp_scenario cannot be null');
        }
        $allowedValues = $this->getSbpScenarioAllowableValues();
        if (!in_array($sbp_scenario, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'sbp_scenario', must be one of '%s'",
                    $sbp_scenario,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sbp_scenario'] = $sbp_scenario;

        return $this;
    }

    /**
     * Gets sbp_subscription_purpose
     *
     * @return string|null
     */
    public function getSbpSubscriptionPurpose()
    {
        return $this->container['sbp_subscription_purpose'];
    }

    /**
     * Sets sbp_subscription_purpose
     *
     * @param string|null $sbp_subscription_purpose Цель привязки счета (в свободной форме). Обязателен, если  __qrType__=SUBSCRIPTION_SBP либо __qrType__=DYNAMIC_QR_SBP и __sbp.scenario__=C2B_SUBSCRIPTION_WITH_PAYMENT.
     *
     * @return self
     */
    public function setSbpSubscriptionPurpose($sbp_subscription_purpose)
    {
        if (is_null($sbp_subscription_purpose)) {
            throw new \InvalidArgumentException('non-nullable sbp_subscription_purpose cannot be null');
        }
        if ((mb_strlen($sbp_subscription_purpose) > 256)) {
            throw new \InvalidArgumentException('invalid length for $sbp_subscription_purpose when calling QrAttributes., must be smaller than or equal to 256.');
        }
        if ((!preg_match("/^[ -~А-Яа-яЁё№]*$/", ObjectSerializer::toString($sbp_subscription_purpose)))) {
            throw new \InvalidArgumentException("invalid value for \$sbp_subscription_purpose when calling QrAttributes., must conform to the pattern /^[ -~А-Яа-яЁё№]*$/.");
        }

        $this->container['sbp_subscription_purpose'] = $sbp_subscription_purpose;

        return $this;
    }

    /**
     * Gets sberpay_qr_c2b
     *
     * @return bool|null
     */
    public function getSberpayQrC2b()
    {
        return $this->container['sberpay_qr_c2b'];
    }

    /**
     * Sets sberpay_qr_c2b
     *
     * @param bool|null $sberpay_qr_c2b Признак, указывающий на способ оплаты с использованием Плати QR - Кодов от Сбербанка (Динамический QR).   * `true` = истина, передается в случае, если Клиент хочет дать дать возможность для оплаты заказа через Плати QR;   * `false` = ложь.
     *
     * @return self
     */
    public function setSberpayQrC2b($sberpay_qr_c2b)
    {
        if (is_null($sberpay_qr_c2b)) {
            throw new \InvalidArgumentException('non-nullable sberpay_qr_c2b cannot be null');
        }
        $this->container['sberpay_qr_c2b'] = $sberpay_qr_c2b;

        return $this;
    }

    /**
     * Gets sberpay_sbp_cash_link
     *
     * @return bool|null
     */
    public function getSberpaySbpCashLink()
    {
        return $this->container['sberpay_sbp_cash_link'];
    }

    /**
     * Sets sberpay_sbp_cash_link
     *
     * @param bool|null $sberpay_sbp_cash_link <span style=\"color:red;\">__Зарезервировано для дальнейшего использования__</span>  Признак, указывающий на способ оплаты переводом C2B через СБП с помощью создания Кассовой ссылки (активированной или требующей активации отдельным методом).   * `true` = истина, передается в случае, если Клиент хочет дать возможность для оплаты заказа через СБП (в таком случае отмена зарегистрированного заказа до начала процесса оплаты невозможна);   * `false` = ложь.
     *
     * @return self
     */
    public function setSberpaySbpCashLink($sberpay_sbp_cash_link)
    {
        if (is_null($sberpay_sbp_cash_link)) {
            throw new \InvalidArgumentException('non-nullable sberpay_sbp_cash_link cannot be null');
        }
        $this->container['sberpay_sbp_cash_link'] = $sberpay_sbp_cash_link;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


