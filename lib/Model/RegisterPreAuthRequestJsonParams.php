<?php
/**
 * RegisterPreAuthRequestJsonParams
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Sberbank
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API платёжного шлюза Сбербанка
 *
 * Настоящий документ описывает программные интерфейсы платёжного шлюза Сбербанка, который позволяет проводить платежи в интернет-эквайринге.
 *
 * The version of the OpenAPI document: 1.0.7
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Sberbank\Model;

use \ArrayAccess;
use \Sberbank\ObjectSerializer;

/**
 * RegisterPreAuthRequestJsonParams Class Doc Comment
 *
 * @category Class
 * @description Блок для передачи дополнительных параметров Клиентом
 * @package  Sberbank
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RegisterPreAuthRequestJsonParams implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'registerPreAuthRequest_jsonParams';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'has_valuable_items' => 'string',
        'acct_id' => 'string',
        'ch_acc_date' => 'string',
        'ch_acc_age_ind' => 'string',
        'ch_acc_change_ind' => 'string',
        'ship_addr_city' => 'string',
        'ship_delivery_point_id' => 'string',
        'mri_reorder_items_ind' => 'string',
        'mobile_phone' => 'string',
        'ship_name_indicator' => 'string',
        'suspicious_acc_activity' => 'string',
        'provision_attempts_day' => 'string',
        'ship_addr_line1' => 'string',
        'ship_addr_line2' => 'string',
        'ship_addr_line3' => 'string',
        'ship_address_usage' => 'string',
        'ship_address_usage_ind' => 'string',
        'mri_delivery_timeframe' => 'string',
        'mri_ship_indicator' => 'string',
        'ch_acc_pw_change' => 'string',
        'ch_acc_pw_change_ind' => 'string',
        'nb_purchase_account' => 'string',
        'txn_activity_day' => 'string',
        'txn_activity_year' => 'string',
        'payment_acc_age' => 'string',
        'payment_acc_ind' => 'string',
        'ch_acc_change' => 'string',
        'app2app' => 'bool',
        'web2app' => 'bool',
        'app_deep_link' => 'string',
        'sberpay_backurl' => 'string',
        'qr_type' => 'string',
        'sbp_scenario' => 'string',
        'sbp_subscription_purpose' => 'string',
        'sberpay_qr_c2b' => 'bool',
        'sberpay_sbp_cash_link' => 'bool',
        'back_to_shop_name' => 'string',
        'back_to_shop_url' => 'string',
        'dest_wallet_num' => 'string',
        'dest_phone_num' => 'string',
        'dest_card_num' => 'string',
        'dest_acct_num' => 'string',
        'bill_addr_city' => 'string',
        'bill_addr_country' => 'string',
        'bill_addr_line1' => 'string',
        'bill_addr_line2' => 'string',
        'bill_addr_line3' => 'string',
        'bill_addr_post_code' => 'string',
        'bill_addr_state' => 'string',
        'ship_addr_country' => 'string',
        'ship_addr_post_code' => 'string',
        'ship_addr_state' => 'string',
        'work_phone' => 'string',
        'home_phone' => 'string',
        'mri_delivery_email_address' => 'string',
        'mri_gift_card_amount' => 'string',
        'mri_gift_card_count' => 'string',
        'mri_gift_card_curr' => 'string',
        'mri_pre_order_date' => 'string',
        'mri_pre_order_purchase_ind' => 'string',
        'three_ds_req_prior_auth_data' => 'string',
        'three_ds_req_prior_auth_method' => 'string',
        'three_ds_req_prior_auth_timestamp' => 'string',
        'three_ds_req_prior_ref' => 'string',
        'three_ds_req_auth_data' => 'string',
        'three_ds_req_auth_method' => 'string',
        'three_ds_req_auth_timestamp' => 'string',
        'acct_type' => 'string',
        'trans_type' => 'string',
        'addr_match' => 'string',
        'three_ds_requestor_challenge_ind' => 'string',
        'purchase_instal_data' => 'string',
        'recurring_expiry' => 'string',
        'recurring_frequency' => 'string',
        'name1' => 'mixed',
        'name2' => 'mixed'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'has_valuable_items' => null,
        'acct_id' => null,
        'ch_acc_date' => null,
        'ch_acc_age_ind' => null,
        'ch_acc_change_ind' => null,
        'ship_addr_city' => null,
        'ship_delivery_point_id' => null,
        'mri_reorder_items_ind' => null,
        'mobile_phone' => null,
        'ship_name_indicator' => null,
        'suspicious_acc_activity' => null,
        'provision_attempts_day' => null,
        'ship_addr_line1' => null,
        'ship_addr_line2' => null,
        'ship_addr_line3' => null,
        'ship_address_usage' => null,
        'ship_address_usage_ind' => null,
        'mri_delivery_timeframe' => null,
        'mri_ship_indicator' => null,
        'ch_acc_pw_change' => null,
        'ch_acc_pw_change_ind' => null,
        'nb_purchase_account' => null,
        'txn_activity_day' => null,
        'txn_activity_year' => null,
        'payment_acc_age' => null,
        'payment_acc_ind' => null,
        'ch_acc_change' => null,
        'app2app' => null,
        'web2app' => null,
        'app_deep_link' => null,
        'sberpay_backurl' => null,
        'qr_type' => null,
        'sbp_scenario' => null,
        'sbp_subscription_purpose' => null,
        'sberpay_qr_c2b' => null,
        'sberpay_sbp_cash_link' => null,
        'back_to_shop_name' => null,
        'back_to_shop_url' => null,
        'dest_wallet_num' => null,
        'dest_phone_num' => null,
        'dest_card_num' => null,
        'dest_acct_num' => null,
        'bill_addr_city' => null,
        'bill_addr_country' => null,
        'bill_addr_line1' => null,
        'bill_addr_line2' => null,
        'bill_addr_line3' => null,
        'bill_addr_post_code' => null,
        'bill_addr_state' => null,
        'ship_addr_country' => null,
        'ship_addr_post_code' => null,
        'ship_addr_state' => null,
        'work_phone' => null,
        'home_phone' => null,
        'mri_delivery_email_address' => null,
        'mri_gift_card_amount' => null,
        'mri_gift_card_count' => null,
        'mri_gift_card_curr' => null,
        'mri_pre_order_date' => null,
        'mri_pre_order_purchase_ind' => null,
        'three_ds_req_prior_auth_data' => null,
        'three_ds_req_prior_auth_method' => null,
        'three_ds_req_prior_auth_timestamp' => null,
        'three_ds_req_prior_ref' => null,
        'three_ds_req_auth_data' => null,
        'three_ds_req_auth_method' => null,
        'three_ds_req_auth_timestamp' => null,
        'acct_type' => null,
        'trans_type' => null,
        'addr_match' => null,
        'three_ds_requestor_challenge_ind' => null,
        'purchase_instal_data' => null,
        'recurring_expiry' => null,
        'recurring_frequency' => null,
        'name1' => null,
        'name2' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'has_valuable_items' => false,
        'acct_id' => false,
        'ch_acc_date' => false,
        'ch_acc_age_ind' => false,
        'ch_acc_change_ind' => false,
        'ship_addr_city' => false,
        'ship_delivery_point_id' => false,
        'mri_reorder_items_ind' => false,
        'mobile_phone' => false,
        'ship_name_indicator' => false,
        'suspicious_acc_activity' => false,
        'provision_attempts_day' => false,
        'ship_addr_line1' => false,
        'ship_addr_line2' => false,
        'ship_addr_line3' => false,
        'ship_address_usage' => false,
        'ship_address_usage_ind' => false,
        'mri_delivery_timeframe' => false,
        'mri_ship_indicator' => false,
        'ch_acc_pw_change' => false,
        'ch_acc_pw_change_ind' => false,
        'nb_purchase_account' => false,
        'txn_activity_day' => false,
        'txn_activity_year' => false,
        'payment_acc_age' => false,
        'payment_acc_ind' => false,
        'ch_acc_change' => false,
        'app2app' => false,
        'web2app' => false,
        'app_deep_link' => false,
        'sberpay_backurl' => false,
        'qr_type' => false,
        'sbp_scenario' => false,
        'sbp_subscription_purpose' => false,
        'sberpay_qr_c2b' => false,
        'sberpay_sbp_cash_link' => false,
        'back_to_shop_name' => false,
        'back_to_shop_url' => false,
        'dest_wallet_num' => false,
        'dest_phone_num' => false,
        'dest_card_num' => false,
        'dest_acct_num' => false,
        'bill_addr_city' => false,
        'bill_addr_country' => false,
        'bill_addr_line1' => false,
        'bill_addr_line2' => false,
        'bill_addr_line3' => false,
        'bill_addr_post_code' => false,
        'bill_addr_state' => false,
        'ship_addr_country' => false,
        'ship_addr_post_code' => false,
        'ship_addr_state' => false,
        'work_phone' => false,
        'home_phone' => false,
        'mri_delivery_email_address' => false,
        'mri_gift_card_amount' => false,
        'mri_gift_card_count' => false,
        'mri_gift_card_curr' => false,
        'mri_pre_order_date' => false,
        'mri_pre_order_purchase_ind' => false,
        'three_ds_req_prior_auth_data' => false,
        'three_ds_req_prior_auth_method' => false,
        'three_ds_req_prior_auth_timestamp' => false,
        'three_ds_req_prior_ref' => false,
        'three_ds_req_auth_data' => false,
        'three_ds_req_auth_method' => false,
        'three_ds_req_auth_timestamp' => false,
        'acct_type' => false,
        'trans_type' => false,
        'addr_match' => false,
        'three_ds_requestor_challenge_ind' => false,
        'purchase_instal_data' => false,
        'recurring_expiry' => false,
        'recurring_frequency' => false,
        'name1' => true,
        'name2' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'has_valuable_items' => 'hasValuableItems',
        'acct_id' => 'acctId',
        'ch_acc_date' => 'chAccDate',
        'ch_acc_age_ind' => 'chAccAgeInd',
        'ch_acc_change_ind' => 'chAccChangeInd',
        'ship_addr_city' => 'shipAddrCity',
        'ship_delivery_point_id' => 'shipDeliveryPointId',
        'mri_reorder_items_ind' => 'mriReorderItemsInd',
        'mobile_phone' => 'mobilePhone',
        'ship_name_indicator' => 'shipNameIndicator',
        'suspicious_acc_activity' => 'suspiciousAccActivity',
        'provision_attempts_day' => 'provisionAttemptsDay',
        'ship_addr_line1' => 'shipAddrLine1',
        'ship_addr_line2' => 'shipAddrLine2',
        'ship_addr_line3' => 'shipAddrLine3',
        'ship_address_usage' => 'shipAddressUsage',
        'ship_address_usage_ind' => 'shipAddressUsageInd',
        'mri_delivery_timeframe' => 'mriDeliveryTimeframe',
        'mri_ship_indicator' => 'mriShipIndicator',
        'ch_acc_pw_change' => 'chAccPwChange',
        'ch_acc_pw_change_ind' => 'chAccPwChangeInd',
        'nb_purchase_account' => 'nbPurchaseAccount',
        'txn_activity_day' => 'txnActivityDay',
        'txn_activity_year' => 'txnActivityYear',
        'payment_acc_age' => 'paymentAccAge',
        'payment_acc_ind' => 'paymentAccInd',
        'ch_acc_change' => 'chAccChange',
        'app2app' => 'app2app',
        'web2app' => 'web2app',
        'app_deep_link' => 'app.deepLink',
        'sberpay_backurl' => 'sberpay.backurl',
        'qr_type' => 'qrType',
        'sbp_scenario' => 'sbp.scenario',
        'sbp_subscription_purpose' => 'sbp.subscriptionPurpose',
        'sberpay_qr_c2b' => 'sberpay.qr.c2b',
        'sberpay_sbp_cash_link' => 'sberpay.sbp.cashLink',
        'back_to_shop_name' => 'backToShopName',
        'back_to_shop_url' => 'backToShopUrl',
        'dest_wallet_num' => 'destWalletNum',
        'dest_phone_num' => 'destPhoneNum',
        'dest_card_num' => 'destCardNum',
        'dest_acct_num' => 'destAcctNum',
        'bill_addr_city' => 'billAddrCity',
        'bill_addr_country' => 'billAddrCountry',
        'bill_addr_line1' => 'billAddrLine1',
        'bill_addr_line2' => 'billAddrLine2',
        'bill_addr_line3' => 'billAddrLine3',
        'bill_addr_post_code' => 'billAddrPostCode',
        'bill_addr_state' => 'billAddrState',
        'ship_addr_country' => 'shipAddrCountry',
        'ship_addr_post_code' => 'shipAddrPostCode',
        'ship_addr_state' => 'shipAddrState',
        'work_phone' => 'workPhone',
        'home_phone' => 'homePhone',
        'mri_delivery_email_address' => 'mriDeliveryEmailAddress',
        'mri_gift_card_amount' => 'mriGiftCardAmount',
        'mri_gift_card_count' => 'mriGiftCardCount',
        'mri_gift_card_curr' => 'mriGiftCardCurr',
        'mri_pre_order_date' => 'mriPreOrderDate',
        'mri_pre_order_purchase_ind' => 'mriPreOrderPurchaseInd',
        'three_ds_req_prior_auth_data' => 'threeDSReqPriorAuthData',
        'three_ds_req_prior_auth_method' => 'threeDSReqPriorAuthMethod',
        'three_ds_req_prior_auth_timestamp' => 'threeDSReqPriorAuthTimestamp',
        'three_ds_req_prior_ref' => 'threeDSReqPriorRef',
        'three_ds_req_auth_data' => 'threeDSReqAuthData',
        'three_ds_req_auth_method' => 'threeDSReqAuthMethod',
        'three_ds_req_auth_timestamp' => 'threeDSReqAuthTimestamp',
        'acct_type' => 'acctType',
        'trans_type' => 'transType',
        'addr_match' => 'addrMatch',
        'three_ds_requestor_challenge_ind' => 'threeDSRequestorChallengeInd',
        'purchase_instal_data' => 'purchaseInstalData',
        'recurring_expiry' => 'recurringExpiry',
        'recurring_frequency' => 'recurringFrequency',
        'name1' => 'name1',
        'name2' => 'name2'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'has_valuable_items' => 'setHasValuableItems',
        'acct_id' => 'setAcctId',
        'ch_acc_date' => 'setChAccDate',
        'ch_acc_age_ind' => 'setChAccAgeInd',
        'ch_acc_change_ind' => 'setChAccChangeInd',
        'ship_addr_city' => 'setShipAddrCity',
        'ship_delivery_point_id' => 'setShipDeliveryPointId',
        'mri_reorder_items_ind' => 'setMriReorderItemsInd',
        'mobile_phone' => 'setMobilePhone',
        'ship_name_indicator' => 'setShipNameIndicator',
        'suspicious_acc_activity' => 'setSuspiciousAccActivity',
        'provision_attempts_day' => 'setProvisionAttemptsDay',
        'ship_addr_line1' => 'setShipAddrLine1',
        'ship_addr_line2' => 'setShipAddrLine2',
        'ship_addr_line3' => 'setShipAddrLine3',
        'ship_address_usage' => 'setShipAddressUsage',
        'ship_address_usage_ind' => 'setShipAddressUsageInd',
        'mri_delivery_timeframe' => 'setMriDeliveryTimeframe',
        'mri_ship_indicator' => 'setMriShipIndicator',
        'ch_acc_pw_change' => 'setChAccPwChange',
        'ch_acc_pw_change_ind' => 'setChAccPwChangeInd',
        'nb_purchase_account' => 'setNbPurchaseAccount',
        'txn_activity_day' => 'setTxnActivityDay',
        'txn_activity_year' => 'setTxnActivityYear',
        'payment_acc_age' => 'setPaymentAccAge',
        'payment_acc_ind' => 'setPaymentAccInd',
        'ch_acc_change' => 'setChAccChange',
        'app2app' => 'setApp2app',
        'web2app' => 'setWeb2app',
        'app_deep_link' => 'setAppDeepLink',
        'sberpay_backurl' => 'setSberpayBackurl',
        'qr_type' => 'setQrType',
        'sbp_scenario' => 'setSbpScenario',
        'sbp_subscription_purpose' => 'setSbpSubscriptionPurpose',
        'sberpay_qr_c2b' => 'setSberpayQrC2b',
        'sberpay_sbp_cash_link' => 'setSberpaySbpCashLink',
        'back_to_shop_name' => 'setBackToShopName',
        'back_to_shop_url' => 'setBackToShopUrl',
        'dest_wallet_num' => 'setDestWalletNum',
        'dest_phone_num' => 'setDestPhoneNum',
        'dest_card_num' => 'setDestCardNum',
        'dest_acct_num' => 'setDestAcctNum',
        'bill_addr_city' => 'setBillAddrCity',
        'bill_addr_country' => 'setBillAddrCountry',
        'bill_addr_line1' => 'setBillAddrLine1',
        'bill_addr_line2' => 'setBillAddrLine2',
        'bill_addr_line3' => 'setBillAddrLine3',
        'bill_addr_post_code' => 'setBillAddrPostCode',
        'bill_addr_state' => 'setBillAddrState',
        'ship_addr_country' => 'setShipAddrCountry',
        'ship_addr_post_code' => 'setShipAddrPostCode',
        'ship_addr_state' => 'setShipAddrState',
        'work_phone' => 'setWorkPhone',
        'home_phone' => 'setHomePhone',
        'mri_delivery_email_address' => 'setMriDeliveryEmailAddress',
        'mri_gift_card_amount' => 'setMriGiftCardAmount',
        'mri_gift_card_count' => 'setMriGiftCardCount',
        'mri_gift_card_curr' => 'setMriGiftCardCurr',
        'mri_pre_order_date' => 'setMriPreOrderDate',
        'mri_pre_order_purchase_ind' => 'setMriPreOrderPurchaseInd',
        'three_ds_req_prior_auth_data' => 'setThreeDsReqPriorAuthData',
        'three_ds_req_prior_auth_method' => 'setThreeDsReqPriorAuthMethod',
        'three_ds_req_prior_auth_timestamp' => 'setThreeDsReqPriorAuthTimestamp',
        'three_ds_req_prior_ref' => 'setThreeDsReqPriorRef',
        'three_ds_req_auth_data' => 'setThreeDsReqAuthData',
        'three_ds_req_auth_method' => 'setThreeDsReqAuthMethod',
        'three_ds_req_auth_timestamp' => 'setThreeDsReqAuthTimestamp',
        'acct_type' => 'setAcctType',
        'trans_type' => 'setTransType',
        'addr_match' => 'setAddrMatch',
        'three_ds_requestor_challenge_ind' => 'setThreeDsRequestorChallengeInd',
        'purchase_instal_data' => 'setPurchaseInstalData',
        'recurring_expiry' => 'setRecurringExpiry',
        'recurring_frequency' => 'setRecurringFrequency',
        'name1' => 'setName1',
        'name2' => 'setName2'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'has_valuable_items' => 'getHasValuableItems',
        'acct_id' => 'getAcctId',
        'ch_acc_date' => 'getChAccDate',
        'ch_acc_age_ind' => 'getChAccAgeInd',
        'ch_acc_change_ind' => 'getChAccChangeInd',
        'ship_addr_city' => 'getShipAddrCity',
        'ship_delivery_point_id' => 'getShipDeliveryPointId',
        'mri_reorder_items_ind' => 'getMriReorderItemsInd',
        'mobile_phone' => 'getMobilePhone',
        'ship_name_indicator' => 'getShipNameIndicator',
        'suspicious_acc_activity' => 'getSuspiciousAccActivity',
        'provision_attempts_day' => 'getProvisionAttemptsDay',
        'ship_addr_line1' => 'getShipAddrLine1',
        'ship_addr_line2' => 'getShipAddrLine2',
        'ship_addr_line3' => 'getShipAddrLine3',
        'ship_address_usage' => 'getShipAddressUsage',
        'ship_address_usage_ind' => 'getShipAddressUsageInd',
        'mri_delivery_timeframe' => 'getMriDeliveryTimeframe',
        'mri_ship_indicator' => 'getMriShipIndicator',
        'ch_acc_pw_change' => 'getChAccPwChange',
        'ch_acc_pw_change_ind' => 'getChAccPwChangeInd',
        'nb_purchase_account' => 'getNbPurchaseAccount',
        'txn_activity_day' => 'getTxnActivityDay',
        'txn_activity_year' => 'getTxnActivityYear',
        'payment_acc_age' => 'getPaymentAccAge',
        'payment_acc_ind' => 'getPaymentAccInd',
        'ch_acc_change' => 'getChAccChange',
        'app2app' => 'getApp2app',
        'web2app' => 'getWeb2app',
        'app_deep_link' => 'getAppDeepLink',
        'sberpay_backurl' => 'getSberpayBackurl',
        'qr_type' => 'getQrType',
        'sbp_scenario' => 'getSbpScenario',
        'sbp_subscription_purpose' => 'getSbpSubscriptionPurpose',
        'sberpay_qr_c2b' => 'getSberpayQrC2b',
        'sberpay_sbp_cash_link' => 'getSberpaySbpCashLink',
        'back_to_shop_name' => 'getBackToShopName',
        'back_to_shop_url' => 'getBackToShopUrl',
        'dest_wallet_num' => 'getDestWalletNum',
        'dest_phone_num' => 'getDestPhoneNum',
        'dest_card_num' => 'getDestCardNum',
        'dest_acct_num' => 'getDestAcctNum',
        'bill_addr_city' => 'getBillAddrCity',
        'bill_addr_country' => 'getBillAddrCountry',
        'bill_addr_line1' => 'getBillAddrLine1',
        'bill_addr_line2' => 'getBillAddrLine2',
        'bill_addr_line3' => 'getBillAddrLine3',
        'bill_addr_post_code' => 'getBillAddrPostCode',
        'bill_addr_state' => 'getBillAddrState',
        'ship_addr_country' => 'getShipAddrCountry',
        'ship_addr_post_code' => 'getShipAddrPostCode',
        'ship_addr_state' => 'getShipAddrState',
        'work_phone' => 'getWorkPhone',
        'home_phone' => 'getHomePhone',
        'mri_delivery_email_address' => 'getMriDeliveryEmailAddress',
        'mri_gift_card_amount' => 'getMriGiftCardAmount',
        'mri_gift_card_count' => 'getMriGiftCardCount',
        'mri_gift_card_curr' => 'getMriGiftCardCurr',
        'mri_pre_order_date' => 'getMriPreOrderDate',
        'mri_pre_order_purchase_ind' => 'getMriPreOrderPurchaseInd',
        'three_ds_req_prior_auth_data' => 'getThreeDsReqPriorAuthData',
        'three_ds_req_prior_auth_method' => 'getThreeDsReqPriorAuthMethod',
        'three_ds_req_prior_auth_timestamp' => 'getThreeDsReqPriorAuthTimestamp',
        'three_ds_req_prior_ref' => 'getThreeDsReqPriorRef',
        'three_ds_req_auth_data' => 'getThreeDsReqAuthData',
        'three_ds_req_auth_method' => 'getThreeDsReqAuthMethod',
        'three_ds_req_auth_timestamp' => 'getThreeDsReqAuthTimestamp',
        'acct_type' => 'getAcctType',
        'trans_type' => 'getTransType',
        'addr_match' => 'getAddrMatch',
        'three_ds_requestor_challenge_ind' => 'getThreeDsRequestorChallengeInd',
        'purchase_instal_data' => 'getPurchaseInstalData',
        'recurring_expiry' => 'getRecurringExpiry',
        'recurring_frequency' => 'getRecurringFrequency',
        'name1' => 'getName1',
        'name2' => 'getName2'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const QR_TYPE_DYNAMIC_QR_SBP = 'DYNAMIC_QR_SBP';
    public const QR_TYPE_SUBSCRIPTION_SBP = 'SUBSCRIPTION_SBP';
    public const QR_TYPE_SBERPAY_DYNAMIC_QR = 'SBERPAY_DYNAMIC_QR';
    public const SBP_SCENARIO_C2_B = 'C2B';
    public const SBP_SCENARIO_C2_B_CASH_REGISTER = 'C2B_CASH_REGISTER';
    public const SBP_SCENARIO_C2_B_SUBSCRIPTION = 'C2B_SUBSCRIPTION';
    public const SBP_SCENARIO_C2_B_SUBSCRIPTION_WITH_PAYMENT = 'C2B_SUBSCRIPTION_WITH_PAYMENT';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getQrTypeAllowableValues()
    {
        return [
            self::QR_TYPE_DYNAMIC_QR_SBP,
            self::QR_TYPE_SUBSCRIPTION_SBP,
            self::QR_TYPE_SBERPAY_DYNAMIC_QR,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSbpScenarioAllowableValues()
    {
        return [
            self::SBP_SCENARIO_C2_B,
            self::SBP_SCENARIO_C2_B_CASH_REGISTER,
            self::SBP_SCENARIO_C2_B_SUBSCRIPTION,
            self::SBP_SCENARIO_C2_B_SUBSCRIPTION_WITH_PAYMENT,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('has_valuable_items', $data ?? [], null);
        $this->setIfExists('acct_id', $data ?? [], null);
        $this->setIfExists('ch_acc_date', $data ?? [], null);
        $this->setIfExists('ch_acc_age_ind', $data ?? [], null);
        $this->setIfExists('ch_acc_change_ind', $data ?? [], null);
        $this->setIfExists('ship_addr_city', $data ?? [], null);
        $this->setIfExists('ship_delivery_point_id', $data ?? [], null);
        $this->setIfExists('mri_reorder_items_ind', $data ?? [], null);
        $this->setIfExists('mobile_phone', $data ?? [], null);
        $this->setIfExists('ship_name_indicator', $data ?? [], null);
        $this->setIfExists('suspicious_acc_activity', $data ?? [], null);
        $this->setIfExists('provision_attempts_day', $data ?? [], null);
        $this->setIfExists('ship_addr_line1', $data ?? [], null);
        $this->setIfExists('ship_addr_line2', $data ?? [], null);
        $this->setIfExists('ship_addr_line3', $data ?? [], null);
        $this->setIfExists('ship_address_usage', $data ?? [], null);
        $this->setIfExists('ship_address_usage_ind', $data ?? [], null);
        $this->setIfExists('mri_delivery_timeframe', $data ?? [], null);
        $this->setIfExists('mri_ship_indicator', $data ?? [], null);
        $this->setIfExists('ch_acc_pw_change', $data ?? [], null);
        $this->setIfExists('ch_acc_pw_change_ind', $data ?? [], null);
        $this->setIfExists('nb_purchase_account', $data ?? [], null);
        $this->setIfExists('txn_activity_day', $data ?? [], null);
        $this->setIfExists('txn_activity_year', $data ?? [], null);
        $this->setIfExists('payment_acc_age', $data ?? [], null);
        $this->setIfExists('payment_acc_ind', $data ?? [], null);
        $this->setIfExists('ch_acc_change', $data ?? [], null);
        $this->setIfExists('app2app', $data ?? [], null);
        $this->setIfExists('web2app', $data ?? [], null);
        $this->setIfExists('app_deep_link', $data ?? [], null);
        $this->setIfExists('sberpay_backurl', $data ?? [], null);
        $this->setIfExists('qr_type', $data ?? [], null);
        $this->setIfExists('sbp_scenario', $data ?? [], null);
        $this->setIfExists('sbp_subscription_purpose', $data ?? [], null);
        $this->setIfExists('sberpay_qr_c2b', $data ?? [], null);
        $this->setIfExists('sberpay_sbp_cash_link', $data ?? [], null);
        $this->setIfExists('back_to_shop_name', $data ?? [], null);
        $this->setIfExists('back_to_shop_url', $data ?? [], null);
        $this->setIfExists('dest_wallet_num', $data ?? [], null);
        $this->setIfExists('dest_phone_num', $data ?? [], null);
        $this->setIfExists('dest_card_num', $data ?? [], null);
        $this->setIfExists('dest_acct_num', $data ?? [], null);
        $this->setIfExists('bill_addr_city', $data ?? [], null);
        $this->setIfExists('bill_addr_country', $data ?? [], null);
        $this->setIfExists('bill_addr_line1', $data ?? [], null);
        $this->setIfExists('bill_addr_line2', $data ?? [], null);
        $this->setIfExists('bill_addr_line3', $data ?? [], null);
        $this->setIfExists('bill_addr_post_code', $data ?? [], null);
        $this->setIfExists('bill_addr_state', $data ?? [], null);
        $this->setIfExists('ship_addr_country', $data ?? [], null);
        $this->setIfExists('ship_addr_post_code', $data ?? [], null);
        $this->setIfExists('ship_addr_state', $data ?? [], null);
        $this->setIfExists('work_phone', $data ?? [], null);
        $this->setIfExists('home_phone', $data ?? [], null);
        $this->setIfExists('mri_delivery_email_address', $data ?? [], null);
        $this->setIfExists('mri_gift_card_amount', $data ?? [], null);
        $this->setIfExists('mri_gift_card_count', $data ?? [], null);
        $this->setIfExists('mri_gift_card_curr', $data ?? [], null);
        $this->setIfExists('mri_pre_order_date', $data ?? [], null);
        $this->setIfExists('mri_pre_order_purchase_ind', $data ?? [], null);
        $this->setIfExists('three_ds_req_prior_auth_data', $data ?? [], null);
        $this->setIfExists('three_ds_req_prior_auth_method', $data ?? [], null);
        $this->setIfExists('three_ds_req_prior_auth_timestamp', $data ?? [], null);
        $this->setIfExists('three_ds_req_prior_ref', $data ?? [], null);
        $this->setIfExists('three_ds_req_auth_data', $data ?? [], null);
        $this->setIfExists('three_ds_req_auth_method', $data ?? [], null);
        $this->setIfExists('three_ds_req_auth_timestamp', $data ?? [], null);
        $this->setIfExists('acct_type', $data ?? [], null);
        $this->setIfExists('trans_type', $data ?? [], null);
        $this->setIfExists('addr_match', $data ?? [], null);
        $this->setIfExists('three_ds_requestor_challenge_ind', $data ?? [], null);
        $this->setIfExists('purchase_instal_data', $data ?? [], null);
        $this->setIfExists('recurring_expiry', $data ?? [], null);
        $this->setIfExists('recurring_frequency', $data ?? [], null);
        $this->setIfExists('name1', $data ?? [], null);
        $this->setIfExists('name2', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['has_valuable_items']) && (mb_strlen($this->container['has_valuable_items']) > 2)) {
            $invalidProperties[] = "invalid value for 'has_valuable_items', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['has_valuable_items']) && (mb_strlen($this->container['has_valuable_items']) < 2)) {
            $invalidProperties[] = "invalid value for 'has_valuable_items', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['has_valuable_items']) && !preg_match("/^\\d+$/", $this->container['has_valuable_items'])) {
            $invalidProperties[] = "invalid value for 'has_valuable_items', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['acct_id']) && (mb_strlen($this->container['acct_id']) > 64)) {
            $invalidProperties[] = "invalid value for 'acct_id', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['acct_id']) && (mb_strlen($this->container['acct_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'acct_id', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['acct_id']) && !preg_match("/^[ -~]*$/", $this->container['acct_id'])) {
            $invalidProperties[] = "invalid value for 'acct_id', must be conform to the pattern /^[ -~]*$/.";
        }

        if (!is_null($this->container['ch_acc_date']) && (mb_strlen($this->container['ch_acc_date']) > 8)) {
            $invalidProperties[] = "invalid value for 'ch_acc_date', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['ch_acc_date']) && (mb_strlen($this->container['ch_acc_date']) < 8)) {
            $invalidProperties[] = "invalid value for 'ch_acc_date', the character length must be bigger than or equal to 8.";
        }

        if (!is_null($this->container['ch_acc_date']) && !preg_match("/^\\d+$/", $this->container['ch_acc_date'])) {
            $invalidProperties[] = "invalid value for 'ch_acc_date', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['ch_acc_age_ind']) && (mb_strlen($this->container['ch_acc_age_ind']) > 2)) {
            $invalidProperties[] = "invalid value for 'ch_acc_age_ind', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['ch_acc_age_ind']) && (mb_strlen($this->container['ch_acc_age_ind']) < 2)) {
            $invalidProperties[] = "invalid value for 'ch_acc_age_ind', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['ch_acc_age_ind']) && !preg_match("/^\\d+$/", $this->container['ch_acc_age_ind'])) {
            $invalidProperties[] = "invalid value for 'ch_acc_age_ind', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['ch_acc_change_ind']) && (mb_strlen($this->container['ch_acc_change_ind']) > 2)) {
            $invalidProperties[] = "invalid value for 'ch_acc_change_ind', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['ch_acc_change_ind']) && (mb_strlen($this->container['ch_acc_change_ind']) < 2)) {
            $invalidProperties[] = "invalid value for 'ch_acc_change_ind', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['ch_acc_change_ind']) && !preg_match("/^\\d+$/", $this->container['ch_acc_change_ind'])) {
            $invalidProperties[] = "invalid value for 'ch_acc_change_ind', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['ship_addr_city']) && (mb_strlen($this->container['ship_addr_city']) > 50)) {
            $invalidProperties[] = "invalid value for 'ship_addr_city', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['ship_addr_city']) && (mb_strlen($this->container['ship_addr_city']) < 1)) {
            $invalidProperties[] = "invalid value for 'ship_addr_city', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['ship_addr_city']) && !preg_match("/^[ -~А-Яа-яЁё№]*$/", $this->container['ship_addr_city'])) {
            $invalidProperties[] = "invalid value for 'ship_addr_city', must be conform to the pattern /^[ -~А-Яа-яЁё№]*$/.";
        }

        if (!is_null($this->container['ship_delivery_point_id']) && (mb_strlen($this->container['ship_delivery_point_id']) > 50)) {
            $invalidProperties[] = "invalid value for 'ship_delivery_point_id', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['ship_delivery_point_id']) && (mb_strlen($this->container['ship_delivery_point_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'ship_delivery_point_id', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['ship_delivery_point_id']) && !preg_match("/^[ -~А-Яа-яЁё№]*$/", $this->container['ship_delivery_point_id'])) {
            $invalidProperties[] = "invalid value for 'ship_delivery_point_id', must be conform to the pattern /^[ -~А-Яа-яЁё№]*$/.";
        }

        if (!is_null($this->container['mri_reorder_items_ind']) && (mb_strlen($this->container['mri_reorder_items_ind']) > 2)) {
            $invalidProperties[] = "invalid value for 'mri_reorder_items_ind', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['mri_reorder_items_ind']) && (mb_strlen($this->container['mri_reorder_items_ind']) < 2)) {
            $invalidProperties[] = "invalid value for 'mri_reorder_items_ind', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['mri_reorder_items_ind']) && !preg_match("/^\\d+$/", $this->container['mri_reorder_items_ind'])) {
            $invalidProperties[] = "invalid value for 'mri_reorder_items_ind', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['mobile_phone']) && (mb_strlen($this->container['mobile_phone']) > 19)) {
            $invalidProperties[] = "invalid value for 'mobile_phone', the character length must be smaller than or equal to 19.";
        }

        if (!is_null($this->container['mobile_phone']) && (mb_strlen($this->container['mobile_phone']) < 1)) {
            $invalidProperties[] = "invalid value for 'mobile_phone', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['mobile_phone']) && !preg_match("/^[\\d\\-]*$/", $this->container['mobile_phone'])) {
            $invalidProperties[] = "invalid value for 'mobile_phone', must be conform to the pattern /^[\\d\\-]*$/.";
        }

        if (!is_null($this->container['ship_name_indicator']) && (mb_strlen($this->container['ship_name_indicator']) > 2)) {
            $invalidProperties[] = "invalid value for 'ship_name_indicator', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['ship_name_indicator']) && (mb_strlen($this->container['ship_name_indicator']) < 2)) {
            $invalidProperties[] = "invalid value for 'ship_name_indicator', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['ship_name_indicator']) && !preg_match("/^\\d+$/", $this->container['ship_name_indicator'])) {
            $invalidProperties[] = "invalid value for 'ship_name_indicator', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['suspicious_acc_activity']) && (mb_strlen($this->container['suspicious_acc_activity']) > 2)) {
            $invalidProperties[] = "invalid value for 'suspicious_acc_activity', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['suspicious_acc_activity']) && (mb_strlen($this->container['suspicious_acc_activity']) < 2)) {
            $invalidProperties[] = "invalid value for 'suspicious_acc_activity', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['suspicious_acc_activity']) && !preg_match("/^\\d+$/", $this->container['suspicious_acc_activity'])) {
            $invalidProperties[] = "invalid value for 'suspicious_acc_activity', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['provision_attempts_day']) && (mb_strlen($this->container['provision_attempts_day']) > 4)) {
            $invalidProperties[] = "invalid value for 'provision_attempts_day', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['provision_attempts_day']) && (mb_strlen($this->container['provision_attempts_day']) < 1)) {
            $invalidProperties[] = "invalid value for 'provision_attempts_day', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['provision_attempts_day']) && !preg_match("/^\\d+$/", $this->container['provision_attempts_day'])) {
            $invalidProperties[] = "invalid value for 'provision_attempts_day', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['ship_addr_line1']) && (mb_strlen($this->container['ship_addr_line1']) > 50)) {
            $invalidProperties[] = "invalid value for 'ship_addr_line1', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['ship_addr_line1']) && (mb_strlen($this->container['ship_addr_line1']) < 1)) {
            $invalidProperties[] = "invalid value for 'ship_addr_line1', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['ship_addr_line1']) && !preg_match("/^[ -~А-Яа-яЁё№]*$/", $this->container['ship_addr_line1'])) {
            $invalidProperties[] = "invalid value for 'ship_addr_line1', must be conform to the pattern /^[ -~А-Яа-яЁё№]*$/.";
        }

        if (!is_null($this->container['ship_addr_line2']) && (mb_strlen($this->container['ship_addr_line2']) > 50)) {
            $invalidProperties[] = "invalid value for 'ship_addr_line2', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['ship_addr_line2']) && (mb_strlen($this->container['ship_addr_line2']) < 1)) {
            $invalidProperties[] = "invalid value for 'ship_addr_line2', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['ship_addr_line2']) && !preg_match("/^[ -~А-Яа-яЁё№]*$/", $this->container['ship_addr_line2'])) {
            $invalidProperties[] = "invalid value for 'ship_addr_line2', must be conform to the pattern /^[ -~А-Яа-яЁё№]*$/.";
        }

        if (!is_null($this->container['ship_addr_line3']) && (mb_strlen($this->container['ship_addr_line3']) > 50)) {
            $invalidProperties[] = "invalid value for 'ship_addr_line3', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['ship_addr_line3']) && (mb_strlen($this->container['ship_addr_line3']) < 1)) {
            $invalidProperties[] = "invalid value for 'ship_addr_line3', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['ship_addr_line3']) && !preg_match("/^[ -~А-Яа-яЁё№]*$/", $this->container['ship_addr_line3'])) {
            $invalidProperties[] = "invalid value for 'ship_addr_line3', must be conform to the pattern /^[ -~А-Яа-яЁё№]*$/.";
        }

        if (!is_null($this->container['ship_address_usage']) && (mb_strlen($this->container['ship_address_usage']) > 8)) {
            $invalidProperties[] = "invalid value for 'ship_address_usage', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['ship_address_usage']) && (mb_strlen($this->container['ship_address_usage']) < 8)) {
            $invalidProperties[] = "invalid value for 'ship_address_usage', the character length must be bigger than or equal to 8.";
        }

        if (!is_null($this->container['ship_address_usage']) && !preg_match("/^\\d+$/", $this->container['ship_address_usage'])) {
            $invalidProperties[] = "invalid value for 'ship_address_usage', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['ship_address_usage_ind']) && (mb_strlen($this->container['ship_address_usage_ind']) > 2)) {
            $invalidProperties[] = "invalid value for 'ship_address_usage_ind', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['ship_address_usage_ind']) && (mb_strlen($this->container['ship_address_usage_ind']) < 2)) {
            $invalidProperties[] = "invalid value for 'ship_address_usage_ind', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['ship_address_usage_ind']) && !preg_match("/^\\d+$/", $this->container['ship_address_usage_ind'])) {
            $invalidProperties[] = "invalid value for 'ship_address_usage_ind', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['mri_delivery_timeframe']) && (mb_strlen($this->container['mri_delivery_timeframe']) > 2)) {
            $invalidProperties[] = "invalid value for 'mri_delivery_timeframe', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['mri_delivery_timeframe']) && (mb_strlen($this->container['mri_delivery_timeframe']) < 1)) {
            $invalidProperties[] = "invalid value for 'mri_delivery_timeframe', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['mri_delivery_timeframe']) && !preg_match("/^\\d+$/", $this->container['mri_delivery_timeframe'])) {
            $invalidProperties[] = "invalid value for 'mri_delivery_timeframe', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['mri_ship_indicator']) && (mb_strlen($this->container['mri_ship_indicator']) > 2)) {
            $invalidProperties[] = "invalid value for 'mri_ship_indicator', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['mri_ship_indicator']) && (mb_strlen($this->container['mri_ship_indicator']) < 2)) {
            $invalidProperties[] = "invalid value for 'mri_ship_indicator', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['mri_ship_indicator']) && !preg_match("/^\\d+$/", $this->container['mri_ship_indicator'])) {
            $invalidProperties[] = "invalid value for 'mri_ship_indicator', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['ch_acc_pw_change']) && (mb_strlen($this->container['ch_acc_pw_change']) > 8)) {
            $invalidProperties[] = "invalid value for 'ch_acc_pw_change', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['ch_acc_pw_change']) && (mb_strlen($this->container['ch_acc_pw_change']) < 8)) {
            $invalidProperties[] = "invalid value for 'ch_acc_pw_change', the character length must be bigger than or equal to 8.";
        }

        if (!is_null($this->container['ch_acc_pw_change']) && !preg_match("/^\\d+$/", $this->container['ch_acc_pw_change'])) {
            $invalidProperties[] = "invalid value for 'ch_acc_pw_change', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['ch_acc_pw_change_ind']) && (mb_strlen($this->container['ch_acc_pw_change_ind']) > 2)) {
            $invalidProperties[] = "invalid value for 'ch_acc_pw_change_ind', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['ch_acc_pw_change_ind']) && (mb_strlen($this->container['ch_acc_pw_change_ind']) < 2)) {
            $invalidProperties[] = "invalid value for 'ch_acc_pw_change_ind', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['ch_acc_pw_change_ind']) && !preg_match("/^\\d+$/", $this->container['ch_acc_pw_change_ind'])) {
            $invalidProperties[] = "invalid value for 'ch_acc_pw_change_ind', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['nb_purchase_account']) && (mb_strlen($this->container['nb_purchase_account']) > 4)) {
            $invalidProperties[] = "invalid value for 'nb_purchase_account', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['nb_purchase_account']) && (mb_strlen($this->container['nb_purchase_account']) < 1)) {
            $invalidProperties[] = "invalid value for 'nb_purchase_account', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['nb_purchase_account']) && !preg_match("/^\\d+$/", $this->container['nb_purchase_account'])) {
            $invalidProperties[] = "invalid value for 'nb_purchase_account', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['txn_activity_day']) && (mb_strlen($this->container['txn_activity_day']) > 3)) {
            $invalidProperties[] = "invalid value for 'txn_activity_day', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['txn_activity_day']) && (mb_strlen($this->container['txn_activity_day']) < 1)) {
            $invalidProperties[] = "invalid value for 'txn_activity_day', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['txn_activity_day']) && !preg_match("/^\\d+$/", $this->container['txn_activity_day'])) {
            $invalidProperties[] = "invalid value for 'txn_activity_day', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['txn_activity_year']) && (mb_strlen($this->container['txn_activity_year']) > 3)) {
            $invalidProperties[] = "invalid value for 'txn_activity_year', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['txn_activity_year']) && (mb_strlen($this->container['txn_activity_year']) < 1)) {
            $invalidProperties[] = "invalid value for 'txn_activity_year', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['txn_activity_year']) && !preg_match("/^\\d+$/", $this->container['txn_activity_year'])) {
            $invalidProperties[] = "invalid value for 'txn_activity_year', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['payment_acc_age']) && (mb_strlen($this->container['payment_acc_age']) > 8)) {
            $invalidProperties[] = "invalid value for 'payment_acc_age', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['payment_acc_age']) && (mb_strlen($this->container['payment_acc_age']) < 8)) {
            $invalidProperties[] = "invalid value for 'payment_acc_age', the character length must be bigger than or equal to 8.";
        }

        if (!is_null($this->container['payment_acc_age']) && !preg_match("/^\\d+$/", $this->container['payment_acc_age'])) {
            $invalidProperties[] = "invalid value for 'payment_acc_age', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['payment_acc_ind']) && (mb_strlen($this->container['payment_acc_ind']) > 2)) {
            $invalidProperties[] = "invalid value for 'payment_acc_ind', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['payment_acc_ind']) && (mb_strlen($this->container['payment_acc_ind']) < 2)) {
            $invalidProperties[] = "invalid value for 'payment_acc_ind', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['payment_acc_ind']) && !preg_match("/^\\d+$/", $this->container['payment_acc_ind'])) {
            $invalidProperties[] = "invalid value for 'payment_acc_ind', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['ch_acc_change']) && (mb_strlen($this->container['ch_acc_change']) > 8)) {
            $invalidProperties[] = "invalid value for 'ch_acc_change', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['ch_acc_change']) && (mb_strlen($this->container['ch_acc_change']) < 8)) {
            $invalidProperties[] = "invalid value for 'ch_acc_change', the character length must be bigger than or equal to 8.";
        }

        if (!is_null($this->container['ch_acc_change']) && !preg_match("/^\\d+$/", $this->container['ch_acc_change'])) {
            $invalidProperties[] = "invalid value for 'ch_acc_change', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['app_deep_link']) && (mb_strlen($this->container['app_deep_link']) > 255)) {
            $invalidProperties[] = "invalid value for 'app_deep_link', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['app_deep_link']) && (mb_strlen($this->container['app_deep_link']) < 1)) {
            $invalidProperties[] = "invalid value for 'app_deep_link', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['app_deep_link']) && !preg_match("/^[ -~]*$/", $this->container['app_deep_link'])) {
            $invalidProperties[] = "invalid value for 'app_deep_link', must be conform to the pattern /^[ -~]*$/.";
        }

        if (!is_null($this->container['sberpay_backurl']) && (mb_strlen($this->container['sberpay_backurl']) > 255)) {
            $invalidProperties[] = "invalid value for 'sberpay_backurl', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['sberpay_backurl']) && (mb_strlen($this->container['sberpay_backurl']) < 1)) {
            $invalidProperties[] = "invalid value for 'sberpay_backurl', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['sberpay_backurl']) && !preg_match("/^[ -~]*$/", $this->container['sberpay_backurl'])) {
            $invalidProperties[] = "invalid value for 'sberpay_backurl', must be conform to the pattern /^[ -~]*$/.";
        }

        if ($this->container['qr_type'] === null) {
            $invalidProperties[] = "'qr_type' can't be null";
        }
        $allowedValues = $this->getQrTypeAllowableValues();
        if (!is_null($this->container['qr_type']) && !in_array($this->container['qr_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'qr_type', must be one of '%s'",
                $this->container['qr_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSbpScenarioAllowableValues();
        if (!is_null($this->container['sbp_scenario']) && !in_array($this->container['sbp_scenario'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'sbp_scenario', must be one of '%s'",
                $this->container['sbp_scenario'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['sbp_subscription_purpose']) && (mb_strlen($this->container['sbp_subscription_purpose']) > 256)) {
            $invalidProperties[] = "invalid value for 'sbp_subscription_purpose', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['sbp_subscription_purpose']) && !preg_match("/^[ -~А-Яа-яЁё№]*$/", $this->container['sbp_subscription_purpose'])) {
            $invalidProperties[] = "invalid value for 'sbp_subscription_purpose', must be conform to the pattern /^[ -~А-Яа-яЁё№]*$/.";
        }

        if (!is_null($this->container['back_to_shop_name']) && (mb_strlen($this->container['back_to_shop_name']) > 200)) {
            $invalidProperties[] = "invalid value for 'back_to_shop_name', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['back_to_shop_name']) && (mb_strlen($this->container['back_to_shop_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'back_to_shop_name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['back_to_shop_name']) && !preg_match("/^[ -~А-Яа-яЁё№]*$/", $this->container['back_to_shop_name'])) {
            $invalidProperties[] = "invalid value for 'back_to_shop_name', must be conform to the pattern /^[ -~А-Яа-яЁё№]*$/.";
        }

        if (!is_null($this->container['back_to_shop_url']) && (mb_strlen($this->container['back_to_shop_url']) > 200)) {
            $invalidProperties[] = "invalid value for 'back_to_shop_url', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['back_to_shop_url']) && (mb_strlen($this->container['back_to_shop_url']) < 1)) {
            $invalidProperties[] = "invalid value for 'back_to_shop_url', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['back_to_shop_url']) && !preg_match("/^https?:\/\/(.*)$/", $this->container['back_to_shop_url'])) {
            $invalidProperties[] = "invalid value for 'back_to_shop_url', must be conform to the pattern /^https?:\/\/(.*)$/.";
        }

        if (!is_null($this->container['dest_wallet_num']) && (mb_strlen($this->container['dest_wallet_num']) > 30)) {
            $invalidProperties[] = "invalid value for 'dest_wallet_num', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['dest_wallet_num']) && (mb_strlen($this->container['dest_wallet_num']) < 1)) {
            $invalidProperties[] = "invalid value for 'dest_wallet_num', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['dest_wallet_num']) && !preg_match("/^[ -~]*$/", $this->container['dest_wallet_num'])) {
            $invalidProperties[] = "invalid value for 'dest_wallet_num', must be conform to the pattern /^[ -~]*$/.";
        }

        if (!is_null($this->container['dest_phone_num']) && (mb_strlen($this->container['dest_phone_num']) > 30)) {
            $invalidProperties[] = "invalid value for 'dest_phone_num', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['dest_phone_num']) && (mb_strlen($this->container['dest_phone_num']) < 1)) {
            $invalidProperties[] = "invalid value for 'dest_phone_num', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['dest_phone_num']) && !preg_match("/^(\\+?)\\d{7,15}$/", $this->container['dest_phone_num'])) {
            $invalidProperties[] = "invalid value for 'dest_phone_num', must be conform to the pattern /^(\\+?)\\d{7,15}$/.";
        }

        if (!is_null($this->container['dest_card_num']) && (mb_strlen($this->container['dest_card_num']) > 19)) {
            $invalidProperties[] = "invalid value for 'dest_card_num', the character length must be smaller than or equal to 19.";
        }

        if (!is_null($this->container['dest_card_num']) && (mb_strlen($this->container['dest_card_num']) < 13)) {
            $invalidProperties[] = "invalid value for 'dest_card_num', the character length must be bigger than or equal to 13.";
        }

        if (!is_null($this->container['dest_card_num']) && !preg_match("/^\\d+$/", $this->container['dest_card_num'])) {
            $invalidProperties[] = "invalid value for 'dest_card_num', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['dest_acct_num']) && (mb_strlen($this->container['dest_acct_num']) > 29)) {
            $invalidProperties[] = "invalid value for 'dest_acct_num', the character length must be smaller than or equal to 29.";
        }

        if (!is_null($this->container['dest_acct_num']) && (mb_strlen($this->container['dest_acct_num']) < 1)) {
            $invalidProperties[] = "invalid value for 'dest_acct_num', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['dest_acct_num']) && !preg_match("/^\\d+$/", $this->container['dest_acct_num'])) {
            $invalidProperties[] = "invalid value for 'dest_acct_num', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['bill_addr_city']) && (mb_strlen($this->container['bill_addr_city']) > 50)) {
            $invalidProperties[] = "invalid value for 'bill_addr_city', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['bill_addr_city']) && (mb_strlen($this->container['bill_addr_city']) < 1)) {
            $invalidProperties[] = "invalid value for 'bill_addr_city', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['bill_addr_city']) && !preg_match("/^[ -~А-Яа-яЁё№]*$/", $this->container['bill_addr_city'])) {
            $invalidProperties[] = "invalid value for 'bill_addr_city', must be conform to the pattern /^[ -~А-Яа-яЁё№]*$/.";
        }

        if (!is_null($this->container['bill_addr_country']) && (mb_strlen($this->container['bill_addr_country']) > 3)) {
            $invalidProperties[] = "invalid value for 'bill_addr_country', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['bill_addr_country']) && (mb_strlen($this->container['bill_addr_country']) < 1)) {
            $invalidProperties[] = "invalid value for 'bill_addr_country', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['bill_addr_country']) && !preg_match("/^\\d+$/", $this->container['bill_addr_country'])) {
            $invalidProperties[] = "invalid value for 'bill_addr_country', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['bill_addr_line1']) && (mb_strlen($this->container['bill_addr_line1']) > 50)) {
            $invalidProperties[] = "invalid value for 'bill_addr_line1', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['bill_addr_line1']) && (mb_strlen($this->container['bill_addr_line1']) < 1)) {
            $invalidProperties[] = "invalid value for 'bill_addr_line1', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['bill_addr_line1']) && !preg_match("/^[ -~А-Яа-яЁё№]*$/", $this->container['bill_addr_line1'])) {
            $invalidProperties[] = "invalid value for 'bill_addr_line1', must be conform to the pattern /^[ -~А-Яа-яЁё№]*$/.";
        }

        if (!is_null($this->container['bill_addr_line2']) && (mb_strlen($this->container['bill_addr_line2']) > 50)) {
            $invalidProperties[] = "invalid value for 'bill_addr_line2', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['bill_addr_line2']) && (mb_strlen($this->container['bill_addr_line2']) < 1)) {
            $invalidProperties[] = "invalid value for 'bill_addr_line2', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['bill_addr_line2']) && !preg_match("/^[ -~А-Яа-яЁё№]*$/", $this->container['bill_addr_line2'])) {
            $invalidProperties[] = "invalid value for 'bill_addr_line2', must be conform to the pattern /^[ -~А-Яа-яЁё№]*$/.";
        }

        if (!is_null($this->container['bill_addr_line3']) && (mb_strlen($this->container['bill_addr_line3']) > 50)) {
            $invalidProperties[] = "invalid value for 'bill_addr_line3', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['bill_addr_line3']) && (mb_strlen($this->container['bill_addr_line3']) < 1)) {
            $invalidProperties[] = "invalid value for 'bill_addr_line3', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['bill_addr_line3']) && !preg_match("/^[ -~А-Яа-яЁё№]*$/", $this->container['bill_addr_line3'])) {
            $invalidProperties[] = "invalid value for 'bill_addr_line3', must be conform to the pattern /^[ -~А-Яа-яЁё№]*$/.";
        }

        if (!is_null($this->container['bill_addr_post_code']) && (mb_strlen($this->container['bill_addr_post_code']) > 16)) {
            $invalidProperties[] = "invalid value for 'bill_addr_post_code', the character length must be smaller than or equal to 16.";
        }

        if (!is_null($this->container['bill_addr_post_code']) && (mb_strlen($this->container['bill_addr_post_code']) < 1)) {
            $invalidProperties[] = "invalid value for 'bill_addr_post_code', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['bill_addr_post_code']) && !preg_match("/^[ -~]*$/", $this->container['bill_addr_post_code'])) {
            $invalidProperties[] = "invalid value for 'bill_addr_post_code', must be conform to the pattern /^[ -~]*$/.";
        }

        if (!is_null($this->container['bill_addr_state']) && (mb_strlen($this->container['bill_addr_state']) > 3)) {
            $invalidProperties[] = "invalid value for 'bill_addr_state', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['bill_addr_state']) && (mb_strlen($this->container['bill_addr_state']) < 1)) {
            $invalidProperties[] = "invalid value for 'bill_addr_state', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['bill_addr_state']) && !preg_match("/^[ -~]*$/", $this->container['bill_addr_state'])) {
            $invalidProperties[] = "invalid value for 'bill_addr_state', must be conform to the pattern /^[ -~]*$/.";
        }

        if (!is_null($this->container['ship_addr_country']) && (mb_strlen($this->container['ship_addr_country']) > 3)) {
            $invalidProperties[] = "invalid value for 'ship_addr_country', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['ship_addr_country']) && (mb_strlen($this->container['ship_addr_country']) < 1)) {
            $invalidProperties[] = "invalid value for 'ship_addr_country', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['ship_addr_country']) && !preg_match("/^\\d+$/", $this->container['ship_addr_country'])) {
            $invalidProperties[] = "invalid value for 'ship_addr_country', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['ship_addr_post_code']) && (mb_strlen($this->container['ship_addr_post_code']) > 16)) {
            $invalidProperties[] = "invalid value for 'ship_addr_post_code', the character length must be smaller than or equal to 16.";
        }

        if (!is_null($this->container['ship_addr_post_code']) && (mb_strlen($this->container['ship_addr_post_code']) < 1)) {
            $invalidProperties[] = "invalid value for 'ship_addr_post_code', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['ship_addr_post_code']) && !preg_match("/^[ -~]*$/", $this->container['ship_addr_post_code'])) {
            $invalidProperties[] = "invalid value for 'ship_addr_post_code', must be conform to the pattern /^[ -~]*$/.";
        }

        if (!is_null($this->container['ship_addr_state']) && (mb_strlen($this->container['ship_addr_state']) > 3)) {
            $invalidProperties[] = "invalid value for 'ship_addr_state', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['ship_addr_state']) && (mb_strlen($this->container['ship_addr_state']) < 1)) {
            $invalidProperties[] = "invalid value for 'ship_addr_state', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['ship_addr_state']) && !preg_match("/^[ -~]*$/", $this->container['ship_addr_state'])) {
            $invalidProperties[] = "invalid value for 'ship_addr_state', must be conform to the pattern /^[ -~]*$/.";
        }

        if (!is_null($this->container['work_phone']) && (mb_strlen($this->container['work_phone']) > 19)) {
            $invalidProperties[] = "invalid value for 'work_phone', the character length must be smaller than or equal to 19.";
        }

        if (!is_null($this->container['work_phone']) && (mb_strlen($this->container['work_phone']) < 1)) {
            $invalidProperties[] = "invalid value for 'work_phone', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['work_phone']) && !preg_match("/^[\\d\\-]*$/", $this->container['work_phone'])) {
            $invalidProperties[] = "invalid value for 'work_phone', must be conform to the pattern /^[\\d\\-]*$/.";
        }

        if (!is_null($this->container['home_phone']) && (mb_strlen($this->container['home_phone']) > 19)) {
            $invalidProperties[] = "invalid value for 'home_phone', the character length must be smaller than or equal to 19.";
        }

        if (!is_null($this->container['home_phone']) && (mb_strlen($this->container['home_phone']) < 1)) {
            $invalidProperties[] = "invalid value for 'home_phone', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['home_phone']) && !preg_match("/^[\\d\\-]*$/", $this->container['home_phone'])) {
            $invalidProperties[] = "invalid value for 'home_phone', must be conform to the pattern /^[\\d\\-]*$/.";
        }

        if (!is_null($this->container['mri_delivery_email_address']) && (mb_strlen($this->container['mri_delivery_email_address']) > 254)) {
            $invalidProperties[] = "invalid value for 'mri_delivery_email_address', the character length must be smaller than or equal to 254.";
        }

        if (!is_null($this->container['mri_delivery_email_address']) && (mb_strlen($this->container['mri_delivery_email_address']) < 1)) {
            $invalidProperties[] = "invalid value for 'mri_delivery_email_address', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['mri_delivery_email_address']) && !preg_match("/^[ -~]*$/", $this->container['mri_delivery_email_address'])) {
            $invalidProperties[] = "invalid value for 'mri_delivery_email_address', must be conform to the pattern /^[ -~]*$/.";
        }

        if (!is_null($this->container['mri_gift_card_amount']) && (mb_strlen($this->container['mri_gift_card_amount']) > 2)) {
            $invalidProperties[] = "invalid value for 'mri_gift_card_amount', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['mri_gift_card_amount']) && (mb_strlen($this->container['mri_gift_card_amount']) < 1)) {
            $invalidProperties[] = "invalid value for 'mri_gift_card_amount', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['mri_gift_card_amount']) && !preg_match("/^\\d+$/", $this->container['mri_gift_card_amount'])) {
            $invalidProperties[] = "invalid value for 'mri_gift_card_amount', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['mri_gift_card_count']) && (mb_strlen($this->container['mri_gift_card_count']) > 2)) {
            $invalidProperties[] = "invalid value for 'mri_gift_card_count', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['mri_gift_card_count']) && (mb_strlen($this->container['mri_gift_card_count']) < 1)) {
            $invalidProperties[] = "invalid value for 'mri_gift_card_count', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['mri_gift_card_count']) && !preg_match("/^\\d+$/", $this->container['mri_gift_card_count'])) {
            $invalidProperties[] = "invalid value for 'mri_gift_card_count', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['mri_gift_card_curr']) && (mb_strlen($this->container['mri_gift_card_curr']) > 3)) {
            $invalidProperties[] = "invalid value for 'mri_gift_card_curr', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['mri_gift_card_curr']) && (mb_strlen($this->container['mri_gift_card_curr']) < 1)) {
            $invalidProperties[] = "invalid value for 'mri_gift_card_curr', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['mri_gift_card_curr']) && !preg_match("/^\\d+$/", $this->container['mri_gift_card_curr'])) {
            $invalidProperties[] = "invalid value for 'mri_gift_card_curr', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['mri_pre_order_date']) && (mb_strlen($this->container['mri_pre_order_date']) > 8)) {
            $invalidProperties[] = "invalid value for 'mri_pre_order_date', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['mri_pre_order_date']) && (mb_strlen($this->container['mri_pre_order_date']) < 8)) {
            $invalidProperties[] = "invalid value for 'mri_pre_order_date', the character length must be bigger than or equal to 8.";
        }

        if (!is_null($this->container['mri_pre_order_date']) && !preg_match("/^\\d+$/", $this->container['mri_pre_order_date'])) {
            $invalidProperties[] = "invalid value for 'mri_pre_order_date', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['mri_pre_order_purchase_ind']) && (mb_strlen($this->container['mri_pre_order_purchase_ind']) > 2)) {
            $invalidProperties[] = "invalid value for 'mri_pre_order_purchase_ind', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['mri_pre_order_purchase_ind']) && (mb_strlen($this->container['mri_pre_order_purchase_ind']) < 2)) {
            $invalidProperties[] = "invalid value for 'mri_pre_order_purchase_ind', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['mri_pre_order_purchase_ind']) && !preg_match("/^\\d+$/", $this->container['mri_pre_order_purchase_ind'])) {
            $invalidProperties[] = "invalid value for 'mri_pre_order_purchase_ind', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['three_ds_req_prior_auth_data']) && (mb_strlen($this->container['three_ds_req_prior_auth_data']) > 2048)) {
            $invalidProperties[] = "invalid value for 'three_ds_req_prior_auth_data', the character length must be smaller than or equal to 2048.";
        }

        if (!is_null($this->container['three_ds_req_prior_auth_data']) && (mb_strlen($this->container['three_ds_req_prior_auth_data']) < 1)) {
            $invalidProperties[] = "invalid value for 'three_ds_req_prior_auth_data', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['three_ds_req_prior_auth_data']) && !preg_match("/^[ -~]*$/", $this->container['three_ds_req_prior_auth_data'])) {
            $invalidProperties[] = "invalid value for 'three_ds_req_prior_auth_data', must be conform to the pattern /^[ -~]*$/.";
        }

        if (!is_null($this->container['three_ds_req_prior_auth_method']) && (mb_strlen($this->container['three_ds_req_prior_auth_method']) > 2)) {
            $invalidProperties[] = "invalid value for 'three_ds_req_prior_auth_method', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['three_ds_req_prior_auth_method']) && (mb_strlen($this->container['three_ds_req_prior_auth_method']) < 2)) {
            $invalidProperties[] = "invalid value for 'three_ds_req_prior_auth_method', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['three_ds_req_prior_auth_method']) && !preg_match("/^\\d+$/", $this->container['three_ds_req_prior_auth_method'])) {
            $invalidProperties[] = "invalid value for 'three_ds_req_prior_auth_method', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['three_ds_req_prior_auth_timestamp']) && (mb_strlen($this->container['three_ds_req_prior_auth_timestamp']) > 12)) {
            $invalidProperties[] = "invalid value for 'three_ds_req_prior_auth_timestamp', the character length must be smaller than or equal to 12.";
        }

        if (!is_null($this->container['three_ds_req_prior_auth_timestamp']) && (mb_strlen($this->container['three_ds_req_prior_auth_timestamp']) < 12)) {
            $invalidProperties[] = "invalid value for 'three_ds_req_prior_auth_timestamp', the character length must be bigger than or equal to 12.";
        }

        if (!is_null($this->container['three_ds_req_prior_auth_timestamp']) && !preg_match("/^\\d+$/", $this->container['three_ds_req_prior_auth_timestamp'])) {
            $invalidProperties[] = "invalid value for 'three_ds_req_prior_auth_timestamp', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['three_ds_req_prior_ref']) && (mb_strlen($this->container['three_ds_req_prior_ref']) > 36)) {
            $invalidProperties[] = "invalid value for 'three_ds_req_prior_ref', the character length must be smaller than or equal to 36.";
        }

        if (!is_null($this->container['three_ds_req_prior_ref']) && (mb_strlen($this->container['three_ds_req_prior_ref']) < 36)) {
            $invalidProperties[] = "invalid value for 'three_ds_req_prior_ref', the character length must be bigger than or equal to 36.";
        }

        if (!is_null($this->container['three_ds_req_prior_ref']) && !preg_match("/^[ -~]*$/", $this->container['three_ds_req_prior_ref'])) {
            $invalidProperties[] = "invalid value for 'three_ds_req_prior_ref', must be conform to the pattern /^[ -~]*$/.";
        }

        if (!is_null($this->container['three_ds_req_auth_data']) && (mb_strlen($this->container['three_ds_req_auth_data']) > 20000)) {
            $invalidProperties[] = "invalid value for 'three_ds_req_auth_data', the character length must be smaller than or equal to 20000.";
        }

        if (!is_null($this->container['three_ds_req_auth_data']) && (mb_strlen($this->container['three_ds_req_auth_data']) < 2)) {
            $invalidProperties[] = "invalid value for 'three_ds_req_auth_data', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['three_ds_req_auth_data']) && !preg_match("/^[ -~]*$/", $this->container['three_ds_req_auth_data'])) {
            $invalidProperties[] = "invalid value for 'three_ds_req_auth_data', must be conform to the pattern /^[ -~]*$/.";
        }

        if (!is_null($this->container['three_ds_req_auth_method']) && (mb_strlen($this->container['three_ds_req_auth_method']) > 2)) {
            $invalidProperties[] = "invalid value for 'three_ds_req_auth_method', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['three_ds_req_auth_method']) && (mb_strlen($this->container['three_ds_req_auth_method']) < 2)) {
            $invalidProperties[] = "invalid value for 'three_ds_req_auth_method', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['three_ds_req_auth_method']) && !preg_match("/^\\d+$/", $this->container['three_ds_req_auth_method'])) {
            $invalidProperties[] = "invalid value for 'three_ds_req_auth_method', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['three_ds_req_auth_timestamp']) && (mb_strlen($this->container['three_ds_req_auth_timestamp']) > 12)) {
            $invalidProperties[] = "invalid value for 'three_ds_req_auth_timestamp', the character length must be smaller than or equal to 12.";
        }

        if (!is_null($this->container['three_ds_req_auth_timestamp']) && (mb_strlen($this->container['three_ds_req_auth_timestamp']) < 12)) {
            $invalidProperties[] = "invalid value for 'three_ds_req_auth_timestamp', the character length must be bigger than or equal to 12.";
        }

        if (!is_null($this->container['three_ds_req_auth_timestamp']) && !preg_match("/^\\d+$/", $this->container['three_ds_req_auth_timestamp'])) {
            $invalidProperties[] = "invalid value for 'three_ds_req_auth_timestamp', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['acct_type']) && (mb_strlen($this->container['acct_type']) > 2)) {
            $invalidProperties[] = "invalid value for 'acct_type', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['acct_type']) && (mb_strlen($this->container['acct_type']) < 2)) {
            $invalidProperties[] = "invalid value for 'acct_type', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['acct_type']) && !preg_match("/^\\d+$/", $this->container['acct_type'])) {
            $invalidProperties[] = "invalid value for 'acct_type', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['trans_type']) && (mb_strlen($this->container['trans_type']) > 2)) {
            $invalidProperties[] = "invalid value for 'trans_type', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['trans_type']) && (mb_strlen($this->container['trans_type']) < 2)) {
            $invalidProperties[] = "invalid value for 'trans_type', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['trans_type']) && !preg_match("/^\\d+$/", $this->container['trans_type'])) {
            $invalidProperties[] = "invalid value for 'trans_type', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['addr_match']) && (mb_strlen($this->container['addr_match']) > 1)) {
            $invalidProperties[] = "invalid value for 'addr_match', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['addr_match']) && (mb_strlen($this->container['addr_match']) < 1)) {
            $invalidProperties[] = "invalid value for 'addr_match', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['addr_match']) && !preg_match("/^[A-Za-z]*$/", $this->container['addr_match'])) {
            $invalidProperties[] = "invalid value for 'addr_match', must be conform to the pattern /^[A-Za-z]*$/.";
        }

        if (!is_null($this->container['three_ds_requestor_challenge_ind']) && (mb_strlen($this->container['three_ds_requestor_challenge_ind']) > 2)) {
            $invalidProperties[] = "invalid value for 'three_ds_requestor_challenge_ind', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['three_ds_requestor_challenge_ind']) && (mb_strlen($this->container['three_ds_requestor_challenge_ind']) < 2)) {
            $invalidProperties[] = "invalid value for 'three_ds_requestor_challenge_ind', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['three_ds_requestor_challenge_ind']) && !preg_match("/^\\d+$/", $this->container['three_ds_requestor_challenge_ind'])) {
            $invalidProperties[] = "invalid value for 'three_ds_requestor_challenge_ind', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['purchase_instal_data']) && (mb_strlen($this->container['purchase_instal_data']) > 3)) {
            $invalidProperties[] = "invalid value for 'purchase_instal_data', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['purchase_instal_data']) && (mb_strlen($this->container['purchase_instal_data']) < 1)) {
            $invalidProperties[] = "invalid value for 'purchase_instal_data', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['purchase_instal_data']) && !preg_match("/^\\d+$/", $this->container['purchase_instal_data'])) {
            $invalidProperties[] = "invalid value for 'purchase_instal_data', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['recurring_expiry']) && (mb_strlen($this->container['recurring_expiry']) > 8)) {
            $invalidProperties[] = "invalid value for 'recurring_expiry', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['recurring_expiry']) && (mb_strlen($this->container['recurring_expiry']) < 8)) {
            $invalidProperties[] = "invalid value for 'recurring_expiry', the character length must be bigger than or equal to 8.";
        }

        if (!is_null($this->container['recurring_expiry']) && !preg_match("/^\\d+$/", $this->container['recurring_expiry'])) {
            $invalidProperties[] = "invalid value for 'recurring_expiry', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['recurring_frequency']) && (mb_strlen($this->container['recurring_frequency']) > 4)) {
            $invalidProperties[] = "invalid value for 'recurring_frequency', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['recurring_frequency']) && (mb_strlen($this->container['recurring_frequency']) < 1)) {
            $invalidProperties[] = "invalid value for 'recurring_frequency', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['recurring_frequency']) && !preg_match("/^\\d+$/", $this->container['recurring_frequency'])) {
            $invalidProperties[] = "invalid value for 'recurring_frequency', must be conform to the pattern /^\\d+$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets has_valuable_items
     *
     * @return string|null
     */
    public function getHasValuableItems()
    {
        return $this->container['has_valuable_items'];
    }

    /**
     * Sets has_valuable_items
     *
     * @param string|null $has_valuable_items Маркер наличия высоколиквидной электроники в заказе:  * `00` = Не содержит высоколиквидной электроники;  * `01` = Содержит высоколиквидную электронику;
     *
     * @return self
     */
    public function setHasValuableItems($has_valuable_items)
    {
        if (is_null($has_valuable_items)) {
            throw new \InvalidArgumentException('non-nullable has_valuable_items cannot be null');
        }
        if ((mb_strlen($has_valuable_items) > 2)) {
            throw new \InvalidArgumentException('invalid length for $has_valuable_items when calling RegisterPreAuthRequestJsonParams., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($has_valuable_items) < 2)) {
            throw new \InvalidArgumentException('invalid length for $has_valuable_items when calling RegisterPreAuthRequestJsonParams., must be bigger than or equal to 2.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($has_valuable_items)))) {
            throw new \InvalidArgumentException("invalid value for \$has_valuable_items when calling RegisterPreAuthRequestJsonParams., must conform to the pattern /^\\d+$/.");
        }

        $this->container['has_valuable_items'] = $has_valuable_items;

        return $this;
    }

    /**
     * Gets acct_id
     *
     * @return string|null
     */
    public function getAcctId()
    {
        return $this->container['acct_id'];
    }

    /**
     * Sets acct_id
     *
     * @param string|null $acct_id Идентификатор аккаунта Плательщика в ТСП
     *
     * @return self
     */
    public function setAcctId($acct_id)
    {
        if (is_null($acct_id)) {
            throw new \InvalidArgumentException('non-nullable acct_id cannot be null');
        }
        if ((mb_strlen($acct_id) > 64)) {
            throw new \InvalidArgumentException('invalid length for $acct_id when calling RegisterPreAuthRequestJsonParams., must be smaller than or equal to 64.');
        }
        if ((mb_strlen($acct_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $acct_id when calling RegisterPreAuthRequestJsonParams., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~]*$/", ObjectSerializer::toString($acct_id)))) {
            throw new \InvalidArgumentException("invalid value for \$acct_id when calling RegisterPreAuthRequestJsonParams., must conform to the pattern /^[ -~]*$/.");
        }

        $this->container['acct_id'] = $acct_id;

        return $this;
    }

    /**
     * Gets ch_acc_date
     *
     * @return string|null
     */
    public function getChAccDate()
    {
        return $this->container['ch_acc_date'];
    }

    /**
     * Sets ch_acc_date
     *
     * @param string|null $ch_acc_date Дата создания аккаунта Плательщика в ТСП в формате YYYYMMDD
     *
     * @return self
     */
    public function setChAccDate($ch_acc_date)
    {
        if (is_null($ch_acc_date)) {
            throw new \InvalidArgumentException('non-nullable ch_acc_date cannot be null');
        }
        if ((mb_strlen($ch_acc_date) > 8)) {
            throw new \InvalidArgumentException('invalid length for $ch_acc_date when calling RegisterPreAuthRequestJsonParams., must be smaller than or equal to 8.');
        }
        if ((mb_strlen($ch_acc_date) < 8)) {
            throw new \InvalidArgumentException('invalid length for $ch_acc_date when calling RegisterPreAuthRequestJsonParams., must be bigger than or equal to 8.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($ch_acc_date)))) {
            throw new \InvalidArgumentException("invalid value for \$ch_acc_date when calling RegisterPreAuthRequestJsonParams., must conform to the pattern /^\\d+$/.");
        }

        $this->container['ch_acc_date'] = $ch_acc_date;

        return $this;
    }

    /**
     * Gets ch_acc_age_ind
     *
     * @return string|null
     */
    public function getChAccAgeInd()
    {
        return $this->container['ch_acc_age_ind'];
    }

    /**
     * Sets ch_acc_age_ind
     *
     * @param string|null $ch_acc_age_ind Возраст аккаунта Плательщика в ТСП:   * `01` = No account (guest check-out);   * `02` = Created during this transaction;   * `03` = Less than 30 days;   * `04` = 30-60 days;   * `05` = More than 60 days.
     *
     * @return self
     */
    public function setChAccAgeInd($ch_acc_age_ind)
    {
        if (is_null($ch_acc_age_ind)) {
            throw new \InvalidArgumentException('non-nullable ch_acc_age_ind cannot be null');
        }
        if ((mb_strlen($ch_acc_age_ind) > 2)) {
            throw new \InvalidArgumentException('invalid length for $ch_acc_age_ind when calling RegisterPreAuthRequestJsonParams., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($ch_acc_age_ind) < 2)) {
            throw new \InvalidArgumentException('invalid length for $ch_acc_age_ind when calling RegisterPreAuthRequestJsonParams., must be bigger than or equal to 2.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($ch_acc_age_ind)))) {
            throw new \InvalidArgumentException("invalid value for \$ch_acc_age_ind when calling RegisterPreAuthRequestJsonParams., must conform to the pattern /^\\d+$/.");
        }

        $this->container['ch_acc_age_ind'] = $ch_acc_age_ind;

        return $this;
    }

    /**
     * Gets ch_acc_change_ind
     *
     * @return string|null
     */
    public function getChAccChangeInd()
    {
        return $this->container['ch_acc_change_ind'];
    }

    /**
     * Sets ch_acc_change_ind
     *
     * @param string|null $ch_acc_change_ind Период времени с последнего редактирования аккаунта Плательщика в ТСП:   * `01` = Changed during this transaction;   * `02` = Less than 30 days;   * `03` = 30-60 days;   * `04` = More than 60 days.
     *
     * @return self
     */
    public function setChAccChangeInd($ch_acc_change_ind)
    {
        if (is_null($ch_acc_change_ind)) {
            throw new \InvalidArgumentException('non-nullable ch_acc_change_ind cannot be null');
        }
        if ((mb_strlen($ch_acc_change_ind) > 2)) {
            throw new \InvalidArgumentException('invalid length for $ch_acc_change_ind when calling RegisterPreAuthRequestJsonParams., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($ch_acc_change_ind) < 2)) {
            throw new \InvalidArgumentException('invalid length for $ch_acc_change_ind when calling RegisterPreAuthRequestJsonParams., must be bigger than or equal to 2.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($ch_acc_change_ind)))) {
            throw new \InvalidArgumentException("invalid value for \$ch_acc_change_ind when calling RegisterPreAuthRequestJsonParams., must conform to the pattern /^\\d+$/.");
        }

        $this->container['ch_acc_change_ind'] = $ch_acc_change_ind;

        return $this;
    }

    /**
     * Gets ship_addr_city
     *
     * @return string|null
     */
    public function getShipAddrCity()
    {
        return $this->container['ship_addr_city'];
    }

    /**
     * Sets ship_addr_city
     *
     * @param string|null $ship_addr_city Город доставки товара
     *
     * @return self
     */
    public function setShipAddrCity($ship_addr_city)
    {
        if (is_null($ship_addr_city)) {
            throw new \InvalidArgumentException('non-nullable ship_addr_city cannot be null');
        }
        if ((mb_strlen($ship_addr_city) > 50)) {
            throw new \InvalidArgumentException('invalid length for $ship_addr_city when calling RegisterPreAuthRequestJsonParams., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($ship_addr_city) < 1)) {
            throw new \InvalidArgumentException('invalid length for $ship_addr_city when calling RegisterPreAuthRequestJsonParams., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~А-Яа-яЁё№]*$/", ObjectSerializer::toString($ship_addr_city)))) {
            throw new \InvalidArgumentException("invalid value for \$ship_addr_city when calling RegisterPreAuthRequestJsonParams., must conform to the pattern /^[ -~А-Яа-яЁё№]*$/.");
        }

        $this->container['ship_addr_city'] = $ship_addr_city;

        return $this;
    }

    /**
     * Gets ship_delivery_point_id
     *
     * @return string|null
     */
    public function getShipDeliveryPointId()
    {
        return $this->container['ship_delivery_point_id'];
    }

    /**
     * Sets ship_delivery_point_id
     *
     * @param string|null $ship_delivery_point_id Идентификатор ПВЗ доставки товара
     *
     * @return self
     */
    public function setShipDeliveryPointId($ship_delivery_point_id)
    {
        if (is_null($ship_delivery_point_id)) {
            throw new \InvalidArgumentException('non-nullable ship_delivery_point_id cannot be null');
        }
        if ((mb_strlen($ship_delivery_point_id) > 50)) {
            throw new \InvalidArgumentException('invalid length for $ship_delivery_point_id when calling RegisterPreAuthRequestJsonParams., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($ship_delivery_point_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $ship_delivery_point_id when calling RegisterPreAuthRequestJsonParams., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~А-Яа-яЁё№]*$/", ObjectSerializer::toString($ship_delivery_point_id)))) {
            throw new \InvalidArgumentException("invalid value for \$ship_delivery_point_id when calling RegisterPreAuthRequestJsonParams., must conform to the pattern /^[ -~А-Яа-яЁё№]*$/.");
        }

        $this->container['ship_delivery_point_id'] = $ship_delivery_point_id;

        return $this;
    }

    /**
     * Gets mri_reorder_items_ind
     *
     * @return string|null
     */
    public function getMriReorderItemsInd()
    {
        return $this->container['mri_reorder_items_ind'];
    }

    /**
     * Sets mri_reorder_items_ind
     *
     * @param string|null $mri_reorder_items_ind Индикатор повторной покупки в ТСП:   * `01` = First time ordered;   * `02` = Reordered.
     *
     * @return self
     */
    public function setMriReorderItemsInd($mri_reorder_items_ind)
    {
        if (is_null($mri_reorder_items_ind)) {
            throw new \InvalidArgumentException('non-nullable mri_reorder_items_ind cannot be null');
        }
        if ((mb_strlen($mri_reorder_items_ind) > 2)) {
            throw new \InvalidArgumentException('invalid length for $mri_reorder_items_ind when calling RegisterPreAuthRequestJsonParams., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($mri_reorder_items_ind) < 2)) {
            throw new \InvalidArgumentException('invalid length for $mri_reorder_items_ind when calling RegisterPreAuthRequestJsonParams., must be bigger than or equal to 2.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($mri_reorder_items_ind)))) {
            throw new \InvalidArgumentException("invalid value for \$mri_reorder_items_ind when calling RegisterPreAuthRequestJsonParams., must conform to the pattern /^\\d+$/.");
        }

        $this->container['mri_reorder_items_ind'] = $mri_reorder_items_ind;

        return $this;
    }

    /**
     * Gets mobile_phone
     *
     * @return string|null
     */
    public function getMobilePhone()
    {
        return $this->container['mobile_phone'];
    }

    /**
     * Sets mobile_phone
     *
     * @param string|null $mobile_phone Мобильный телефон в формате \"код страны\"-\"номер телефона\" (например, 7-4951234567) согласно ITU-E.164
     *
     * @return self
     */
    public function setMobilePhone($mobile_phone)
    {
        if (is_null($mobile_phone)) {
            throw new \InvalidArgumentException('non-nullable mobile_phone cannot be null');
        }
        if ((mb_strlen($mobile_phone) > 19)) {
            throw new \InvalidArgumentException('invalid length for $mobile_phone when calling RegisterPreAuthRequestJsonParams., must be smaller than or equal to 19.');
        }
        if ((mb_strlen($mobile_phone) < 1)) {
            throw new \InvalidArgumentException('invalid length for $mobile_phone when calling RegisterPreAuthRequestJsonParams., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[\\d\\-]*$/", ObjectSerializer::toString($mobile_phone)))) {
            throw new \InvalidArgumentException("invalid value for \$mobile_phone when calling RegisterPreAuthRequestJsonParams., must conform to the pattern /^[\\d\\-]*$/.");
        }

        $this->container['mobile_phone'] = $mobile_phone;

        return $this;
    }

    /**
     * Gets ship_name_indicator
     *
     * @return string|null
     */
    public function getShipNameIndicator()
    {
        return $this->container['ship_name_indicator'];
    }

    /**
     * Sets ship_name_indicator
     *
     * @param string|null $ship_name_indicator Признак соответствия имени в аккаунте Плательщика и имени получателя заказа:   * `01` = Account Name identical to shipping Name;   * `02` = Account Name different than shipping Name.
     *
     * @return self
     */
    public function setShipNameIndicator($ship_name_indicator)
    {
        if (is_null($ship_name_indicator)) {
            throw new \InvalidArgumentException('non-nullable ship_name_indicator cannot be null');
        }
        if ((mb_strlen($ship_name_indicator) > 2)) {
            throw new \InvalidArgumentException('invalid length for $ship_name_indicator when calling RegisterPreAuthRequestJsonParams., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($ship_name_indicator) < 2)) {
            throw new \InvalidArgumentException('invalid length for $ship_name_indicator when calling RegisterPreAuthRequestJsonParams., must be bigger than or equal to 2.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($ship_name_indicator)))) {
            throw new \InvalidArgumentException("invalid value for \$ship_name_indicator when calling RegisterPreAuthRequestJsonParams., must conform to the pattern /^\\d+$/.");
        }

        $this->container['ship_name_indicator'] = $ship_name_indicator;

        return $this;
    }

    /**
     * Gets suspicious_acc_activity
     *
     * @return string|null
     */
    public function getSuspiciousAccActivity()
    {
        return $this->container['suspicious_acc_activity'];
    }

    /**
     * Sets suspicious_acc_activity
     *
     * @param string|null $suspicious_acc_activity Признак наличия случаев подозрительной активности (включая предыдущие случаи мошенничества) для аккаунта Плательщика:   * `01` = No suspicious activity has been observed;   * `02` = Suspicious activity has been observed.
     *
     * @return self
     */
    public function setSuspiciousAccActivity($suspicious_acc_activity)
    {
        if (is_null($suspicious_acc_activity)) {
            throw new \InvalidArgumentException('non-nullable suspicious_acc_activity cannot be null');
        }
        if ((mb_strlen($suspicious_acc_activity) > 2)) {
            throw new \InvalidArgumentException('invalid length for $suspicious_acc_activity when calling RegisterPreAuthRequestJsonParams., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($suspicious_acc_activity) < 2)) {
            throw new \InvalidArgumentException('invalid length for $suspicious_acc_activity when calling RegisterPreAuthRequestJsonParams., must be bigger than or equal to 2.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($suspicious_acc_activity)))) {
            throw new \InvalidArgumentException("invalid value for \$suspicious_acc_activity when calling RegisterPreAuthRequestJsonParams., must conform to the pattern /^\\d+$/.");
        }

        $this->container['suspicious_acc_activity'] = $suspicious_acc_activity;

        return $this;
    }

    /**
     * Gets provision_attempts_day
     *
     * @return string|null
     */
    public function getProvisionAttemptsDay()
    {
        return $this->container['provision_attempts_day'];
    }

    /**
     * Sets provision_attempts_day
     *
     * @param string|null $provision_attempts_day Количество попыток добавления карты за последние 24 часа
     *
     * @return self
     */
    public function setProvisionAttemptsDay($provision_attempts_day)
    {
        if (is_null($provision_attempts_day)) {
            throw new \InvalidArgumentException('non-nullable provision_attempts_day cannot be null');
        }
        if ((mb_strlen($provision_attempts_day) > 4)) {
            throw new \InvalidArgumentException('invalid length for $provision_attempts_day when calling RegisterPreAuthRequestJsonParams., must be smaller than or equal to 4.');
        }
        if ((mb_strlen($provision_attempts_day) < 1)) {
            throw new \InvalidArgumentException('invalid length for $provision_attempts_day when calling RegisterPreAuthRequestJsonParams., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($provision_attempts_day)))) {
            throw new \InvalidArgumentException("invalid value for \$provision_attempts_day when calling RegisterPreAuthRequestJsonParams., must conform to the pattern /^\\d+$/.");
        }

        $this->container['provision_attempts_day'] = $provision_attempts_day;

        return $this;
    }

    /**
     * Gets ship_addr_line1
     *
     * @return string|null
     */
    public function getShipAddrLine1()
    {
        return $this->container['ship_addr_line1'];
    }

    /**
     * Sets ship_addr_line1
     *
     * @param string|null $ship_addr_line1 Адрес доставки товара
     *
     * @return self
     */
    public function setShipAddrLine1($ship_addr_line1)
    {
        if (is_null($ship_addr_line1)) {
            throw new \InvalidArgumentException('non-nullable ship_addr_line1 cannot be null');
        }
        if ((mb_strlen($ship_addr_line1) > 50)) {
            throw new \InvalidArgumentException('invalid length for $ship_addr_line1 when calling RegisterPreAuthRequestJsonParams., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($ship_addr_line1) < 1)) {
            throw new \InvalidArgumentException('invalid length for $ship_addr_line1 when calling RegisterPreAuthRequestJsonParams., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~А-Яа-яЁё№]*$/", ObjectSerializer::toString($ship_addr_line1)))) {
            throw new \InvalidArgumentException("invalid value for \$ship_addr_line1 when calling RegisterPreAuthRequestJsonParams., must conform to the pattern /^[ -~А-Яа-яЁё№]*$/.");
        }

        $this->container['ship_addr_line1'] = $ship_addr_line1;

        return $this;
    }

    /**
     * Gets ship_addr_line2
     *
     * @return string|null
     */
    public function getShipAddrLine2()
    {
        return $this->container['ship_addr_line2'];
    }

    /**
     * Sets ship_addr_line2
     *
     * @param string|null $ship_addr_line2 Адрес доставки товара
     *
     * @return self
     */
    public function setShipAddrLine2($ship_addr_line2)
    {
        if (is_null($ship_addr_line2)) {
            throw new \InvalidArgumentException('non-nullable ship_addr_line2 cannot be null');
        }
        if ((mb_strlen($ship_addr_line2) > 50)) {
            throw new \InvalidArgumentException('invalid length for $ship_addr_line2 when calling RegisterPreAuthRequestJsonParams., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($ship_addr_line2) < 1)) {
            throw new \InvalidArgumentException('invalid length for $ship_addr_line2 when calling RegisterPreAuthRequestJsonParams., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~А-Яа-яЁё№]*$/", ObjectSerializer::toString($ship_addr_line2)))) {
            throw new \InvalidArgumentException("invalid value for \$ship_addr_line2 when calling RegisterPreAuthRequestJsonParams., must conform to the pattern /^[ -~А-Яа-яЁё№]*$/.");
        }

        $this->container['ship_addr_line2'] = $ship_addr_line2;

        return $this;
    }

    /**
     * Gets ship_addr_line3
     *
     * @return string|null
     */
    public function getShipAddrLine3()
    {
        return $this->container['ship_addr_line3'];
    }

    /**
     * Sets ship_addr_line3
     *
     * @param string|null $ship_addr_line3 Адрес доставки товара
     *
     * @return self
     */
    public function setShipAddrLine3($ship_addr_line3)
    {
        if (is_null($ship_addr_line3)) {
            throw new \InvalidArgumentException('non-nullable ship_addr_line3 cannot be null');
        }
        if ((mb_strlen($ship_addr_line3) > 50)) {
            throw new \InvalidArgumentException('invalid length for $ship_addr_line3 when calling RegisterPreAuthRequestJsonParams., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($ship_addr_line3) < 1)) {
            throw new \InvalidArgumentException('invalid length for $ship_addr_line3 when calling RegisterPreAuthRequestJsonParams., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~А-Яа-яЁё№]*$/", ObjectSerializer::toString($ship_addr_line3)))) {
            throw new \InvalidArgumentException("invalid value for \$ship_addr_line3 when calling RegisterPreAuthRequestJsonParams., must conform to the pattern /^[ -~А-Яа-яЁё№]*$/.");
        }

        $this->container['ship_addr_line3'] = $ship_addr_line3;

        return $this;
    }

    /**
     * Gets ship_address_usage
     *
     * @return string|null
     */
    public function getShipAddressUsage()
    {
        return $this->container['ship_address_usage'];
    }

    /**
     * Sets ship_address_usage
     *
     * @param string|null $ship_address_usage Дата первого использования адреса доставки для аккаунта Плательщика в формате YYYYMMDD
     *
     * @return self
     */
    public function setShipAddressUsage($ship_address_usage)
    {
        if (is_null($ship_address_usage)) {
            throw new \InvalidArgumentException('non-nullable ship_address_usage cannot be null');
        }
        if ((mb_strlen($ship_address_usage) > 8)) {
            throw new \InvalidArgumentException('invalid length for $ship_address_usage when calling RegisterPreAuthRequestJsonParams., must be smaller than or equal to 8.');
        }
        if ((mb_strlen($ship_address_usage) < 8)) {
            throw new \InvalidArgumentException('invalid length for $ship_address_usage when calling RegisterPreAuthRequestJsonParams., must be bigger than or equal to 8.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($ship_address_usage)))) {
            throw new \InvalidArgumentException("invalid value for \$ship_address_usage when calling RegisterPreAuthRequestJsonParams., must conform to the pattern /^\\d+$/.");
        }

        $this->container['ship_address_usage'] = $ship_address_usage;

        return $this;
    }

    /**
     * Gets ship_address_usage_ind
     *
     * @return string|null
     */
    public function getShipAddressUsageInd()
    {
        return $this->container['ship_address_usage_ind'];
    }

    /**
     * Sets ship_address_usage_ind
     *
     * @param string|null $ship_address_usage_ind Период времени с момента первого использования адреса доставки для аккаунта Плательщика:   * `01` = This transaction;   * `02` = Less than 30 days;   * `03` = 30-60 days;   * `04` = More than 60 days.
     *
     * @return self
     */
    public function setShipAddressUsageInd($ship_address_usage_ind)
    {
        if (is_null($ship_address_usage_ind)) {
            throw new \InvalidArgumentException('non-nullable ship_address_usage_ind cannot be null');
        }
        if ((mb_strlen($ship_address_usage_ind) > 2)) {
            throw new \InvalidArgumentException('invalid length for $ship_address_usage_ind when calling RegisterPreAuthRequestJsonParams., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($ship_address_usage_ind) < 2)) {
            throw new \InvalidArgumentException('invalid length for $ship_address_usage_ind when calling RegisterPreAuthRequestJsonParams., must be bigger than or equal to 2.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($ship_address_usage_ind)))) {
            throw new \InvalidArgumentException("invalid value for \$ship_address_usage_ind when calling RegisterPreAuthRequestJsonParams., must conform to the pattern /^\\d+$/.");
        }

        $this->container['ship_address_usage_ind'] = $ship_address_usage_ind;

        return $this;
    }

    /**
     * Gets mri_delivery_timeframe
     *
     * @return string|null
     */
    public function getMriDeliveryTimeframe()
    {
        return $this->container['mri_delivery_timeframe'];
    }

    /**
     * Sets mri_delivery_timeframe
     *
     * @param string|null $mri_delivery_timeframe Срок доставки товара: * `01` = Electronic Delivery; * `02` = Same day shipping; * `03` = Overnight shipping; * `04` = Two-day or more shipping.
     *
     * @return self
     */
    public function setMriDeliveryTimeframe($mri_delivery_timeframe)
    {
        if (is_null($mri_delivery_timeframe)) {
            throw new \InvalidArgumentException('non-nullable mri_delivery_timeframe cannot be null');
        }
        if ((mb_strlen($mri_delivery_timeframe) > 2)) {
            throw new \InvalidArgumentException('invalid length for $mri_delivery_timeframe when calling RegisterPreAuthRequestJsonParams., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($mri_delivery_timeframe) < 1)) {
            throw new \InvalidArgumentException('invalid length for $mri_delivery_timeframe when calling RegisterPreAuthRequestJsonParams., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($mri_delivery_timeframe)))) {
            throw new \InvalidArgumentException("invalid value for \$mri_delivery_timeframe when calling RegisterPreAuthRequestJsonParams., must conform to the pattern /^\\d+$/.");
        }

        $this->container['mri_delivery_timeframe'] = $mri_delivery_timeframe;

        return $this;
    }

    /**
     * Gets mri_ship_indicator
     *
     * @return string|null
     */
    public function getMriShipIndicator()
    {
        return $this->container['mri_ship_indicator'];
    }

    /**
     * Sets mri_ship_indicator
     *
     * @param string|null $mri_ship_indicator Способ доставки, выбранный для операции:   * `01` = Ship to cardholder's billing address;   * `02` = Ship to another verified address on file with merchant;   * `03` = Ship to address that is different than the cardholder's billing address;   * `04` = “Ship to Store” / Pick-up at local store (Store address shall be populated in shipping address fields);   * `05` = Digital goods (includes online services, electronic gift cards and redemption codes);   * `06` = Travel and Event tickets, not shipped;   * `07` = Other (for example, Gaming, digital services not shipped, emedia subscriptions, etc.).
     *
     * @return self
     */
    public function setMriShipIndicator($mri_ship_indicator)
    {
        if (is_null($mri_ship_indicator)) {
            throw new \InvalidArgumentException('non-nullable mri_ship_indicator cannot be null');
        }
        if ((mb_strlen($mri_ship_indicator) > 2)) {
            throw new \InvalidArgumentException('invalid length for $mri_ship_indicator when calling RegisterPreAuthRequestJsonParams., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($mri_ship_indicator) < 2)) {
            throw new \InvalidArgumentException('invalid length for $mri_ship_indicator when calling RegisterPreAuthRequestJsonParams., must be bigger than or equal to 2.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($mri_ship_indicator)))) {
            throw new \InvalidArgumentException("invalid value for \$mri_ship_indicator when calling RegisterPreAuthRequestJsonParams., must conform to the pattern /^\\d+$/.");
        }

        $this->container['mri_ship_indicator'] = $mri_ship_indicator;

        return $this;
    }

    /**
     * Gets ch_acc_pw_change
     *
     * @return string|null
     */
    public function getChAccPwChange()
    {
        return $this->container['ch_acc_pw_change'];
    }

    /**
     * Sets ch_acc_pw_change
     *
     * @param string|null $ch_acc_pw_change Дата последнего изменения пароля или сброса аккаунта Плательщика в ТСП в формате YYYYMMDD
     *
     * @return self
     */
    public function setChAccPwChange($ch_acc_pw_change)
    {
        if (is_null($ch_acc_pw_change)) {
            throw new \InvalidArgumentException('non-nullable ch_acc_pw_change cannot be null');
        }
        if ((mb_strlen($ch_acc_pw_change) > 8)) {
            throw new \InvalidArgumentException('invalid length for $ch_acc_pw_change when calling RegisterPreAuthRequestJsonParams., must be smaller than or equal to 8.');
        }
        if ((mb_strlen($ch_acc_pw_change) < 8)) {
            throw new \InvalidArgumentException('invalid length for $ch_acc_pw_change when calling RegisterPreAuthRequestJsonParams., must be bigger than or equal to 8.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($ch_acc_pw_change)))) {
            throw new \InvalidArgumentException("invalid value for \$ch_acc_pw_change when calling RegisterPreAuthRequestJsonParams., must conform to the pattern /^\\d+$/.");
        }

        $this->container['ch_acc_pw_change'] = $ch_acc_pw_change;

        return $this;
    }

    /**
     * Gets ch_acc_pw_change_ind
     *
     * @return string|null
     */
    public function getChAccPwChangeInd()
    {
        return $this->container['ch_acc_pw_change_ind'];
    }

    /**
     * Sets ch_acc_pw_change_ind
     *
     * @param string|null $ch_acc_pw_change_ind Период времени с последнего изменения пароля или сброса аккаунта Плательщика в ТСП:   * `01` = No change;   * `02` = Changed during this transaction;   * `03` = Less than 30 days;   * `04` = 30-60 days;   * `05` = More than 60 days.
     *
     * @return self
     */
    public function setChAccPwChangeInd($ch_acc_pw_change_ind)
    {
        if (is_null($ch_acc_pw_change_ind)) {
            throw new \InvalidArgumentException('non-nullable ch_acc_pw_change_ind cannot be null');
        }
        if ((mb_strlen($ch_acc_pw_change_ind) > 2)) {
            throw new \InvalidArgumentException('invalid length for $ch_acc_pw_change_ind when calling RegisterPreAuthRequestJsonParams., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($ch_acc_pw_change_ind) < 2)) {
            throw new \InvalidArgumentException('invalid length for $ch_acc_pw_change_ind when calling RegisterPreAuthRequestJsonParams., must be bigger than or equal to 2.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($ch_acc_pw_change_ind)))) {
            throw new \InvalidArgumentException("invalid value for \$ch_acc_pw_change_ind when calling RegisterPreAuthRequestJsonParams., must conform to the pattern /^\\d+$/.");
        }

        $this->container['ch_acc_pw_change_ind'] = $ch_acc_pw_change_ind;

        return $this;
    }

    /**
     * Gets nb_purchase_account
     *
     * @return string|null
     */
    public function getNbPurchaseAccount()
    {
        return $this->container['nb_purchase_account'];
    }

    /**
     * Sets nb_purchase_account
     *
     * @param string|null $nb_purchase_account Количество покупок, совершенных с аккаунта Плательщика за последние 6 месяцев
     *
     * @return self
     */
    public function setNbPurchaseAccount($nb_purchase_account)
    {
        if (is_null($nb_purchase_account)) {
            throw new \InvalidArgumentException('non-nullable nb_purchase_account cannot be null');
        }
        if ((mb_strlen($nb_purchase_account) > 4)) {
            throw new \InvalidArgumentException('invalid length for $nb_purchase_account when calling RegisterPreAuthRequestJsonParams., must be smaller than or equal to 4.');
        }
        if ((mb_strlen($nb_purchase_account) < 1)) {
            throw new \InvalidArgumentException('invalid length for $nb_purchase_account when calling RegisterPreAuthRequestJsonParams., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($nb_purchase_account)))) {
            throw new \InvalidArgumentException("invalid value for \$nb_purchase_account when calling RegisterPreAuthRequestJsonParams., must conform to the pattern /^\\d+$/.");
        }

        $this->container['nb_purchase_account'] = $nb_purchase_account;

        return $this;
    }

    /**
     * Gets txn_activity_day
     *
     * @return string|null
     */
    public function getTxnActivityDay()
    {
        return $this->container['txn_activity_day'];
    }

    /**
     * Sets txn_activity_day
     *
     * @param string|null $txn_activity_day Количество операций (успешных и незавершенных), совершенных с аккаунта Плательщика за последние 24 часа всеми платёжными средствами
     *
     * @return self
     */
    public function setTxnActivityDay($txn_activity_day)
    {
        if (is_null($txn_activity_day)) {
            throw new \InvalidArgumentException('non-nullable txn_activity_day cannot be null');
        }
        if ((mb_strlen($txn_activity_day) > 3)) {
            throw new \InvalidArgumentException('invalid length for $txn_activity_day when calling RegisterPreAuthRequestJsonParams., must be smaller than or equal to 3.');
        }
        if ((mb_strlen($txn_activity_day) < 1)) {
            throw new \InvalidArgumentException('invalid length for $txn_activity_day when calling RegisterPreAuthRequestJsonParams., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($txn_activity_day)))) {
            throw new \InvalidArgumentException("invalid value for \$txn_activity_day when calling RegisterPreAuthRequestJsonParams., must conform to the pattern /^\\d+$/.");
        }

        $this->container['txn_activity_day'] = $txn_activity_day;

        return $this;
    }

    /**
     * Gets txn_activity_year
     *
     * @return string|null
     */
    public function getTxnActivityYear()
    {
        return $this->container['txn_activity_year'];
    }

    /**
     * Sets txn_activity_year
     *
     * @param string|null $txn_activity_year Количество операций (успешных и незавершенных), совершенных с аккаунта Плательщика за последний год всеми платёжными средствами
     *
     * @return self
     */
    public function setTxnActivityYear($txn_activity_year)
    {
        if (is_null($txn_activity_year)) {
            throw new \InvalidArgumentException('non-nullable txn_activity_year cannot be null');
        }
        if ((mb_strlen($txn_activity_year) > 3)) {
            throw new \InvalidArgumentException('invalid length for $txn_activity_year when calling RegisterPreAuthRequestJsonParams., must be smaller than or equal to 3.');
        }
        if ((mb_strlen($txn_activity_year) < 1)) {
            throw new \InvalidArgumentException('invalid length for $txn_activity_year when calling RegisterPreAuthRequestJsonParams., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($txn_activity_year)))) {
            throw new \InvalidArgumentException("invalid value for \$txn_activity_year when calling RegisterPreAuthRequestJsonParams., must conform to the pattern /^\\d+$/.");
        }

        $this->container['txn_activity_year'] = $txn_activity_year;

        return $this;
    }

    /**
     * Gets payment_acc_age
     *
     * @return string|null
     */
    public function getPaymentAccAge()
    {
        return $this->container['payment_acc_age'];
    }

    /**
     * Sets payment_acc_age
     *
     * @param string|null $payment_acc_age Дата добавления платёжного метода в аккаунте Плательщика в формате YYYYMMDD
     *
     * @return self
     */
    public function setPaymentAccAge($payment_acc_age)
    {
        if (is_null($payment_acc_age)) {
            throw new \InvalidArgumentException('non-nullable payment_acc_age cannot be null');
        }
        if ((mb_strlen($payment_acc_age) > 8)) {
            throw new \InvalidArgumentException('invalid length for $payment_acc_age when calling RegisterPreAuthRequestJsonParams., must be smaller than or equal to 8.');
        }
        if ((mb_strlen($payment_acc_age) < 8)) {
            throw new \InvalidArgumentException('invalid length for $payment_acc_age when calling RegisterPreAuthRequestJsonParams., must be bigger than or equal to 8.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($payment_acc_age)))) {
            throw new \InvalidArgumentException("invalid value for \$payment_acc_age when calling RegisterPreAuthRequestJsonParams., must conform to the pattern /^\\d+$/.");
        }

        $this->container['payment_acc_age'] = $payment_acc_age;

        return $this;
    }

    /**
     * Gets payment_acc_ind
     *
     * @return string|null
     */
    public function getPaymentAccInd()
    {
        return $this->container['payment_acc_ind'];
    }

    /**
     * Sets payment_acc_ind
     *
     * @param string|null $payment_acc_ind Период времени с момента добавления платёжного метода в аккаунт Плательщика:   * `01` = No account (guest check-out);   * `02` = During this transaction;   * `03` = Less than 30 days;   * `04` = 30-60 days;   * `05` = More than 60 days.
     *
     * @return self
     */
    public function setPaymentAccInd($payment_acc_ind)
    {
        if (is_null($payment_acc_ind)) {
            throw new \InvalidArgumentException('non-nullable payment_acc_ind cannot be null');
        }
        if ((mb_strlen($payment_acc_ind) > 2)) {
            throw new \InvalidArgumentException('invalid length for $payment_acc_ind when calling RegisterPreAuthRequestJsonParams., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($payment_acc_ind) < 2)) {
            throw new \InvalidArgumentException('invalid length for $payment_acc_ind when calling RegisterPreAuthRequestJsonParams., must be bigger than or equal to 2.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($payment_acc_ind)))) {
            throw new \InvalidArgumentException("invalid value for \$payment_acc_ind when calling RegisterPreAuthRequestJsonParams., must conform to the pattern /^\\d+$/.");
        }

        $this->container['payment_acc_ind'] = $payment_acc_ind;

        return $this;
    }

    /**
     * Gets ch_acc_change
     *
     * @return string|null
     */
    public function getChAccChange()
    {
        return $this->container['ch_acc_change'];
    }

    /**
     * Sets ch_acc_change
     *
     * @param string|null $ch_acc_change Дата последнего редактирования аккаунта Плательщика в ТСП в формате YYYYMMDD
     *
     * @return self
     */
    public function setChAccChange($ch_acc_change)
    {
        if (is_null($ch_acc_change)) {
            throw new \InvalidArgumentException('non-nullable ch_acc_change cannot be null');
        }
        if ((mb_strlen($ch_acc_change) > 8)) {
            throw new \InvalidArgumentException('invalid length for $ch_acc_change when calling RegisterPreAuthRequestJsonParams., must be smaller than or equal to 8.');
        }
        if ((mb_strlen($ch_acc_change) < 8)) {
            throw new \InvalidArgumentException('invalid length for $ch_acc_change when calling RegisterPreAuthRequestJsonParams., must be bigger than or equal to 8.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($ch_acc_change)))) {
            throw new \InvalidArgumentException("invalid value for \$ch_acc_change when calling RegisterPreAuthRequestJsonParams., must conform to the pattern /^\\d+$/.");
        }

        $this->container['ch_acc_change'] = $ch_acc_change;

        return $this;
    }

    /**
     * Gets app2app
     *
     * @return bool|null
     */
    public function getApp2app()
    {
        return $this->container['app2app'];
    }

    /**
     * Sets app2app
     *
     * @param bool|null $app2app Признак, указывающий на способ оплаты через мобильное приложение \"Сбербанк-Онлайн\" в случае, если Плательщик использует мобильное приложение Клиента.   * `true` = истина, передается в случае, если Плательщик будет перенаправлен в мобильное приложение \"Сбербанк-Онлайн\" из приложения Клиента;   * `false` = ложь.
     *
     * @return self
     */
    public function setApp2app($app2app)
    {
        if (is_null($app2app)) {
            throw new \InvalidArgumentException('non-nullable app2app cannot be null');
        }
        $this->container['app2app'] = $app2app;

        return $this;
    }

    /**
     * Gets web2app
     *
     * @return bool|null
     */
    public function getWeb2app()
    {
        return $this->container['web2app'];
    }

    /**
     * Sets web2app
     *
     * @param bool|null $web2app Признак, указывающий на способ оплаты через мобильное приложение \"Сбербанк-Онлайн\" в случае, если Плательщик использует desktop версию сервиса Партнера.   * `true` = истина, передается в случае:     * Необходимости создания виджета Умных советов в МП СБОЛ;     * Завершения сценария оплаты в МП СБОЛ.   * `false` = ложь.
     *
     * @return self
     */
    public function setWeb2app($web2app)
    {
        if (is_null($web2app)) {
            throw new \InvalidArgumentException('non-nullable web2app cannot be null');
        }
        $this->container['web2app'] = $web2app;

        return $this;
    }

    /**
     * Gets app_deep_link
     *
     * @return string|null
     */
    public function getAppDeepLink()
    {
        return $this->container['app_deep_link'];
    }

    /**
     * Sets app_deep_link
     *
     * @param string|null $app_deep_link Ссылка на мобильное приложение Клиента для возврата после оплаты в приложении \"Сбербанк-Онлайн\", обязательно если параметр app2app принимает значение \"Истина\"
     *
     * @return self
     */
    public function setAppDeepLink($app_deep_link)
    {
        if (is_null($app_deep_link)) {
            throw new \InvalidArgumentException('non-nullable app_deep_link cannot be null');
        }
        if ((mb_strlen($app_deep_link) > 255)) {
            throw new \InvalidArgumentException('invalid length for $app_deep_link when calling RegisterPreAuthRequestJsonParams., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($app_deep_link) < 1)) {
            throw new \InvalidArgumentException('invalid length for $app_deep_link when calling RegisterPreAuthRequestJsonParams., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~]*$/", ObjectSerializer::toString($app_deep_link)))) {
            throw new \InvalidArgumentException("invalid value for \$app_deep_link when calling RegisterPreAuthRequestJsonParams., must conform to the pattern /^[ -~]*$/.");
        }

        $this->container['app_deep_link'] = $app_deep_link;

        return $this;
    }

    /**
     * Gets sberpay_backurl
     *
     * @return string|null
     */
    public function getSberpayBackurl()
    {
        return $this->container['sberpay_backurl'];
    }

    /**
     * Sets sberpay_backurl
     *
     * @param string|null $sberpay_backurl Адрес для возврата Плательщика после оплаты в приложении \"Сбербанк-Онлайн\", обязательно в случае, если Плательщик будет перенаправлен в приложение \"Сбербанк-Онлайн\" из браузера, который находится на одном устройстве с приложением \"Сбербанк-Онлайн\".  Возможно получение статуса оплаты. Для этого в конце ссылки указывается параметр @{BankResultState}. При переходе по ссылке в нее будет добавлен параметр с результатом оплаты. Возможные значения параметра: значение    | расшифровка  ------------|------------------------------------------------------------- success     | оплата успешно прошла, требуется отправить на успешный экран return      | в сценарии оплаты произошла ошибка, требуется отправить на неуспешный экран cancel      | Клиент нажал отмену в СБОЛ (отказался оплачивать заказ), либо предлагаем перейти в Приложение СБОЛ и оплатить повторно, либо предлагаем вернуться в приложение Партнера. 0При переадресации пользователя из приложения Сбербанк Онлайн, он будет перенаправлен на одну из указанных страниц.
     *
     * @return self
     */
    public function setSberpayBackurl($sberpay_backurl)
    {
        if (is_null($sberpay_backurl)) {
            throw new \InvalidArgumentException('non-nullable sberpay_backurl cannot be null');
        }
        if ((mb_strlen($sberpay_backurl) > 255)) {
            throw new \InvalidArgumentException('invalid length for $sberpay_backurl when calling RegisterPreAuthRequestJsonParams., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($sberpay_backurl) < 1)) {
            throw new \InvalidArgumentException('invalid length for $sberpay_backurl when calling RegisterPreAuthRequestJsonParams., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~]*$/", ObjectSerializer::toString($sberpay_backurl)))) {
            throw new \InvalidArgumentException("invalid value for \$sberpay_backurl when calling RegisterPreAuthRequestJsonParams., must conform to the pattern /^[ -~]*$/.");
        }

        $this->container['sberpay_backurl'] = $sberpay_backurl;

        return $this;
    }

    /**
     * Gets qr_type
     *
     * @return string
     */
    public function getQrType()
    {
        return $this->container['qr_type'];
    }

    /**
     * Sets qr_type
     *
     * @param string $qr_type Тип регистрируемого QR. Допустимые значения: * `DYNAMIC_QR_SBP` - динамический QR СБП * `SUBSCRIPTION_SBP` - подписка для оплаты по СБП * `SBERPAY_DYNAMIC_QR` - динамический Плати QR от Сбербанка
     *
     * @return self
     */
    public function setQrType($qr_type)
    {
        if (is_null($qr_type)) {
            throw new \InvalidArgumentException('non-nullable qr_type cannot be null');
        }
        $allowedValues = $this->getQrTypeAllowableValues();
        if (!in_array($qr_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'qr_type', must be one of '%s'",
                    $qr_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['qr_type'] = $qr_type;

        return $this;
    }

    /**
     * Gets sbp_scenario
     *
     * @return string|null
     */
    public function getSbpScenario()
    {
        return $this->container['sbp_scenario'];
    }

    /**
     * Sets sbp_scenario
     *
     * @param string|null $sbp_scenario Сценарий СБП. Допустимые значения: * `C2B` – Одноразовая Платежная ссылка СБП с фиксированной суммой * `C2B_CASH_REGISTER` – Кассовая Платежная ссылка СБП  * `C2B_SUBSCRIPTION` - Информационная ссылка СБП для привязки счета Плательщика * `C2B_SUBSCRIPTION_WITH_PAYMENT` - Одноразовая Платежная ссылка СБП с одновременной привязкой счета Плательщика
     *
     * @return self
     */
    public function setSbpScenario($sbp_scenario)
    {
        if (is_null($sbp_scenario)) {
            throw new \InvalidArgumentException('non-nullable sbp_scenario cannot be null');
        }
        $allowedValues = $this->getSbpScenarioAllowableValues();
        if (!in_array($sbp_scenario, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'sbp_scenario', must be one of '%s'",
                    $sbp_scenario,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sbp_scenario'] = $sbp_scenario;

        return $this;
    }

    /**
     * Gets sbp_subscription_purpose
     *
     * @return string|null
     */
    public function getSbpSubscriptionPurpose()
    {
        return $this->container['sbp_subscription_purpose'];
    }

    /**
     * Sets sbp_subscription_purpose
     *
     * @param string|null $sbp_subscription_purpose Цель привязки счета (в свободной форме). Обязателен, если  __qrType__=SUBSCRIPTION_SBP либо __qrType__=DYNAMIC_QR_SBP и __sbp.scenario__=C2B_SUBSCRIPTION_WITH_PAYMENT.
     *
     * @return self
     */
    public function setSbpSubscriptionPurpose($sbp_subscription_purpose)
    {
        if (is_null($sbp_subscription_purpose)) {
            throw new \InvalidArgumentException('non-nullable sbp_subscription_purpose cannot be null');
        }
        if ((mb_strlen($sbp_subscription_purpose) > 256)) {
            throw new \InvalidArgumentException('invalid length for $sbp_subscription_purpose when calling RegisterPreAuthRequestJsonParams., must be smaller than or equal to 256.');
        }
        if ((!preg_match("/^[ -~А-Яа-яЁё№]*$/", ObjectSerializer::toString($sbp_subscription_purpose)))) {
            throw new \InvalidArgumentException("invalid value for \$sbp_subscription_purpose when calling RegisterPreAuthRequestJsonParams., must conform to the pattern /^[ -~А-Яа-яЁё№]*$/.");
        }

        $this->container['sbp_subscription_purpose'] = $sbp_subscription_purpose;

        return $this;
    }

    /**
     * Gets sberpay_qr_c2b
     *
     * @return bool|null
     */
    public function getSberpayQrC2b()
    {
        return $this->container['sberpay_qr_c2b'];
    }

    /**
     * Sets sberpay_qr_c2b
     *
     * @param bool|null $sberpay_qr_c2b Признак, указывающий на способ оплаты с использованием Плати QR - Кодов от Сбербанка (Динамический QR).   * `true` = истина, передается в случае, если Клиент хочет дать дать возможность для оплаты заказа через Плати QR;   * `false` = ложь.
     *
     * @return self
     */
    public function setSberpayQrC2b($sberpay_qr_c2b)
    {
        if (is_null($sberpay_qr_c2b)) {
            throw new \InvalidArgumentException('non-nullable sberpay_qr_c2b cannot be null');
        }
        $this->container['sberpay_qr_c2b'] = $sberpay_qr_c2b;

        return $this;
    }

    /**
     * Gets sberpay_sbp_cash_link
     *
     * @return bool|null
     */
    public function getSberpaySbpCashLink()
    {
        return $this->container['sberpay_sbp_cash_link'];
    }

    /**
     * Sets sberpay_sbp_cash_link
     *
     * @param bool|null $sberpay_sbp_cash_link <span style=\"color:red;\">__Зарезервировано для дальнейшего использования__</span>  Признак, указывающий на способ оплаты переводом C2B через СБП с помощью создания Кассовой ссылки (активированной или требующей активации отдельным методом).   * `true` = истина, передается в случае, если Клиент хочет дать возможность для оплаты заказа через СБП (в таком случае отмена зарегистрированного заказа до начала процесса оплаты невозможна);   * `false` = ложь.
     *
     * @return self
     */
    public function setSberpaySbpCashLink($sberpay_sbp_cash_link)
    {
        if (is_null($sberpay_sbp_cash_link)) {
            throw new \InvalidArgumentException('non-nullable sberpay_sbp_cash_link cannot be null');
        }
        $this->container['sberpay_sbp_cash_link'] = $sberpay_sbp_cash_link;

        return $this;
    }

    /**
     * Gets back_to_shop_name
     *
     * @return string|null
     */
    public function getBackToShopName()
    {
        return $this->container['back_to_shop_name'];
    }

    /**
     * Sets back_to_shop_name
     *
     * @param string|null $back_to_shop_name Название, которое нужно отобразить на стороне ПШ
     *
     * @return self
     */
    public function setBackToShopName($back_to_shop_name)
    {
        if (is_null($back_to_shop_name)) {
            throw new \InvalidArgumentException('non-nullable back_to_shop_name cannot be null');
        }
        if ((mb_strlen($back_to_shop_name) > 200)) {
            throw new \InvalidArgumentException('invalid length for $back_to_shop_name when calling RegisterPreAuthRequestJsonParams., must be smaller than or equal to 200.');
        }
        if ((mb_strlen($back_to_shop_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $back_to_shop_name when calling RegisterPreAuthRequestJsonParams., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~А-Яа-яЁё№]*$/", ObjectSerializer::toString($back_to_shop_name)))) {
            throw new \InvalidArgumentException("invalid value for \$back_to_shop_name when calling RegisterPreAuthRequestJsonParams., must conform to the pattern /^[ -~А-Яа-яЁё№]*$/.");
        }

        $this->container['back_to_shop_name'] = $back_to_shop_name;

        return $this;
    }

    /**
     * Gets back_to_shop_url
     *
     * @return string|null
     */
    public function getBackToShopUrl()
    {
        return $this->container['back_to_shop_url'];
    }

    /**
     * Sets back_to_shop_url
     *
     * @param string|null $back_to_shop_url URL-адрес возврата, куда нужно вернуть Плательщика
     *
     * @return self
     */
    public function setBackToShopUrl($back_to_shop_url)
    {
        if (is_null($back_to_shop_url)) {
            throw new \InvalidArgumentException('non-nullable back_to_shop_url cannot be null');
        }
        if ((mb_strlen($back_to_shop_url) > 200)) {
            throw new \InvalidArgumentException('invalid length for $back_to_shop_url when calling RegisterPreAuthRequestJsonParams., must be smaller than or equal to 200.');
        }
        if ((mb_strlen($back_to_shop_url) < 1)) {
            throw new \InvalidArgumentException('invalid length for $back_to_shop_url when calling RegisterPreAuthRequestJsonParams., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^https?:\/\/(.*)$/", ObjectSerializer::toString($back_to_shop_url)))) {
            throw new \InvalidArgumentException("invalid value for \$back_to_shop_url when calling RegisterPreAuthRequestJsonParams., must conform to the pattern /^https?:\/\/(.*)$/.");
        }

        $this->container['back_to_shop_url'] = $back_to_shop_url;

        return $this;
    }

    /**
     * Gets dest_wallet_num
     *
     * @return string|null
     */
    public function getDestWalletNum()
    {
        return $this->container['dest_wallet_num'];
    }

    /**
     * Sets dest_wallet_num
     *
     * @param string|null $dest_wallet_num Номер (идентификатор) электронного кошелька получателя электронных денежных средств.  <span style=\"color:red;\">Обязательно, если MCC=6050 или 6051</span>
     *
     * @return self
     */
    public function setDestWalletNum($dest_wallet_num)
    {
        if (is_null($dest_wallet_num)) {
            throw new \InvalidArgumentException('non-nullable dest_wallet_num cannot be null');
        }
        if ((mb_strlen($dest_wallet_num) > 30)) {
            throw new \InvalidArgumentException('invalid length for $dest_wallet_num when calling RegisterPreAuthRequestJsonParams., must be smaller than or equal to 30.');
        }
        if ((mb_strlen($dest_wallet_num) < 1)) {
            throw new \InvalidArgumentException('invalid length for $dest_wallet_num when calling RegisterPreAuthRequestJsonParams., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~]*$/", ObjectSerializer::toString($dest_wallet_num)))) {
            throw new \InvalidArgumentException("invalid value for \$dest_wallet_num when calling RegisterPreAuthRequestJsonParams., must conform to the pattern /^[ -~]*$/.");
        }

        $this->container['dest_wallet_num'] = $dest_wallet_num;

        return $this;
    }

    /**
     * Gets dest_phone_num
     *
     * @return string|null
     */
    public function getDestPhoneNum()
    {
        return $this->container['dest_phone_num'];
    }

    /**
     * Sets dest_phone_num
     *
     * @param string|null $dest_phone_num Номер телефона абонента получателя денежных средств.  <span style=\"color:red;\">Обязательно, если MCC=4814</span>
     *
     * @return self
     */
    public function setDestPhoneNum($dest_phone_num)
    {
        if (is_null($dest_phone_num)) {
            throw new \InvalidArgumentException('non-nullable dest_phone_num cannot be null');
        }
        if ((mb_strlen($dest_phone_num) > 30)) {
            throw new \InvalidArgumentException('invalid length for $dest_phone_num when calling RegisterPreAuthRequestJsonParams., must be smaller than or equal to 30.');
        }
        if ((mb_strlen($dest_phone_num) < 1)) {
            throw new \InvalidArgumentException('invalid length for $dest_phone_num when calling RegisterPreAuthRequestJsonParams., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^(\\+?)\\d{7,15}$/", ObjectSerializer::toString($dest_phone_num)))) {
            throw new \InvalidArgumentException("invalid value for \$dest_phone_num when calling RegisterPreAuthRequestJsonParams., must conform to the pattern /^(\\+?)\\d{7,15}$/.");
        }

        $this->container['dest_phone_num'] = $dest_phone_num;

        return $this;
    }

    /**
     * Gets dest_card_num
     *
     * @return string|null
     */
    public function getDestCardNum()
    {
        return $this->container['dest_card_num'];
    }

    /**
     * Sets dest_card_num
     *
     * @param string|null $dest_card_num Номер карты получателя перевода.  <span style=\"color:red;\">Обязательно при проведении операции перевода денежных средств на карту, кредитование, для MCC=6538</span>
     *
     * @return self
     */
    public function setDestCardNum($dest_card_num)
    {
        if (is_null($dest_card_num)) {
            throw new \InvalidArgumentException('non-nullable dest_card_num cannot be null');
        }
        if ((mb_strlen($dest_card_num) > 19)) {
            throw new \InvalidArgumentException('invalid length for $dest_card_num when calling RegisterPreAuthRequestJsonParams., must be smaller than or equal to 19.');
        }
        if ((mb_strlen($dest_card_num) < 13)) {
            throw new \InvalidArgumentException('invalid length for $dest_card_num when calling RegisterPreAuthRequestJsonParams., must be bigger than or equal to 13.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($dest_card_num)))) {
            throw new \InvalidArgumentException("invalid value for \$dest_card_num when calling RegisterPreAuthRequestJsonParams., must conform to the pattern /^\\d+$/.");
        }

        $this->container['dest_card_num'] = $dest_card_num;

        return $this;
    }

    /**
     * Gets dest_acct_num
     *
     * @return string|null
     */
    public function getDestAcctNum()
    {
        return $this->container['dest_acct_num'];
    }

    /**
     * Sets dest_acct_num
     *
     * @param string|null $dest_acct_num Конкатенированное значение БИК Банка (bik) получателя (044583999) и номер счета (bankAccount) получателя 40817810570000123456 для перевода  <span style=\"color:red;\">Обязательно при проведении операции перевода денежных средств на счет, кредитование, для MCC=6538</span>
     *
     * @return self
     */
    public function setDestAcctNum($dest_acct_num)
    {
        if (is_null($dest_acct_num)) {
            throw new \InvalidArgumentException('non-nullable dest_acct_num cannot be null');
        }
        if ((mb_strlen($dest_acct_num) > 29)) {
            throw new \InvalidArgumentException('invalid length for $dest_acct_num when calling RegisterPreAuthRequestJsonParams., must be smaller than or equal to 29.');
        }
        if ((mb_strlen($dest_acct_num) < 1)) {
            throw new \InvalidArgumentException('invalid length for $dest_acct_num when calling RegisterPreAuthRequestJsonParams., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($dest_acct_num)))) {
            throw new \InvalidArgumentException("invalid value for \$dest_acct_num when calling RegisterPreAuthRequestJsonParams., must conform to the pattern /^\\d+$/.");
        }

        $this->container['dest_acct_num'] = $dest_acct_num;

        return $this;
    }

    /**
     * Gets bill_addr_city
     *
     * @return string|null
     */
    public function getBillAddrCity()
    {
        return $this->container['bill_addr_city'];
    }

    /**
     * Sets bill_addr_city
     *
     * @param string|null $bill_addr_city Город доставки счета
     *
     * @return self
     */
    public function setBillAddrCity($bill_addr_city)
    {
        if (is_null($bill_addr_city)) {
            throw new \InvalidArgumentException('non-nullable bill_addr_city cannot be null');
        }
        if ((mb_strlen($bill_addr_city) > 50)) {
            throw new \InvalidArgumentException('invalid length for $bill_addr_city when calling RegisterPreAuthRequestJsonParams., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($bill_addr_city) < 1)) {
            throw new \InvalidArgumentException('invalid length for $bill_addr_city when calling RegisterPreAuthRequestJsonParams., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~А-Яа-яЁё№]*$/", ObjectSerializer::toString($bill_addr_city)))) {
            throw new \InvalidArgumentException("invalid value for \$bill_addr_city when calling RegisterPreAuthRequestJsonParams., must conform to the pattern /^[ -~А-Яа-яЁё№]*$/.");
        }

        $this->container['bill_addr_city'] = $bill_addr_city;

        return $this;
    }

    /**
     * Gets bill_addr_country
     *
     * @return string|null
     */
    public function getBillAddrCountry()
    {
        return $this->container['bill_addr_country'];
    }

    /**
     * Sets bill_addr_country
     *
     * @param string|null $bill_addr_country Цифровой код страны доставки счета согласно ISO 3166-1
     *
     * @return self
     */
    public function setBillAddrCountry($bill_addr_country)
    {
        if (is_null($bill_addr_country)) {
            throw new \InvalidArgumentException('non-nullable bill_addr_country cannot be null');
        }
        if ((mb_strlen($bill_addr_country) > 3)) {
            throw new \InvalidArgumentException('invalid length for $bill_addr_country when calling RegisterPreAuthRequestJsonParams., must be smaller than or equal to 3.');
        }
        if ((mb_strlen($bill_addr_country) < 1)) {
            throw new \InvalidArgumentException('invalid length for $bill_addr_country when calling RegisterPreAuthRequestJsonParams., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($bill_addr_country)))) {
            throw new \InvalidArgumentException("invalid value for \$bill_addr_country when calling RegisterPreAuthRequestJsonParams., must conform to the pattern /^\\d+$/.");
        }

        $this->container['bill_addr_country'] = $bill_addr_country;

        return $this;
    }

    /**
     * Gets bill_addr_line1
     *
     * @return string|null
     */
    public function getBillAddrLine1()
    {
        return $this->container['bill_addr_line1'];
    }

    /**
     * Sets bill_addr_line1
     *
     * @param string|null $bill_addr_line1 Адрес доставки счета
     *
     * @return self
     */
    public function setBillAddrLine1($bill_addr_line1)
    {
        if (is_null($bill_addr_line1)) {
            throw new \InvalidArgumentException('non-nullable bill_addr_line1 cannot be null');
        }
        if ((mb_strlen($bill_addr_line1) > 50)) {
            throw new \InvalidArgumentException('invalid length for $bill_addr_line1 when calling RegisterPreAuthRequestJsonParams., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($bill_addr_line1) < 1)) {
            throw new \InvalidArgumentException('invalid length for $bill_addr_line1 when calling RegisterPreAuthRequestJsonParams., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~А-Яа-яЁё№]*$/", ObjectSerializer::toString($bill_addr_line1)))) {
            throw new \InvalidArgumentException("invalid value for \$bill_addr_line1 when calling RegisterPreAuthRequestJsonParams., must conform to the pattern /^[ -~А-Яа-яЁё№]*$/.");
        }

        $this->container['bill_addr_line1'] = $bill_addr_line1;

        return $this;
    }

    /**
     * Gets bill_addr_line2
     *
     * @return string|null
     */
    public function getBillAddrLine2()
    {
        return $this->container['bill_addr_line2'];
    }

    /**
     * Sets bill_addr_line2
     *
     * @param string|null $bill_addr_line2 Адрес доставки счета
     *
     * @return self
     */
    public function setBillAddrLine2($bill_addr_line2)
    {
        if (is_null($bill_addr_line2)) {
            throw new \InvalidArgumentException('non-nullable bill_addr_line2 cannot be null');
        }
        if ((mb_strlen($bill_addr_line2) > 50)) {
            throw new \InvalidArgumentException('invalid length for $bill_addr_line2 when calling RegisterPreAuthRequestJsonParams., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($bill_addr_line2) < 1)) {
            throw new \InvalidArgumentException('invalid length for $bill_addr_line2 when calling RegisterPreAuthRequestJsonParams., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~А-Яа-яЁё№]*$/", ObjectSerializer::toString($bill_addr_line2)))) {
            throw new \InvalidArgumentException("invalid value for \$bill_addr_line2 when calling RegisterPreAuthRequestJsonParams., must conform to the pattern /^[ -~А-Яа-яЁё№]*$/.");
        }

        $this->container['bill_addr_line2'] = $bill_addr_line2;

        return $this;
    }

    /**
     * Gets bill_addr_line3
     *
     * @return string|null
     */
    public function getBillAddrLine3()
    {
        return $this->container['bill_addr_line3'];
    }

    /**
     * Sets bill_addr_line3
     *
     * @param string|null $bill_addr_line3 Адрес доставки счета
     *
     * @return self
     */
    public function setBillAddrLine3($bill_addr_line3)
    {
        if (is_null($bill_addr_line3)) {
            throw new \InvalidArgumentException('non-nullable bill_addr_line3 cannot be null');
        }
        if ((mb_strlen($bill_addr_line3) > 50)) {
            throw new \InvalidArgumentException('invalid length for $bill_addr_line3 when calling RegisterPreAuthRequestJsonParams., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($bill_addr_line3) < 1)) {
            throw new \InvalidArgumentException('invalid length for $bill_addr_line3 when calling RegisterPreAuthRequestJsonParams., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~А-Яа-яЁё№]*$/", ObjectSerializer::toString($bill_addr_line3)))) {
            throw new \InvalidArgumentException("invalid value for \$bill_addr_line3 when calling RegisterPreAuthRequestJsonParams., must conform to the pattern /^[ -~А-Яа-яЁё№]*$/.");
        }

        $this->container['bill_addr_line3'] = $bill_addr_line3;

        return $this;
    }

    /**
     * Gets bill_addr_post_code
     *
     * @return string|null
     */
    public function getBillAddrPostCode()
    {
        return $this->container['bill_addr_post_code'];
    }

    /**
     * Sets bill_addr_post_code
     *
     * @param string|null $bill_addr_post_code Почтовый индекс адреса доставки счета
     *
     * @return self
     */
    public function setBillAddrPostCode($bill_addr_post_code)
    {
        if (is_null($bill_addr_post_code)) {
            throw new \InvalidArgumentException('non-nullable bill_addr_post_code cannot be null');
        }
        if ((mb_strlen($bill_addr_post_code) > 16)) {
            throw new \InvalidArgumentException('invalid length for $bill_addr_post_code when calling RegisterPreAuthRequestJsonParams., must be smaller than or equal to 16.');
        }
        if ((mb_strlen($bill_addr_post_code) < 1)) {
            throw new \InvalidArgumentException('invalid length for $bill_addr_post_code when calling RegisterPreAuthRequestJsonParams., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~]*$/", ObjectSerializer::toString($bill_addr_post_code)))) {
            throw new \InvalidArgumentException("invalid value for \$bill_addr_post_code when calling RegisterPreAuthRequestJsonParams., must conform to the pattern /^[ -~]*$/.");
        }

        $this->container['bill_addr_post_code'] = $bill_addr_post_code;

        return $this;
    }

    /**
     * Gets bill_addr_state
     *
     * @return string|null
     */
    public function getBillAddrState()
    {
        return $this->container['bill_addr_state'];
    }

    /**
     * Sets bill_addr_state
     *
     * @param string|null $bill_addr_state Штат или провинция адреса доставки счета согласно ISO 3166-2
     *
     * @return self
     */
    public function setBillAddrState($bill_addr_state)
    {
        if (is_null($bill_addr_state)) {
            throw new \InvalidArgumentException('non-nullable bill_addr_state cannot be null');
        }
        if ((mb_strlen($bill_addr_state) > 3)) {
            throw new \InvalidArgumentException('invalid length for $bill_addr_state when calling RegisterPreAuthRequestJsonParams., must be smaller than or equal to 3.');
        }
        if ((mb_strlen($bill_addr_state) < 1)) {
            throw new \InvalidArgumentException('invalid length for $bill_addr_state when calling RegisterPreAuthRequestJsonParams., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~]*$/", ObjectSerializer::toString($bill_addr_state)))) {
            throw new \InvalidArgumentException("invalid value for \$bill_addr_state when calling RegisterPreAuthRequestJsonParams., must conform to the pattern /^[ -~]*$/.");
        }

        $this->container['bill_addr_state'] = $bill_addr_state;

        return $this;
    }

    /**
     * Gets ship_addr_country
     *
     * @return string|null
     */
    public function getShipAddrCountry()
    {
        return $this->container['ship_addr_country'];
    }

    /**
     * Sets ship_addr_country
     *
     * @param string|null $ship_addr_country Цифровой код страны доставки товара согласно ISO 3166-1
     *
     * @return self
     */
    public function setShipAddrCountry($ship_addr_country)
    {
        if (is_null($ship_addr_country)) {
            throw new \InvalidArgumentException('non-nullable ship_addr_country cannot be null');
        }
        if ((mb_strlen($ship_addr_country) > 3)) {
            throw new \InvalidArgumentException('invalid length for $ship_addr_country when calling RegisterPreAuthRequestJsonParams., must be smaller than or equal to 3.');
        }
        if ((mb_strlen($ship_addr_country) < 1)) {
            throw new \InvalidArgumentException('invalid length for $ship_addr_country when calling RegisterPreAuthRequestJsonParams., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($ship_addr_country)))) {
            throw new \InvalidArgumentException("invalid value for \$ship_addr_country when calling RegisterPreAuthRequestJsonParams., must conform to the pattern /^\\d+$/.");
        }

        $this->container['ship_addr_country'] = $ship_addr_country;

        return $this;
    }

    /**
     * Gets ship_addr_post_code
     *
     * @return string|null
     */
    public function getShipAddrPostCode()
    {
        return $this->container['ship_addr_post_code'];
    }

    /**
     * Sets ship_addr_post_code
     *
     * @param string|null $ship_addr_post_code Почтовый индекс адреса доставки товара
     *
     * @return self
     */
    public function setShipAddrPostCode($ship_addr_post_code)
    {
        if (is_null($ship_addr_post_code)) {
            throw new \InvalidArgumentException('non-nullable ship_addr_post_code cannot be null');
        }
        if ((mb_strlen($ship_addr_post_code) > 16)) {
            throw new \InvalidArgumentException('invalid length for $ship_addr_post_code when calling RegisterPreAuthRequestJsonParams., must be smaller than or equal to 16.');
        }
        if ((mb_strlen($ship_addr_post_code) < 1)) {
            throw new \InvalidArgumentException('invalid length for $ship_addr_post_code when calling RegisterPreAuthRequestJsonParams., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~]*$/", ObjectSerializer::toString($ship_addr_post_code)))) {
            throw new \InvalidArgumentException("invalid value for \$ship_addr_post_code when calling RegisterPreAuthRequestJsonParams., must conform to the pattern /^[ -~]*$/.");
        }

        $this->container['ship_addr_post_code'] = $ship_addr_post_code;

        return $this;
    }

    /**
     * Gets ship_addr_state
     *
     * @return string|null
     */
    public function getShipAddrState()
    {
        return $this->container['ship_addr_state'];
    }

    /**
     * Sets ship_addr_state
     *
     * @param string|null $ship_addr_state Штат или провинция адреса доставки товара согласно ISO 3166-2
     *
     * @return self
     */
    public function setShipAddrState($ship_addr_state)
    {
        if (is_null($ship_addr_state)) {
            throw new \InvalidArgumentException('non-nullable ship_addr_state cannot be null');
        }
        if ((mb_strlen($ship_addr_state) > 3)) {
            throw new \InvalidArgumentException('invalid length for $ship_addr_state when calling RegisterPreAuthRequestJsonParams., must be smaller than or equal to 3.');
        }
        if ((mb_strlen($ship_addr_state) < 1)) {
            throw new \InvalidArgumentException('invalid length for $ship_addr_state when calling RegisterPreAuthRequestJsonParams., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~]*$/", ObjectSerializer::toString($ship_addr_state)))) {
            throw new \InvalidArgumentException("invalid value for \$ship_addr_state when calling RegisterPreAuthRequestJsonParams., must conform to the pattern /^[ -~]*$/.");
        }

        $this->container['ship_addr_state'] = $ship_addr_state;

        return $this;
    }

    /**
     * Gets work_phone
     *
     * @return string|null
     */
    public function getWorkPhone()
    {
        return $this->container['work_phone'];
    }

    /**
     * Sets work_phone
     *
     * @param string|null $work_phone Рабочий телефон в формате \"код страны\"-\"номер телефона\" (например, 7-4951234567) согласно ITU-E.164
     *
     * @return self
     */
    public function setWorkPhone($work_phone)
    {
        if (is_null($work_phone)) {
            throw new \InvalidArgumentException('non-nullable work_phone cannot be null');
        }
        if ((mb_strlen($work_phone) > 19)) {
            throw new \InvalidArgumentException('invalid length for $work_phone when calling RegisterPreAuthRequestJsonParams., must be smaller than or equal to 19.');
        }
        if ((mb_strlen($work_phone) < 1)) {
            throw new \InvalidArgumentException('invalid length for $work_phone when calling RegisterPreAuthRequestJsonParams., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[\\d\\-]*$/", ObjectSerializer::toString($work_phone)))) {
            throw new \InvalidArgumentException("invalid value for \$work_phone when calling RegisterPreAuthRequestJsonParams., must conform to the pattern /^[\\d\\-]*$/.");
        }

        $this->container['work_phone'] = $work_phone;

        return $this;
    }

    /**
     * Gets home_phone
     *
     * @return string|null
     */
    public function getHomePhone()
    {
        return $this->container['home_phone'];
    }

    /**
     * Sets home_phone
     *
     * @param string|null $home_phone Домашний телефон в формате \"код страны\"-\"номер телефона\" (например, 7-4951234567) согласно ITU-E.164
     *
     * @return self
     */
    public function setHomePhone($home_phone)
    {
        if (is_null($home_phone)) {
            throw new \InvalidArgumentException('non-nullable home_phone cannot be null');
        }
        if ((mb_strlen($home_phone) > 19)) {
            throw new \InvalidArgumentException('invalid length for $home_phone when calling RegisterPreAuthRequestJsonParams., must be smaller than or equal to 19.');
        }
        if ((mb_strlen($home_phone) < 1)) {
            throw new \InvalidArgumentException('invalid length for $home_phone when calling RegisterPreAuthRequestJsonParams., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[\\d\\-]*$/", ObjectSerializer::toString($home_phone)))) {
            throw new \InvalidArgumentException("invalid value for \$home_phone when calling RegisterPreAuthRequestJsonParams., must conform to the pattern /^[\\d\\-]*$/.");
        }

        $this->container['home_phone'] = $home_phone;

        return $this;
    }

    /**
     * Gets mri_delivery_email_address
     *
     * @return string|null
     */
    public function getMriDeliveryEmailAddress()
    {
        return $this->container['mri_delivery_email_address'];
    }

    /**
     * Sets mri_delivery_email_address
     *
     * @param string|null $mri_delivery_email_address Для электронной доставки, электронный адрес доставки товара
     *
     * @return self
     */
    public function setMriDeliveryEmailAddress($mri_delivery_email_address)
    {
        if (is_null($mri_delivery_email_address)) {
            throw new \InvalidArgumentException('non-nullable mri_delivery_email_address cannot be null');
        }
        if ((mb_strlen($mri_delivery_email_address) > 254)) {
            throw new \InvalidArgumentException('invalid length for $mri_delivery_email_address when calling RegisterPreAuthRequestJsonParams., must be smaller than or equal to 254.');
        }
        if ((mb_strlen($mri_delivery_email_address) < 1)) {
            throw new \InvalidArgumentException('invalid length for $mri_delivery_email_address when calling RegisterPreAuthRequestJsonParams., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~]*$/", ObjectSerializer::toString($mri_delivery_email_address)))) {
            throw new \InvalidArgumentException("invalid value for \$mri_delivery_email_address when calling RegisterPreAuthRequestJsonParams., must conform to the pattern /^[ -~]*$/.");
        }

        $this->container['mri_delivery_email_address'] = $mri_delivery_email_address;

        return $this;
    }

    /**
     * Gets mri_gift_card_amount
     *
     * @return string|null
     */
    public function getMriGiftCardAmount()
    {
        return $this->container['mri_gift_card_amount'];
    }

    /**
     * Sets mri_gift_card_amount
     *
     * @param string|null $mri_gift_card_amount При покупке предоплаченной или подарочной карты, общий номинал карт в мажорных единицах валюты
     *
     * @return self
     */
    public function setMriGiftCardAmount($mri_gift_card_amount)
    {
        if (is_null($mri_gift_card_amount)) {
            throw new \InvalidArgumentException('non-nullable mri_gift_card_amount cannot be null');
        }
        if ((mb_strlen($mri_gift_card_amount) > 2)) {
            throw new \InvalidArgumentException('invalid length for $mri_gift_card_amount when calling RegisterPreAuthRequestJsonParams., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($mri_gift_card_amount) < 1)) {
            throw new \InvalidArgumentException('invalid length for $mri_gift_card_amount when calling RegisterPreAuthRequestJsonParams., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($mri_gift_card_amount)))) {
            throw new \InvalidArgumentException("invalid value for \$mri_gift_card_amount when calling RegisterPreAuthRequestJsonParams., must conform to the pattern /^\\d+$/.");
        }

        $this->container['mri_gift_card_amount'] = $mri_gift_card_amount;

        return $this;
    }

    /**
     * Gets mri_gift_card_count
     *
     * @return string|null
     */
    public function getMriGiftCardCount()
    {
        return $this->container['mri_gift_card_count'];
    }

    /**
     * Sets mri_gift_card_count
     *
     * @param string|null $mri_gift_card_count При покупке предоплаченной или подарочной карты, общее количество карт
     *
     * @return self
     */
    public function setMriGiftCardCount($mri_gift_card_count)
    {
        if (is_null($mri_gift_card_count)) {
            throw new \InvalidArgumentException('non-nullable mri_gift_card_count cannot be null');
        }
        if ((mb_strlen($mri_gift_card_count) > 2)) {
            throw new \InvalidArgumentException('invalid length for $mri_gift_card_count when calling RegisterPreAuthRequestJsonParams., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($mri_gift_card_count) < 1)) {
            throw new \InvalidArgumentException('invalid length for $mri_gift_card_count when calling RegisterPreAuthRequestJsonParams., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($mri_gift_card_count)))) {
            throw new \InvalidArgumentException("invalid value for \$mri_gift_card_count when calling RegisterPreAuthRequestJsonParams., must conform to the pattern /^\\d+$/.");
        }

        $this->container['mri_gift_card_count'] = $mri_gift_card_count;

        return $this;
    }

    /**
     * Gets mri_gift_card_curr
     *
     * @return string|null
     */
    public function getMriGiftCardCurr()
    {
        return $this->container['mri_gift_card_curr'];
    }

    /**
     * Sets mri_gift_card_curr
     *
     * @param string|null $mri_gift_card_curr При покупке предоплаченной или подарочной карты, цифровой код валюты карты согласно ISO-4217
     *
     * @return self
     */
    public function setMriGiftCardCurr($mri_gift_card_curr)
    {
        if (is_null($mri_gift_card_curr)) {
            throw new \InvalidArgumentException('non-nullable mri_gift_card_curr cannot be null');
        }
        if ((mb_strlen($mri_gift_card_curr) > 3)) {
            throw new \InvalidArgumentException('invalid length for $mri_gift_card_curr when calling RegisterPreAuthRequestJsonParams., must be smaller than or equal to 3.');
        }
        if ((mb_strlen($mri_gift_card_curr) < 1)) {
            throw new \InvalidArgumentException('invalid length for $mri_gift_card_curr when calling RegisterPreAuthRequestJsonParams., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($mri_gift_card_curr)))) {
            throw new \InvalidArgumentException("invalid value for \$mri_gift_card_curr when calling RegisterPreAuthRequestJsonParams., must conform to the pattern /^\\d+$/.");
        }

        $this->container['mri_gift_card_curr'] = $mri_gift_card_curr;

        return $this;
    }

    /**
     * Gets mri_pre_order_date
     *
     * @return string|null
     */
    public function getMriPreOrderDate()
    {
        return $this->container['mri_pre_order_date'];
    }

    /**
     * Sets mri_pre_order_date
     *
     * @param string|null $mri_pre_order_date Дата поставки товара под заказ в формате YYYYMMDD для предварительного заказа
     *
     * @return self
     */
    public function setMriPreOrderDate($mri_pre_order_date)
    {
        if (is_null($mri_pre_order_date)) {
            throw new \InvalidArgumentException('non-nullable mri_pre_order_date cannot be null');
        }
        if ((mb_strlen($mri_pre_order_date) > 8)) {
            throw new \InvalidArgumentException('invalid length for $mri_pre_order_date when calling RegisterPreAuthRequestJsonParams., must be smaller than or equal to 8.');
        }
        if ((mb_strlen($mri_pre_order_date) < 8)) {
            throw new \InvalidArgumentException('invalid length for $mri_pre_order_date when calling RegisterPreAuthRequestJsonParams., must be bigger than or equal to 8.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($mri_pre_order_date)))) {
            throw new \InvalidArgumentException("invalid value for \$mri_pre_order_date when calling RegisterPreAuthRequestJsonParams., must conform to the pattern /^\\d+$/.");
        }

        $this->container['mri_pre_order_date'] = $mri_pre_order_date;

        return $this;
    }

    /**
     * Gets mri_pre_order_purchase_ind
     *
     * @return string|null
     */
    public function getMriPreOrderPurchaseInd()
    {
        return $this->container['mri_pre_order_purchase_ind'];
    }

    /**
     * Sets mri_pre_order_purchase_ind
     *
     * @param string|null $mri_pre_order_purchase_ind Индикатор заказа товаров не в наличии (под заказ):   * `01` = Merchandise available;   * `02` = Future availability.
     *
     * @return self
     */
    public function setMriPreOrderPurchaseInd($mri_pre_order_purchase_ind)
    {
        if (is_null($mri_pre_order_purchase_ind)) {
            throw new \InvalidArgumentException('non-nullable mri_pre_order_purchase_ind cannot be null');
        }
        if ((mb_strlen($mri_pre_order_purchase_ind) > 2)) {
            throw new \InvalidArgumentException('invalid length for $mri_pre_order_purchase_ind when calling RegisterPreAuthRequestJsonParams., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($mri_pre_order_purchase_ind) < 2)) {
            throw new \InvalidArgumentException('invalid length for $mri_pre_order_purchase_ind when calling RegisterPreAuthRequestJsonParams., must be bigger than or equal to 2.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($mri_pre_order_purchase_ind)))) {
            throw new \InvalidArgumentException("invalid value for \$mri_pre_order_purchase_ind when calling RegisterPreAuthRequestJsonParams., must conform to the pattern /^\\d+$/.");
        }

        $this->container['mri_pre_order_purchase_ind'] = $mri_pre_order_purchase_ind;

        return $this;
    }

    /**
     * Gets three_ds_req_prior_auth_data
     *
     * @return string|null
     */
    public function getThreeDsReqPriorAuthData()
    {
        return $this->container['three_ds_req_prior_auth_data'];
    }

    /**
     * Sets three_ds_req_prior_auth_data
     *
     * @param string|null $three_ds_req_prior_auth_data Данные первой аутентификации в цепочке, которая произошла до текущей операции (например, первой аутентификации для recurring платежа)
     *
     * @return self
     */
    public function setThreeDsReqPriorAuthData($three_ds_req_prior_auth_data)
    {
        if (is_null($three_ds_req_prior_auth_data)) {
            throw new \InvalidArgumentException('non-nullable three_ds_req_prior_auth_data cannot be null');
        }
        if ((mb_strlen($three_ds_req_prior_auth_data) > 2048)) {
            throw new \InvalidArgumentException('invalid length for $three_ds_req_prior_auth_data when calling RegisterPreAuthRequestJsonParams., must be smaller than or equal to 2048.');
        }
        if ((mb_strlen($three_ds_req_prior_auth_data) < 1)) {
            throw new \InvalidArgumentException('invalid length for $three_ds_req_prior_auth_data when calling RegisterPreAuthRequestJsonParams., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~]*$/", ObjectSerializer::toString($three_ds_req_prior_auth_data)))) {
            throw new \InvalidArgumentException("invalid value for \$three_ds_req_prior_auth_data when calling RegisterPreAuthRequestJsonParams., must conform to the pattern /^[ -~]*$/.");
        }

        $this->container['three_ds_req_prior_auth_data'] = $three_ds_req_prior_auth_data;

        return $this;
    }

    /**
     * Gets three_ds_req_prior_auth_method
     *
     * @return string|null
     */
    public function getThreeDsReqPriorAuthMethod()
    {
        return $this->container['three_ds_req_prior_auth_method'];
    }

    /**
     * Sets three_ds_req_prior_auth_method
     *
     * @param string|null $three_ds_req_prior_auth_method Способ аутентификации Плательщика в первой операции в цепочке:   * `01` = Frictionless authentication occurred by ACS;   * `02` = Cardholder challenge occurred by ACS;   * `03` = AVS verified;   * `04` = Other issuer methods;   * `05`–`79` = Reserved for EMVCo future use (values invalid until defined by EMVCo);   * `80`–`99` = Reserved for DS use.
     *
     * @return self
     */
    public function setThreeDsReqPriorAuthMethod($three_ds_req_prior_auth_method)
    {
        if (is_null($three_ds_req_prior_auth_method)) {
            throw new \InvalidArgumentException('non-nullable three_ds_req_prior_auth_method cannot be null');
        }
        if ((mb_strlen($three_ds_req_prior_auth_method) > 2)) {
            throw new \InvalidArgumentException('invalid length for $three_ds_req_prior_auth_method when calling RegisterPreAuthRequestJsonParams., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($three_ds_req_prior_auth_method) < 2)) {
            throw new \InvalidArgumentException('invalid length for $three_ds_req_prior_auth_method when calling RegisterPreAuthRequestJsonParams., must be bigger than or equal to 2.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($three_ds_req_prior_auth_method)))) {
            throw new \InvalidArgumentException("invalid value for \$three_ds_req_prior_auth_method when calling RegisterPreAuthRequestJsonParams., must conform to the pattern /^\\d+$/.");
        }

        $this->container['three_ds_req_prior_auth_method'] = $three_ds_req_prior_auth_method;

        return $this;
    }

    /**
     * Gets three_ds_req_prior_auth_timestamp
     *
     * @return string|null
     */
    public function getThreeDsReqPriorAuthTimestamp()
    {
        return $this->container['three_ds_req_prior_auth_timestamp'];
    }

    /**
     * Sets three_ds_req_prior_auth_timestamp
     *
     * @param string|null $three_ds_req_prior_auth_timestamp Дата и время в UTC первой аутентификации в цепочке в формате YYYYMMDDHHMM
     *
     * @return self
     */
    public function setThreeDsReqPriorAuthTimestamp($three_ds_req_prior_auth_timestamp)
    {
        if (is_null($three_ds_req_prior_auth_timestamp)) {
            throw new \InvalidArgumentException('non-nullable three_ds_req_prior_auth_timestamp cannot be null');
        }
        if ((mb_strlen($three_ds_req_prior_auth_timestamp) > 12)) {
            throw new \InvalidArgumentException('invalid length for $three_ds_req_prior_auth_timestamp when calling RegisterPreAuthRequestJsonParams., must be smaller than or equal to 12.');
        }
        if ((mb_strlen($three_ds_req_prior_auth_timestamp) < 12)) {
            throw new \InvalidArgumentException('invalid length for $three_ds_req_prior_auth_timestamp when calling RegisterPreAuthRequestJsonParams., must be bigger than or equal to 12.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($three_ds_req_prior_auth_timestamp)))) {
            throw new \InvalidArgumentException("invalid value for \$three_ds_req_prior_auth_timestamp when calling RegisterPreAuthRequestJsonParams., must conform to the pattern /^\\d+$/.");
        }

        $this->container['three_ds_req_prior_auth_timestamp'] = $three_ds_req_prior_auth_timestamp;

        return $this;
    }

    /**
     * Gets three_ds_req_prior_ref
     *
     * @return string|null
     */
    public function getThreeDsReqPriorRef()
    {
        return $this->container['three_ds_req_prior_ref'];
    }

    /**
     * Sets three_ds_req_prior_ref
     *
     * @param string|null $three_ds_req_prior_ref ACS Transaction ID первой аутентификации в цепочке запросов (например, первой аутентификации для recurring платежа)
     *
     * @return self
     */
    public function setThreeDsReqPriorRef($three_ds_req_prior_ref)
    {
        if (is_null($three_ds_req_prior_ref)) {
            throw new \InvalidArgumentException('non-nullable three_ds_req_prior_ref cannot be null');
        }
        if ((mb_strlen($three_ds_req_prior_ref) > 36)) {
            throw new \InvalidArgumentException('invalid length for $three_ds_req_prior_ref when calling RegisterPreAuthRequestJsonParams., must be smaller than or equal to 36.');
        }
        if ((mb_strlen($three_ds_req_prior_ref) < 36)) {
            throw new \InvalidArgumentException('invalid length for $three_ds_req_prior_ref when calling RegisterPreAuthRequestJsonParams., must be bigger than or equal to 36.');
        }
        if ((!preg_match("/^[ -~]*$/", ObjectSerializer::toString($three_ds_req_prior_ref)))) {
            throw new \InvalidArgumentException("invalid value for \$three_ds_req_prior_ref when calling RegisterPreAuthRequestJsonParams., must conform to the pattern /^[ -~]*$/.");
        }

        $this->container['three_ds_req_prior_ref'] = $three_ds_req_prior_ref;

        return $this;
    }

    /**
     * Gets three_ds_req_auth_data
     *
     * @return string|null
     */
    public function getThreeDsReqAuthData()
    {
        return $this->container['three_ds_req_auth_data'];
    }

    /**
     * Sets three_ds_req_auth_data
     *
     * @param string|null $three_ds_req_auth_data Данные аутентификации Плательщика в ТСП
     *
     * @return self
     */
    public function setThreeDsReqAuthData($three_ds_req_auth_data)
    {
        if (is_null($three_ds_req_auth_data)) {
            throw new \InvalidArgumentException('non-nullable three_ds_req_auth_data cannot be null');
        }
        if ((mb_strlen($three_ds_req_auth_data) > 20000)) {
            throw new \InvalidArgumentException('invalid length for $three_ds_req_auth_data when calling RegisterPreAuthRequestJsonParams., must be smaller than or equal to 20000.');
        }
        if ((mb_strlen($three_ds_req_auth_data) < 2)) {
            throw new \InvalidArgumentException('invalid length for $three_ds_req_auth_data when calling RegisterPreAuthRequestJsonParams., must be bigger than or equal to 2.');
        }
        if ((!preg_match("/^[ -~]*$/", ObjectSerializer::toString($three_ds_req_auth_data)))) {
            throw new \InvalidArgumentException("invalid value for \$three_ds_req_auth_data when calling RegisterPreAuthRequestJsonParams., must conform to the pattern /^[ -~]*$/.");
        }

        $this->container['three_ds_req_auth_data'] = $three_ds_req_auth_data;

        return $this;
    }

    /**
     * Gets three_ds_req_auth_method
     *
     * @return string|null
     */
    public function getThreeDsReqAuthMethod()
    {
        return $this->container['three_ds_req_auth_method'];
    }

    /**
     * Sets three_ds_req_auth_method
     *
     * @param string|null $three_ds_req_auth_method Способ аутентификации Плательщика в ТСП:   * `01` = No 3DS Requestor authentication occurred (i.e. cardholder “logged in” as guest);   * `02` = Login to the cardholder account at the 3DS Requestor system using 3DS Requestor's own credentials;   * `03` = Login to the cardholder account at the 3DS Requestor system using federated ID;   * `04` = Login to the cardholder account at the 3DS Requestor system using issuer credentials;   * `05` = Login to the cardholder account at the 3DS Requestor system using third-party authentication;   * `06` = Login to the cardholder account at the 3DS Requestor system using FIDO Authenticator;   * `07` = Login to the cardholder account at the 3DS Requestor system using FIDO Authenticator;   * `08` = SRC Assurance Data;   * `09`–`79` = Reserved for EMVCo future use (values invalid until defined by EMVCo);   * `80`–`99` = Reserved for DS use.
     *
     * @return self
     */
    public function setThreeDsReqAuthMethod($three_ds_req_auth_method)
    {
        if (is_null($three_ds_req_auth_method)) {
            throw new \InvalidArgumentException('non-nullable three_ds_req_auth_method cannot be null');
        }
        if ((mb_strlen($three_ds_req_auth_method) > 2)) {
            throw new \InvalidArgumentException('invalid length for $three_ds_req_auth_method when calling RegisterPreAuthRequestJsonParams., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($three_ds_req_auth_method) < 2)) {
            throw new \InvalidArgumentException('invalid length for $three_ds_req_auth_method when calling RegisterPreAuthRequestJsonParams., must be bigger than or equal to 2.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($three_ds_req_auth_method)))) {
            throw new \InvalidArgumentException("invalid value for \$three_ds_req_auth_method when calling RegisterPreAuthRequestJsonParams., must conform to the pattern /^\\d+$/.");
        }

        $this->container['three_ds_req_auth_method'] = $three_ds_req_auth_method;

        return $this;
    }

    /**
     * Gets three_ds_req_auth_timestamp
     *
     * @return string|null
     */
    public function getThreeDsReqAuthTimestamp()
    {
        return $this->container['three_ds_req_auth_timestamp'];
    }

    /**
     * Sets three_ds_req_auth_timestamp
     *
     * @param string|null $three_ds_req_auth_timestamp Дата и время в UTC аутентификации Плательщика в ТСП в формате YYYYMMDDHHMM
     *
     * @return self
     */
    public function setThreeDsReqAuthTimestamp($three_ds_req_auth_timestamp)
    {
        if (is_null($three_ds_req_auth_timestamp)) {
            throw new \InvalidArgumentException('non-nullable three_ds_req_auth_timestamp cannot be null');
        }
        if ((mb_strlen($three_ds_req_auth_timestamp) > 12)) {
            throw new \InvalidArgumentException('invalid length for $three_ds_req_auth_timestamp when calling RegisterPreAuthRequestJsonParams., must be smaller than or equal to 12.');
        }
        if ((mb_strlen($three_ds_req_auth_timestamp) < 12)) {
            throw new \InvalidArgumentException('invalid length for $three_ds_req_auth_timestamp when calling RegisterPreAuthRequestJsonParams., must be bigger than or equal to 12.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($three_ds_req_auth_timestamp)))) {
            throw new \InvalidArgumentException("invalid value for \$three_ds_req_auth_timestamp when calling RegisterPreAuthRequestJsonParams., must conform to the pattern /^\\d+$/.");
        }

        $this->container['three_ds_req_auth_timestamp'] = $three_ds_req_auth_timestamp;

        return $this;
    }

    /**
     * Gets acct_type
     *
     * @return string|null
     */
    public function getAcctType()
    {
        return $this->container['acct_type'];
    }

    /**
     * Sets acct_type
     *
     * @param string|null $acct_type Тип счета карты Плательщика:   * `01` = Not Applicable;   * `02` = Credit;   * `03` = Debit;   * `04`–`79` = Reserved for EMVCo future use (values invalid until defined by EMVCo);   * `80`–`99` = DS or Payment System-specific.
     *
     * @return self
     */
    public function setAcctType($acct_type)
    {
        if (is_null($acct_type)) {
            throw new \InvalidArgumentException('non-nullable acct_type cannot be null');
        }
        if ((mb_strlen($acct_type) > 2)) {
            throw new \InvalidArgumentException('invalid length for $acct_type when calling RegisterPreAuthRequestJsonParams., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($acct_type) < 2)) {
            throw new \InvalidArgumentException('invalid length for $acct_type when calling RegisterPreAuthRequestJsonParams., must be bigger than or equal to 2.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($acct_type)))) {
            throw new \InvalidArgumentException("invalid value for \$acct_type when calling RegisterPreAuthRequestJsonParams., must conform to the pattern /^\\d+$/.");
        }

        $this->container['acct_type'] = $acct_type;

        return $this;
    }

    /**
     * Gets trans_type
     *
     * @return string|null
     */
    public function getTransType()
    {
        return $this->container['trans_type'];
    }

    /**
     * Sets trans_type
     *
     * @param string|null $trans_type Тип операции:   * `01` = Goods/ Service Purchase;   * `03` = Check Acceptance;   * `10` = Account Funding;   * `11` = Quasi-Cash Transaction;   * `28` = Prepaid Activation and Load.
     *
     * @return self
     */
    public function setTransType($trans_type)
    {
        if (is_null($trans_type)) {
            throw new \InvalidArgumentException('non-nullable trans_type cannot be null');
        }
        if ((mb_strlen($trans_type) > 2)) {
            throw new \InvalidArgumentException('invalid length for $trans_type when calling RegisterPreAuthRequestJsonParams., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($trans_type) < 2)) {
            throw new \InvalidArgumentException('invalid length for $trans_type when calling RegisterPreAuthRequestJsonParams., must be bigger than or equal to 2.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($trans_type)))) {
            throw new \InvalidArgumentException("invalid value for \$trans_type when calling RegisterPreAuthRequestJsonParams., must conform to the pattern /^\\d+$/.");
        }

        $this->container['trans_type'] = $trans_type;

        return $this;
    }

    /**
     * Gets addr_match
     *
     * @return string|null
     */
    public function getAddrMatch()
    {
        return $this->container['addr_match'];
    }

    /**
     * Sets addr_match
     *
     * @param string|null $addr_match Признак соответствия адреса доставки товара и адреса доставки счета:   * `Y` = Shipping Address matches Billing Address;   * `N` = Shipping Address does not match Billing Address.
     *
     * @return self
     */
    public function setAddrMatch($addr_match)
    {
        if (is_null($addr_match)) {
            throw new \InvalidArgumentException('non-nullable addr_match cannot be null');
        }
        if ((mb_strlen($addr_match) > 1)) {
            throw new \InvalidArgumentException('invalid length for $addr_match when calling RegisterPreAuthRequestJsonParams., must be smaller than or equal to 1.');
        }
        if ((mb_strlen($addr_match) < 1)) {
            throw new \InvalidArgumentException('invalid length for $addr_match when calling RegisterPreAuthRequestJsonParams., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[A-Za-z]*$/", ObjectSerializer::toString($addr_match)))) {
            throw new \InvalidArgumentException("invalid value for \$addr_match when calling RegisterPreAuthRequestJsonParams., must conform to the pattern /^[A-Za-z]*$/.");
        }

        $this->container['addr_match'] = $addr_match;

        return $this;
    }

    /**
     * Gets three_ds_requestor_challenge_ind
     *
     * @return string|null
     */
    public function getThreeDsRequestorChallengeInd()
    {
        return $this->container['three_ds_requestor_challenge_ind'];
    }

    /**
     * Sets three_ds_requestor_challenge_ind
     *
     * @param string|null $three_ds_requestor_challenge_ind Признак необходимости проведения Challenge c Плательщиком:   * `01` = No preference;   * `02` = No challenge requested;   * `03` = Challenge requested 3DS Requestor Preference;   * `04` = Challenge requested Mandate;   * `05`–`79` = Reserved for EMVCo future use (values invalid until defined by EMVCo);   * `80`-`99` = Reserved for DS use.
     *
     * @return self
     */
    public function setThreeDsRequestorChallengeInd($three_ds_requestor_challenge_ind)
    {
        if (is_null($three_ds_requestor_challenge_ind)) {
            throw new \InvalidArgumentException('non-nullable three_ds_requestor_challenge_ind cannot be null');
        }
        if ((mb_strlen($three_ds_requestor_challenge_ind) > 2)) {
            throw new \InvalidArgumentException('invalid length for $three_ds_requestor_challenge_ind when calling RegisterPreAuthRequestJsonParams., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($three_ds_requestor_challenge_ind) < 2)) {
            throw new \InvalidArgumentException('invalid length for $three_ds_requestor_challenge_ind when calling RegisterPreAuthRequestJsonParams., must be bigger than or equal to 2.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($three_ds_requestor_challenge_ind)))) {
            throw new \InvalidArgumentException("invalid value for \$three_ds_requestor_challenge_ind when calling RegisterPreAuthRequestJsonParams., must conform to the pattern /^\\d+$/.");
        }

        $this->container['three_ds_requestor_challenge_ind'] = $three_ds_requestor_challenge_ind;

        return $this;
    }

    /**
     * Gets purchase_instal_data
     *
     * @return string|null
     */
    public function getPurchaseInstalData()
    {
        return $this->container['purchase_instal_data'];
    }

    /**
     * Sets purchase_instal_data
     *
     * @param string|null $purchase_instal_data Максимальное количество авторизаций для Installment платежей
     *
     * @return self
     */
    public function setPurchaseInstalData($purchase_instal_data)
    {
        if (is_null($purchase_instal_data)) {
            throw new \InvalidArgumentException('non-nullable purchase_instal_data cannot be null');
        }
        if ((mb_strlen($purchase_instal_data) > 3)) {
            throw new \InvalidArgumentException('invalid length for $purchase_instal_data when calling RegisterPreAuthRequestJsonParams., must be smaller than or equal to 3.');
        }
        if ((mb_strlen($purchase_instal_data) < 1)) {
            throw new \InvalidArgumentException('invalid length for $purchase_instal_data when calling RegisterPreAuthRequestJsonParams., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($purchase_instal_data)))) {
            throw new \InvalidArgumentException("invalid value for \$purchase_instal_data when calling RegisterPreAuthRequestJsonParams., must conform to the pattern /^\\d+$/.");
        }

        $this->container['purchase_instal_data'] = $purchase_instal_data;

        return $this;
    }

    /**
     * Gets recurring_expiry
     *
     * @return string|null
     */
    public function getRecurringExpiry()
    {
        return $this->container['recurring_expiry'];
    }

    /**
     * Sets recurring_expiry
     *
     * @param string|null $recurring_expiry Дата последнего рекуррентного платежа в формате YYYYMMDD
     *
     * @return self
     */
    public function setRecurringExpiry($recurring_expiry)
    {
        if (is_null($recurring_expiry)) {
            throw new \InvalidArgumentException('non-nullable recurring_expiry cannot be null');
        }
        if ((mb_strlen($recurring_expiry) > 8)) {
            throw new \InvalidArgumentException('invalid length for $recurring_expiry when calling RegisterPreAuthRequestJsonParams., must be smaller than or equal to 8.');
        }
        if ((mb_strlen($recurring_expiry) < 8)) {
            throw new \InvalidArgumentException('invalid length for $recurring_expiry when calling RegisterPreAuthRequestJsonParams., must be bigger than or equal to 8.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($recurring_expiry)))) {
            throw new \InvalidArgumentException("invalid value for \$recurring_expiry when calling RegisterPreAuthRequestJsonParams., must conform to the pattern /^\\d+$/.");
        }

        $this->container['recurring_expiry'] = $recurring_expiry;

        return $this;
    }

    /**
     * Gets recurring_frequency
     *
     * @return string|null
     */
    public function getRecurringFrequency()
    {
        return $this->container['recurring_frequency'];
    }

    /**
     * Sets recurring_frequency
     *
     * @param string|null $recurring_frequency Минимальное количество дней между рекуррентными платежами
     *
     * @return self
     */
    public function setRecurringFrequency($recurring_frequency)
    {
        if (is_null($recurring_frequency)) {
            throw new \InvalidArgumentException('non-nullable recurring_frequency cannot be null');
        }
        if ((mb_strlen($recurring_frequency) > 4)) {
            throw new \InvalidArgumentException('invalid length for $recurring_frequency when calling RegisterPreAuthRequestJsonParams., must be smaller than or equal to 4.');
        }
        if ((mb_strlen($recurring_frequency) < 1)) {
            throw new \InvalidArgumentException('invalid length for $recurring_frequency when calling RegisterPreAuthRequestJsonParams., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($recurring_frequency)))) {
            throw new \InvalidArgumentException("invalid value for \$recurring_frequency when calling RegisterPreAuthRequestJsonParams., must conform to the pattern /^\\d+$/.");
        }

        $this->container['recurring_frequency'] = $recurring_frequency;

        return $this;
    }

    /**
     * Gets name1
     *
     * @return mixed|null
     */
    public function getName1()
    {
        return $this->container['name1'];
    }

    /**
     * Sets name1
     *
     * @param mixed|null $name1 Дополнительный параметр 1
     *
     * @return self
     */
    public function setName1($name1)
    {
        if (is_null($name1)) {
            array_push($this->openAPINullablesSetToNull, 'name1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name1'] = $name1;

        return $this;
    }

    /**
     * Gets name2
     *
     * @return mixed|null
     */
    public function getName2()
    {
        return $this->container['name2'];
    }

    /**
     * Sets name2
     *
     * @param mixed|null $name2 Дополнительный параметр 2
     *
     * @return self
     */
    public function setName2($name2)
    {
        if (is_null($name2)) {
            array_push($this->openAPINullablesSetToNull, 'name2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name2'] = $name2;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


