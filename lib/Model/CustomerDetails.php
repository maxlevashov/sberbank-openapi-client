<?php
/**
 * CustomerDetails
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Sberbank
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API платёжного шлюза Сбербанка
 *
 * Настоящий документ описывает программные интерфейсы платёжного шлюза Сбербанка, который позволяет проводить платежи в интернет-эквайринге.
 *
 * The version of the OpenAPI document: 1.0.7
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Sberbank\Model;

use \ArrayAccess;
use \Sberbank\ObjectSerializer;

/**
 * CustomerDetails Class Doc Comment
 *
 * @category Class
 * @description Блок для передачи параметров с данными о Покупателе
 * @package  Sberbank
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CustomerDetails implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'customerDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'delivery_info' => '\Sberbank\Model\CustomerDetailsDeliveryInfo',
        'full_name' => 'string',
        'inn' => 'string',
        'address' => 'string',
        'birthdate' => 'float',
        'citizenship' => 'string',
        'document_type' => 'string',
        'document_no' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'delivery_info' => null,
        'full_name' => null,
        'inn' => null,
        'address' => null,
        'birthdate' => 'date',
        'citizenship' => null,
        'document_type' => null,
        'document_no' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'delivery_info' => false,
        'full_name' => false,
        'inn' => false,
        'address' => false,
        'birthdate' => false,
        'citizenship' => false,
        'document_type' => false,
        'document_no' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'delivery_info' => 'deliveryInfo',
        'full_name' => 'fullName',
        'inn' => 'inn',
        'address' => 'address',
        'birthdate' => 'birthdate',
        'citizenship' => 'citizenship',
        'document_type' => 'documentType',
        'document_no' => 'documentNo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'delivery_info' => 'setDeliveryInfo',
        'full_name' => 'setFullName',
        'inn' => 'setInn',
        'address' => 'setAddress',
        'birthdate' => 'setBirthdate',
        'citizenship' => 'setCitizenship',
        'document_type' => 'setDocumentType',
        'document_no' => 'setDocumentNo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'delivery_info' => 'getDeliveryInfo',
        'full_name' => 'getFullName',
        'inn' => 'getInn',
        'address' => 'getAddress',
        'birthdate' => 'getBirthdate',
        'citizenship' => 'getCitizenship',
        'document_type' => 'getDocumentType',
        'document_no' => 'getDocumentNo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('delivery_info', $data ?? [], null);
        $this->setIfExists('full_name', $data ?? [], null);
        $this->setIfExists('inn', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('birthdate', $data ?? [], null);
        $this->setIfExists('citizenship', $data ?? [], null);
        $this->setIfExists('document_type', $data ?? [], null);
        $this->setIfExists('document_no', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['full_name']) && (mb_strlen($this->container['full_name']) > 100)) {
            $invalidProperties[] = "invalid value for 'full_name', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['full_name']) && (mb_strlen($this->container['full_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'full_name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['full_name']) && !preg_match("/^[ -~А-Яа-яЁё№]*$/", $this->container['full_name'])) {
            $invalidProperties[] = "invalid value for 'full_name', must be conform to the pattern /^[ -~А-Яа-яЁё№]*$/.";
        }

        if (!is_null($this->container['inn']) && (mb_strlen($this->container['inn']) > 12)) {
            $invalidProperties[] = "invalid value for 'inn', the character length must be smaller than or equal to 12.";
        }

        if (!is_null($this->container['inn']) && (mb_strlen($this->container['inn']) < 10)) {
            $invalidProperties[] = "invalid value for 'inn', the character length must be bigger than or equal to 10.";
        }

        if (!is_null($this->container['inn']) && !preg_match("/^\\d+$/", $this->container['inn'])) {
            $invalidProperties[] = "invalid value for 'inn', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['address']) && (mb_strlen($this->container['address']) > 256)) {
            $invalidProperties[] = "invalid value for 'address', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['address']) && (mb_strlen($this->container['address']) < 1)) {
            $invalidProperties[] = "invalid value for 'address', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['address']) && !preg_match("/^[ -~А-Яа-яЁё№]*$ 256/", $this->container['address'])) {
            $invalidProperties[] = "invalid value for 'address', must be conform to the pattern /^[ -~А-Яа-яЁё№]*$ 256/.";
        }

        if (!is_null($this->container['birthdate']) && (mb_strlen($this->container['birthdate']) > 10)) {
            $invalidProperties[] = "invalid value for 'birthdate', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['birthdate']) && (mb_strlen($this->container['birthdate']) < 10)) {
            $invalidProperties[] = "invalid value for 'birthdate', the character length must be bigger than or equal to 10.";
        }

        if (!is_null($this->container['citizenship']) && (mb_strlen($this->container['citizenship']) > 3)) {
            $invalidProperties[] = "invalid value for 'citizenship', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['citizenship']) && (mb_strlen($this->container['citizenship']) < 3)) {
            $invalidProperties[] = "invalid value for 'citizenship', the character length must be bigger than or equal to 3.";
        }

        if (!is_null($this->container['citizenship']) && !preg_match("/^\\d+$/", $this->container['citizenship'])) {
            $invalidProperties[] = "invalid value for 'citizenship', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['document_type']) && (mb_strlen($this->container['document_type']) > 2)) {
            $invalidProperties[] = "invalid value for 'document_type', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['document_type']) && (mb_strlen($this->container['document_type']) < 2)) {
            $invalidProperties[] = "invalid value for 'document_type', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['document_type']) && !preg_match("/^\\d+$/", $this->container['document_type'])) {
            $invalidProperties[] = "invalid value for 'document_type', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['document_no']) && (mb_strlen($this->container['document_no']) > 64)) {
            $invalidProperties[] = "invalid value for 'document_no', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['document_no']) && (mb_strlen($this->container['document_no']) < 1)) {
            $invalidProperties[] = "invalid value for 'document_no', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['document_no']) && !preg_match("/^[A-Za-z0-9]*$/", $this->container['document_no'])) {
            $invalidProperties[] = "invalid value for 'document_no', must be conform to the pattern /^[A-Za-z0-9]*$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets delivery_info
     *
     * @return \Sberbank\Model\CustomerDetailsDeliveryInfo|null
     */
    public function getDeliveryInfo()
    {
        return $this->container['delivery_info'];
    }

    /**
     * Sets delivery_info
     *
     * @param \Sberbank\Model\CustomerDetailsDeliveryInfo|null $delivery_info delivery_info
     *
     * @return self
     */
    public function setDeliveryInfo($delivery_info)
    {
        if (is_null($delivery_info)) {
            throw new \InvalidArgumentException('non-nullable delivery_info cannot be null');
        }
        $this->container['delivery_info'] = $delivery_info;

        return $this;
    }

    /**
     * Gets full_name
     *
     * @return string|null
     */
    public function getFullName()
    {
        return $this->container['full_name'];
    }

    /**
     * Sets full_name
     *
     * @param string|null $full_name __Тег ФФД 1227.__ Наименование организации, для физ. лица или ИП - ФИО. В ФФД 1.2 рекомендовано при передаче данного поля заполнить тег 1228 или теги 1243, 1245, 1246.
     *
     * @return self
     */
    public function setFullName($full_name)
    {
        if (is_null($full_name)) {
            throw new \InvalidArgumentException('non-nullable full_name cannot be null');
        }
        if ((mb_strlen($full_name) > 100)) {
            throw new \InvalidArgumentException('invalid length for $full_name when calling CustomerDetails., must be smaller than or equal to 100.');
        }
        if ((mb_strlen($full_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $full_name when calling CustomerDetails., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~А-Яа-яЁё№]*$/", ObjectSerializer::toString($full_name)))) {
            throw new \InvalidArgumentException("invalid value for \$full_name when calling CustomerDetails., must conform to the pattern /^[ -~А-Яа-яЁё№]*$/.");
        }

        $this->container['full_name'] = $full_name;

        return $this;
    }

    /**
     * Gets inn
     *
     * @return string|null
     */
    public function getInn()
    {
        return $this->container['inn'];
    }

    /**
     * Sets inn
     *
     * @param string|null $inn __Тег ФФД 1228.__ ИНН Юрлица или ИП (если покупатель Юрлицо или ИП) или физ. лица (если покупатель физ. лицо).
     *
     * @return self
     */
    public function setInn($inn)
    {
        if (is_null($inn)) {
            throw new \InvalidArgumentException('non-nullable inn cannot be null');
        }
        if ((mb_strlen($inn) > 12)) {
            throw new \InvalidArgumentException('invalid length for $inn when calling CustomerDetails., must be smaller than or equal to 12.');
        }
        if ((mb_strlen($inn) < 10)) {
            throw new \InvalidArgumentException('invalid length for $inn when calling CustomerDetails., must be bigger than or equal to 10.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($inn)))) {
            throw new \InvalidArgumentException("invalid value for \$inn when calling CustomerDetails., must conform to the pattern /^\\d+$/.");
        }

        $this->container['inn'] = $inn;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string|null $address __Тег ФФД 1254.__ Адрес Юрлица или ИП. Параметр передается только в случае, если покупатель Юрлицо или ИП. Только для ФФД 1.2.
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }
        if ((mb_strlen($address) > 256)) {
            throw new \InvalidArgumentException('invalid length for $address when calling CustomerDetails., must be smaller than or equal to 256.');
        }
        if ((mb_strlen($address) < 1)) {
            throw new \InvalidArgumentException('invalid length for $address when calling CustomerDetails., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~А-Яа-яЁё№]*$ 256/", ObjectSerializer::toString($address)))) {
            throw new \InvalidArgumentException("invalid value for \$address when calling CustomerDetails., must conform to the pattern /^[ -~А-Яа-яЁё№]*$ 256/.");
        }

        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets birthdate
     *
     * @return float|null
     */
    public function getBirthdate()
    {
        return $this->container['birthdate'];
    }

    /**
     * Sets birthdate
     *
     * @param float|null $birthdate __Тег ФФД 1243.__ Дата рождения покупателя. Только для ФФД 1.2.
     *
     * @return self
     */
    public function setBirthdate($birthdate)
    {
        if (is_null($birthdate)) {
            throw new \InvalidArgumentException('non-nullable birthdate cannot be null');
        }
        if ((mb_strlen($birthdate) > 10)) {
            throw new \InvalidArgumentException('invalid length for $birthdate when calling CustomerDetails., must be smaller than or equal to 10.');
        }
        if ((mb_strlen($birthdate) < 10)) {
            throw new \InvalidArgumentException('invalid length for $birthdate when calling CustomerDetails., must be bigger than or equal to 10.');
        }

        $this->container['birthdate'] = $birthdate;

        return $this;
    }

    /**
     * Gets citizenship
     *
     * @return string|null
     */
    public function getCitizenship()
    {
        return $this->container['citizenship'];
    }

    /**
     * Sets citizenship
     *
     * @param string|null $citizenship __Тег ФФД 1244.__ Код страны, гражданином которой является покупатель. Указывается в соответствии с ОКСМ. Используется только в случае, если покупатель - иностранный гражданин. Только для ФФД 1.2
     *
     * @return self
     */
    public function setCitizenship($citizenship)
    {
        if (is_null($citizenship)) {
            throw new \InvalidArgumentException('non-nullable citizenship cannot be null');
        }
        if ((mb_strlen($citizenship) > 3)) {
            throw new \InvalidArgumentException('invalid length for $citizenship when calling CustomerDetails., must be smaller than or equal to 3.');
        }
        if ((mb_strlen($citizenship) < 3)) {
            throw new \InvalidArgumentException('invalid length for $citizenship when calling CustomerDetails., must be bigger than or equal to 3.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($citizenship)))) {
            throw new \InvalidArgumentException("invalid value for \$citizenship when calling CustomerDetails., must conform to the pattern /^\\d+$/.");
        }

        $this->container['citizenship'] = $citizenship;

        return $this;
    }

    /**
     * Gets document_type
     *
     * @return string|null
     */
    public function getDocumentType()
    {
        return $this->container['document_type'];
    }

    /**
     * Sets document_type
     *
     * @param string|null $document_type __Тег ФФД 1245.__ Код документа, удостверяющего личность. Допустимо указывать одно из значений справочника. Только для ФФД 1.2  Значение | Наименование ---------|--------------------------------- 21       | Паспорт гражданина Российской Федерации 22       | Паспорт гражданина Российской Федерации, дипломатический паспорт, служебный паспорт, удостоверяющие личность гражданина Российской Федерации за пределами Российской Федерации 26       | Временное удостоверение личности гражданина Российской Федерации, выдаваемое на период оформления паспорта гражданина Российской Федерации 27       | Свидетельство о рождении гражданина Российской Федерации (для граждан Российской Федерации в возрасте до 14 лет) 28       | Иные документы, признаваемые документами, удостоверяющими личность гражданина Российской Федерации в соответствии с законодательством Российской Федерации 31       | Паспорт иностранного гражданина 32       | Иные документы, признаваемые документами, удостоверяющими личность иностранного гражданина в соответствии с законодательством Российской Федерации и международным договором Российской Федерации 33       | Документ, выданный иностранным государством и признаваемый в соответствии с международным договором Российской Федерации в качестве документа, удостоверяющего личность лица без гражданства. 34       | Вид на жительство (для лиц без гражданства) 35       | Разрешение на временное проживание (для лиц без гражданства) 36       | Свидетельство о рассмотрении ходатайства о признании лица без гражданства беженцем на территории Российской Федерации по существу 37       | Удостоверение беженца 38       | Иные документы, признаваемые документами, удостоверяющими личность лиц без гражданства в соответствии с законодательством Российской Федерации и международным договором Российской Федерации 40       | Документ, удостоверяющий личность лица, не имеющего действительного документа, удостоверяющего личность, на период рассмотрения заявления о признании гражданином Российской Федерации или о приеме в гражданство Российской Федерации
     *
     * @return self
     */
    public function setDocumentType($document_type)
    {
        if (is_null($document_type)) {
            throw new \InvalidArgumentException('non-nullable document_type cannot be null');
        }
        if ((mb_strlen($document_type) > 2)) {
            throw new \InvalidArgumentException('invalid length for $document_type when calling CustomerDetails., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($document_type) < 2)) {
            throw new \InvalidArgumentException('invalid length for $document_type when calling CustomerDetails., must be bigger than or equal to 2.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($document_type)))) {
            throw new \InvalidArgumentException("invalid value for \$document_type when calling CustomerDetails., must conform to the pattern /^\\d+$/.");
        }

        $this->container['document_type'] = $document_type;

        return $this;
    }

    /**
     * Gets document_no
     *
     * @return string|null
     */
    public function getDocumentNo()
    {
        return $this->container['document_no'];
    }

    /**
     * Sets document_no
     *
     * @param string|null $document_no __Тег ФФД 1246.__ Номер документа, удостоверяющего личность. Только для ФФД 1.2
     *
     * @return self
     */
    public function setDocumentNo($document_no)
    {
        if (is_null($document_no)) {
            throw new \InvalidArgumentException('non-nullable document_no cannot be null');
        }
        if ((mb_strlen($document_no) > 64)) {
            throw new \InvalidArgumentException('invalid length for $document_no when calling CustomerDetails., must be smaller than or equal to 64.');
        }
        if ((mb_strlen($document_no) < 1)) {
            throw new \InvalidArgumentException('invalid length for $document_no when calling CustomerDetails., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[A-Za-z0-9]*$/", ObjectSerializer::toString($document_no)))) {
            throw new \InvalidArgumentException("invalid value for \$document_no when calling CustomerDetails., must conform to the pattern /^[A-Za-z0-9]*$/.");
        }

        $this->container['document_no'] = $document_no;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


