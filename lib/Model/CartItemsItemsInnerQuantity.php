<?php
/**
 * CartItemsItemsInnerQuantity
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Sberbank
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API платёжного шлюза Сбербанка
 *
 * Настоящий документ описывает программные интерфейсы платёжного шлюза Сбербанка, который позволяет проводить платежи в интернет-эквайринге.
 *
 * The version of the OpenAPI document: 1.0.7
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Sberbank\Model;

use \ArrayAccess;
use \Sberbank\ObjectSerializer;

/**
 * CartItemsItemsInnerQuantity Class Doc Comment
 *
 * @category Class
 * @description Блок для передачи общего количество товарных позиций одного positionId и их меру измерения
 * @package  Sberbank
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CartItemsItemsInnerQuantity implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'cartItems_items_inner_quantity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'value' => 'float',
        'measure' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'value' => null,
        'measure' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'value' => false,
        'measure' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'value' => 'value',
        'measure' => 'measure'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'value' => 'setValue',
        'measure' => 'setMeasure'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'value' => 'getValue',
        'measure' => 'getMeasure'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const MEASURE__0 = '0';
    public const MEASURE__10 = '10';
    public const MEASURE__11 = '11';
    public const MEASURE__12 = '12';
    public const MEASURE__20 = '20';
    public const MEASURE__21 = '21';
    public const MEASURE__22 = '22';
    public const MEASURE__30 = '30';
    public const MEASURE__31 = '31';
    public const MEASURE__32 = '32';
    public const MEASURE__40 = '40';
    public const MEASURE__41 = '41';
    public const MEASURE__42 = '42';
    public const MEASURE__50 = '50';
    public const MEASURE__51 = '51';
    public const MEASURE__70 = '70';
    public const MEASURE__71 = '71';
    public const MEASURE__72 = '72';
    public const MEASURE__73 = '73';
    public const MEASURE__80 = '80';
    public const MEASURE__81 = '81';
    public const MEASURE__82 = '82';
    public const MEASURE__83 = '83';
    public const MEASURE__255 = '255';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMeasureAllowableValues()
    {
        return [
            self::MEASURE__0,
            self::MEASURE__10,
            self::MEASURE__11,
            self::MEASURE__12,
            self::MEASURE__20,
            self::MEASURE__21,
            self::MEASURE__22,
            self::MEASURE__30,
            self::MEASURE__31,
            self::MEASURE__32,
            self::MEASURE__40,
            self::MEASURE__41,
            self::MEASURE__42,
            self::MEASURE__50,
            self::MEASURE__51,
            self::MEASURE__70,
            self::MEASURE__71,
            self::MEASURE__72,
            self::MEASURE__73,
            self::MEASURE__80,
            self::MEASURE__81,
            self::MEASURE__82,
            self::MEASURE__83,
            self::MEASURE__255,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('value', $data ?? [], null);
        $this->setIfExists('measure', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['value'] === null) {
            $invalidProperties[] = "'value' can't be null";
        }
        if (($this->container['value'] > 99999.999)) {
            $invalidProperties[] = "invalid value for 'value', must be smaller than or equal to 99999.999.";
        }

        if (($this->container['value'] < 0)) {
            $invalidProperties[] = "invalid value for 'value', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getMeasureAllowableValues();
        if (!is_null($this->container['measure']) && !in_array($this->container['measure'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'measure', must be one of '%s'",
                $this->container['measure'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets value
     *
     * @return float
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param float $value __Тег ФФД 1023.__ Количество товарных позиций данного positionId. Шаг измерения - 0.001, максимальная величина 99999.999
     *
     * @return self
     */
    public function setValue($value)
    {
        if (is_null($value)) {
            throw new \InvalidArgumentException('non-nullable value cannot be null');
        }

        if (($value > 99999.999)) {
            throw new \InvalidArgumentException('invalid value for $value when calling CartItemsItemsInnerQuantity., must be smaller than or equal to 99999.999.');
        }
        if (($value < 0)) {
            throw new \InvalidArgumentException('invalid value for $value when calling CartItemsItemsInnerQuantity., must be bigger than or equal to 0.');
        }

        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets measure
     *
     * @return string|null
     */
    public function getMeasure()
    {
        return $this->container['measure'];
    }

    /**
     * Sets measure
     *
     * @param string|null $measure __Тег ФФД 2108.__ Мера измерения количества товарной позиции. Параметр передается только при использовании ФФД версии 1.2 и имеет только числовое значение:   * 0 - Для товаров, реализуемых поштучно или единицами.   * 10 - Грамм   * 11 - Килограмм   * 12 - Тонна   * 20 - Сантиметр   * 21 - Дециметр   * 22 - Метр   * 30 - Квадратный сантиметр   * 31 - Квадратный дециметр   * 32 - Квадратный метр   * 40 - Милилитр   * 41 - Литр   * 42 - Кубический метр   * 50 - Киловатт-час   * 51 - Гигакалория   * 70 - Сутки (День)   * 71 - Час   * 72 - Минута   * 73 - Секунда   * 80 - Килобайт   * 81 - Мегабайт   * 82 - Гигабайт   * 83 - Терабайт   * 255 - Применяется при использовании иных единиц измерения
     *
     * @return self
     */
    public function setMeasure($measure)
    {
        if (is_null($measure)) {
            throw new \InvalidArgumentException('non-nullable measure cannot be null');
        }
        $allowedValues = $this->getMeasureAllowableValues();
        if (!in_array($measure, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'measure', must be one of '%s'",
                    $measure,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['measure'] = $measure;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


