<?php
/**
 * TdsBrowserAttributes
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Sberbank
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API платёжного шлюза Сбербанка
 *
 * Настоящий документ описывает программные интерфейсы платёжного шлюза Сбербанка, который позволяет проводить платежи в интернет-эквайринге.
 *
 * The version of the OpenAPI document: 1.0.7
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Sberbank\Model;

use \ArrayAccess;
use \Sberbank\ObjectSerializer;

/**
 * TdsBrowserAttributes Class Doc Comment
 *
 * @category Class
 * @description Прамтеры браузера для 3-D Secure для проведения 3-D Secure аутентификации на стороне ПШ
 * @package  Sberbank
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TdsBrowserAttributes implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'tdsBrowserAttributes';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'challenge_window_size' => 'string',
        'browser_accept_header' => 'string',
        'browser_ip' => 'string',
        'browser_java_enabled' => 'bool',
        'browser_javascript_enabled' => 'bool',
        'browser_language' => 'string',
        'browser_color_depth' => 'string',
        'browser_screen_height' => 'string',
        'browser_screen_width' => 'string',
        'browser_tz' => 'string',
        'browser_user_agent' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'challenge_window_size' => null,
        'browser_accept_header' => null,
        'browser_ip' => null,
        'browser_java_enabled' => null,
        'browser_javascript_enabled' => null,
        'browser_language' => null,
        'browser_color_depth' => null,
        'browser_screen_height' => null,
        'browser_screen_width' => null,
        'browser_tz' => null,
        'browser_user_agent' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'challenge_window_size' => false,
        'browser_accept_header' => false,
        'browser_ip' => false,
        'browser_java_enabled' => false,
        'browser_javascript_enabled' => false,
        'browser_language' => false,
        'browser_color_depth' => false,
        'browser_screen_height' => false,
        'browser_screen_width' => false,
        'browser_tz' => false,
        'browser_user_agent' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'challenge_window_size' => 'challengeWindowSize',
        'browser_accept_header' => 'browserAcceptHeader',
        'browser_ip' => 'browserIP',
        'browser_java_enabled' => 'browserJavaEnabled',
        'browser_javascript_enabled' => 'browserJavascriptEnabled',
        'browser_language' => 'browserLanguage',
        'browser_color_depth' => 'browserColorDepth',
        'browser_screen_height' => 'browserScreenHeight',
        'browser_screen_width' => 'browserScreenWidth',
        'browser_tz' => 'browserTZ',
        'browser_user_agent' => 'browserUserAgent'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'challenge_window_size' => 'setChallengeWindowSize',
        'browser_accept_header' => 'setBrowserAcceptHeader',
        'browser_ip' => 'setBrowserIp',
        'browser_java_enabled' => 'setBrowserJavaEnabled',
        'browser_javascript_enabled' => 'setBrowserJavascriptEnabled',
        'browser_language' => 'setBrowserLanguage',
        'browser_color_depth' => 'setBrowserColorDepth',
        'browser_screen_height' => 'setBrowserScreenHeight',
        'browser_screen_width' => 'setBrowserScreenWidth',
        'browser_tz' => 'setBrowserTz',
        'browser_user_agent' => 'setBrowserUserAgent'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'challenge_window_size' => 'getChallengeWindowSize',
        'browser_accept_header' => 'getBrowserAcceptHeader',
        'browser_ip' => 'getBrowserIp',
        'browser_java_enabled' => 'getBrowserJavaEnabled',
        'browser_javascript_enabled' => 'getBrowserJavascriptEnabled',
        'browser_language' => 'getBrowserLanguage',
        'browser_color_depth' => 'getBrowserColorDepth',
        'browser_screen_height' => 'getBrowserScreenHeight',
        'browser_screen_width' => 'getBrowserScreenWidth',
        'browser_tz' => 'getBrowserTz',
        'browser_user_agent' => 'getBrowserUserAgent'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const BROWSER_COLOR_DEPTH__1 = '1';
    public const BROWSER_COLOR_DEPTH__4 = '4';
    public const BROWSER_COLOR_DEPTH__8 = '8';
    public const BROWSER_COLOR_DEPTH__15 = '15';
    public const BROWSER_COLOR_DEPTH__16 = '16';
    public const BROWSER_COLOR_DEPTH__24 = '24';
    public const BROWSER_COLOR_DEPTH__32 = '32';
    public const BROWSER_COLOR_DEPTH__48 = '48';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBrowserColorDepthAllowableValues()
    {
        return [
            self::BROWSER_COLOR_DEPTH__1,
            self::BROWSER_COLOR_DEPTH__4,
            self::BROWSER_COLOR_DEPTH__8,
            self::BROWSER_COLOR_DEPTH__15,
            self::BROWSER_COLOR_DEPTH__16,
            self::BROWSER_COLOR_DEPTH__24,
            self::BROWSER_COLOR_DEPTH__32,
            self::BROWSER_COLOR_DEPTH__48,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('challenge_window_size', $data ?? [], null);
        $this->setIfExists('browser_accept_header', $data ?? [], null);
        $this->setIfExists('browser_ip', $data ?? [], null);
        $this->setIfExists('browser_java_enabled', $data ?? [], null);
        $this->setIfExists('browser_javascript_enabled', $data ?? [], null);
        $this->setIfExists('browser_language', $data ?? [], null);
        $this->setIfExists('browser_color_depth', $data ?? [], null);
        $this->setIfExists('browser_screen_height', $data ?? [], null);
        $this->setIfExists('browser_screen_width', $data ?? [], null);
        $this->setIfExists('browser_tz', $data ?? [], null);
        $this->setIfExists('browser_user_agent', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['challenge_window_size']) && (mb_strlen($this->container['challenge_window_size']) > 2)) {
            $invalidProperties[] = "invalid value for 'challenge_window_size', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['challenge_window_size']) && (mb_strlen($this->container['challenge_window_size']) < 2)) {
            $invalidProperties[] = "invalid value for 'challenge_window_size', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['challenge_window_size']) && !preg_match("/^\\d+$/", $this->container['challenge_window_size'])) {
            $invalidProperties[] = "invalid value for 'challenge_window_size', must be conform to the pattern /^\\d+$/.";
        }

        if ($this->container['browser_accept_header'] === null) {
            $invalidProperties[] = "'browser_accept_header' can't be null";
        }
        if ((mb_strlen($this->container['browser_accept_header']) > 2048)) {
            $invalidProperties[] = "invalid value for 'browser_accept_header', the character length must be smaller than or equal to 2048.";
        }

        if ((mb_strlen($this->container['browser_accept_header']) < 1)) {
            $invalidProperties[] = "invalid value for 'browser_accept_header', the character length must be bigger than or equal to 1.";
        }

        if (!preg_match("/^[ -~]*$/", $this->container['browser_accept_header'])) {
            $invalidProperties[] = "invalid value for 'browser_accept_header', must be conform to the pattern /^[ -~]*$/.";
        }

        if ($this->container['browser_ip'] === null) {
            $invalidProperties[] = "'browser_ip' can't be null";
        }
        if ((mb_strlen($this->container['browser_ip']) > 45)) {
            $invalidProperties[] = "invalid value for 'browser_ip', the character length must be smaller than or equal to 45.";
        }

        if ((mb_strlen($this->container['browser_ip']) < 1)) {
            $invalidProperties[] = "invalid value for 'browser_ip', the character length must be bigger than or equal to 1.";
        }

        if (!preg_match("/^[ -~]*$/", $this->container['browser_ip'])) {
            $invalidProperties[] = "invalid value for 'browser_ip', must be conform to the pattern /^[ -~]*$/.";
        }

        if ($this->container['browser_javascript_enabled'] === null) {
            $invalidProperties[] = "'browser_javascript_enabled' can't be null";
        }
        if (!is_null($this->container['browser_language']) && (mb_strlen($this->container['browser_language']) > 8)) {
            $invalidProperties[] = "invalid value for 'browser_language', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['browser_language']) && (mb_strlen($this->container['browser_language']) < 1)) {
            $invalidProperties[] = "invalid value for 'browser_language', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['browser_language']) && !preg_match("/^[ -~]*$/", $this->container['browser_language'])) {
            $invalidProperties[] = "invalid value for 'browser_language', must be conform to the pattern /^[ -~]*$/.";
        }

        $allowedValues = $this->getBrowserColorDepthAllowableValues();
        if (!is_null($this->container['browser_color_depth']) && !in_array($this->container['browser_color_depth'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'browser_color_depth', must be one of '%s'",
                $this->container['browser_color_depth'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['browser_screen_height']) && (mb_strlen($this->container['browser_screen_height']) > 6)) {
            $invalidProperties[] = "invalid value for 'browser_screen_height', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['browser_screen_height']) && (mb_strlen($this->container['browser_screen_height']) < 1)) {
            $invalidProperties[] = "invalid value for 'browser_screen_height', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['browser_screen_height']) && !preg_match("/^\\d+$/", $this->container['browser_screen_height'])) {
            $invalidProperties[] = "invalid value for 'browser_screen_height', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['browser_screen_width']) && (mb_strlen($this->container['browser_screen_width']) > 6)) {
            $invalidProperties[] = "invalid value for 'browser_screen_width', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['browser_screen_width']) && (mb_strlen($this->container['browser_screen_width']) < 1)) {
            $invalidProperties[] = "invalid value for 'browser_screen_width', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['browser_screen_width']) && !preg_match("/^\\d+$/", $this->container['browser_screen_width'])) {
            $invalidProperties[] = "invalid value for 'browser_screen_width', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['browser_tz']) && (mb_strlen($this->container['browser_tz']) > 5)) {
            $invalidProperties[] = "invalid value for 'browser_tz', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['browser_tz']) && (mb_strlen($this->container['browser_tz']) < 1)) {
            $invalidProperties[] = "invalid value for 'browser_tz', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['browser_tz']) && !preg_match("/^[ -~]*$/", $this->container['browser_tz'])) {
            $invalidProperties[] = "invalid value for 'browser_tz', must be conform to the pattern /^[ -~]*$/.";
        }

        if ($this->container['browser_user_agent'] === null) {
            $invalidProperties[] = "'browser_user_agent' can't be null";
        }
        if ((mb_strlen($this->container['browser_user_agent']) > 2048)) {
            $invalidProperties[] = "invalid value for 'browser_user_agent', the character length must be smaller than or equal to 2048.";
        }

        if ((mb_strlen($this->container['browser_user_agent']) < 1)) {
            $invalidProperties[] = "invalid value for 'browser_user_agent', the character length must be bigger than or equal to 1.";
        }

        if (!preg_match("/^[ -~]*$/", $this->container['browser_user_agent'])) {
            $invalidProperties[] = "invalid value for 'browser_user_agent', must be conform to the pattern /^[ -~]*$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets challenge_window_size
     *
     * @return string|null
     */
    public function getChallengeWindowSize()
    {
        return $this->container['challenge_window_size'];
    }

    /**
     * Sets challenge_window_size
     *
     * @param string|null $challenge_window_size Разрешение страниц ACS, в случае проведения Challenge с Плательщиком по протоколу 3-D Secure на базе EMV 2.x.x   * `01` = 250x400   * `02` = 390x400 (по умолчанию)   * `03` = 500x600   * `04` = 600x400   * `05` = Full screen
     *
     * @return self
     */
    public function setChallengeWindowSize($challenge_window_size)
    {
        if (is_null($challenge_window_size)) {
            throw new \InvalidArgumentException('non-nullable challenge_window_size cannot be null');
        }
        if ((mb_strlen($challenge_window_size) > 2)) {
            throw new \InvalidArgumentException('invalid length for $challenge_window_size when calling TdsBrowserAttributes., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($challenge_window_size) < 2)) {
            throw new \InvalidArgumentException('invalid length for $challenge_window_size when calling TdsBrowserAttributes., must be bigger than or equal to 2.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($challenge_window_size)))) {
            throw new \InvalidArgumentException("invalid value for \$challenge_window_size when calling TdsBrowserAttributes., must conform to the pattern /^\\d+$/.");
        }

        $this->container['challenge_window_size'] = $challenge_window_size;

        return $this;
    }

    /**
     * Gets browser_accept_header
     *
     * @return string
     */
    public function getBrowserAcceptHeader()
    {
        return $this->container['browser_accept_header'];
    }

    /**
     * Sets browser_accept_header
     *
     * @param string $browser_accept_header Содержимое HTTP accept headers браузера Плательщика. Обязательно для Browser-based операций
     *
     * @return self
     */
    public function setBrowserAcceptHeader($browser_accept_header)
    {
        if (is_null($browser_accept_header)) {
            throw new \InvalidArgumentException('non-nullable browser_accept_header cannot be null');
        }
        if ((mb_strlen($browser_accept_header) > 2048)) {
            throw new \InvalidArgumentException('invalid length for $browser_accept_header when calling TdsBrowserAttributes., must be smaller than or equal to 2048.');
        }
        if ((mb_strlen($browser_accept_header) < 1)) {
            throw new \InvalidArgumentException('invalid length for $browser_accept_header when calling TdsBrowserAttributes., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~]*$/", ObjectSerializer::toString($browser_accept_header)))) {
            throw new \InvalidArgumentException("invalid value for \$browser_accept_header when calling TdsBrowserAttributes., must conform to the pattern /^[ -~]*$/.");
        }

        $this->container['browser_accept_header'] = $browser_accept_header;

        return $this;
    }

    /**
     * Gets browser_ip
     *
     * @return string
     */
    public function getBrowserIp()
    {
        return $this->container['browser_ip'];
    }

    /**
     * Sets browser_ip
     *
     * @param string $browser_ip IP адрес Плательщика, полученный из HTTP заголовков браузера. Обязательно для Browser-based операций
     *
     * @return self
     */
    public function setBrowserIp($browser_ip)
    {
        if (is_null($browser_ip)) {
            throw new \InvalidArgumentException('non-nullable browser_ip cannot be null');
        }
        if ((mb_strlen($browser_ip) > 45)) {
            throw new \InvalidArgumentException('invalid length for $browser_ip when calling TdsBrowserAttributes., must be smaller than or equal to 45.');
        }
        if ((mb_strlen($browser_ip) < 1)) {
            throw new \InvalidArgumentException('invalid length for $browser_ip when calling TdsBrowserAttributes., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~]*$/", ObjectSerializer::toString($browser_ip)))) {
            throw new \InvalidArgumentException("invalid value for \$browser_ip when calling TdsBrowserAttributes., must conform to the pattern /^[ -~]*$/.");
        }

        $this->container['browser_ip'] = $browser_ip;

        return $this;
    }

    /**
     * Gets browser_java_enabled
     *
     * @return bool|null
     */
    public function getBrowserJavaEnabled()
    {
        return $this->container['browser_java_enabled'];
    }

    /**
     * Sets browser_java_enabled
     *
     * @param bool|null $browser_java_enabled Возможность браузера выполнять Java, значение свойства navigator.javaEnabled. Обязательно, если browserJavascriptEnabled = true
     *
     * @return self
     */
    public function setBrowserJavaEnabled($browser_java_enabled)
    {
        if (is_null($browser_java_enabled)) {
            throw new \InvalidArgumentException('non-nullable browser_java_enabled cannot be null');
        }
        $this->container['browser_java_enabled'] = $browser_java_enabled;

        return $this;
    }

    /**
     * Gets browser_javascript_enabled
     *
     * @return bool
     */
    public function getBrowserJavascriptEnabled()
    {
        return $this->container['browser_javascript_enabled'];
    }

    /**
     * Sets browser_javascript_enabled
     *
     * @param bool $browser_javascript_enabled Возможность браузера выполнять JavaScript. Обязательно для Browser-based операций.
     *
     * @return self
     */
    public function setBrowserJavascriptEnabled($browser_javascript_enabled)
    {
        if (is_null($browser_javascript_enabled)) {
            throw new \InvalidArgumentException('non-nullable browser_javascript_enabled cannot be null');
        }
        $this->container['browser_javascript_enabled'] = $browser_javascript_enabled;

        return $this;
    }

    /**
     * Gets browser_language
     *
     * @return string|null
     */
    public function getBrowserLanguage()
    {
        return $this->container['browser_language'];
    }

    /**
     * Sets browser_language
     *
     * @param string|null $browser_language Язык браузера согласно ETF BCP47, значение свойства navigator.language. Обязательно, если browserJavascriptEnabled = true
     *
     * @return self
     */
    public function setBrowserLanguage($browser_language)
    {
        if (is_null($browser_language)) {
            throw new \InvalidArgumentException('non-nullable browser_language cannot be null');
        }
        if ((mb_strlen($browser_language) > 8)) {
            throw new \InvalidArgumentException('invalid length for $browser_language when calling TdsBrowserAttributes., must be smaller than or equal to 8.');
        }
        if ((mb_strlen($browser_language) < 1)) {
            throw new \InvalidArgumentException('invalid length for $browser_language when calling TdsBrowserAttributes., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~]*$/", ObjectSerializer::toString($browser_language)))) {
            throw new \InvalidArgumentException("invalid value for \$browser_language when calling TdsBrowserAttributes., must conform to the pattern /^[ -~]*$/.");
        }

        $this->container['browser_language'] = $browser_language;

        return $this;
    }

    /**
     * Gets browser_color_depth
     *
     * @return string|null
     */
    public function getBrowserColorDepth()
    {
        return $this->container['browser_color_depth'];
    }

    /**
     * Sets browser_color_depth
     *
     * @param string|null $browser_color_depth Битовая глубина цветовой палитры экрана, значение свойства screen.colorDepth. Обязательно, если browserJavascriptEnabled = true   * `1` = 1 bit   * `4` = 4 bits   * `8` = 8 bits   * `15` = 15 bits   * `16` = 16 bits   * `24` = 24 bits   * `32` = 32 bits   * `48` = 48 bits
     *
     * @return self
     */
    public function setBrowserColorDepth($browser_color_depth)
    {
        if (is_null($browser_color_depth)) {
            throw new \InvalidArgumentException('non-nullable browser_color_depth cannot be null');
        }
        $allowedValues = $this->getBrowserColorDepthAllowableValues();
        if (!in_array($browser_color_depth, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'browser_color_depth', must be one of '%s'",
                    $browser_color_depth,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['browser_color_depth'] = $browser_color_depth;

        return $this;
    }

    /**
     * Gets browser_screen_height
     *
     * @return string|null
     */
    public function getBrowserScreenHeight()
    {
        return $this->container['browser_screen_height'];
    }

    /**
     * Sets browser_screen_height
     *
     * @param string|null $browser_screen_height Высота экрана в пикселях, значение свойства screen.height. Обязательно, если browserJavascriptEnabled = true
     *
     * @return self
     */
    public function setBrowserScreenHeight($browser_screen_height)
    {
        if (is_null($browser_screen_height)) {
            throw new \InvalidArgumentException('non-nullable browser_screen_height cannot be null');
        }
        if ((mb_strlen($browser_screen_height) > 6)) {
            throw new \InvalidArgumentException('invalid length for $browser_screen_height when calling TdsBrowserAttributes., must be smaller than or equal to 6.');
        }
        if ((mb_strlen($browser_screen_height) < 1)) {
            throw new \InvalidArgumentException('invalid length for $browser_screen_height when calling TdsBrowserAttributes., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($browser_screen_height)))) {
            throw new \InvalidArgumentException("invalid value for \$browser_screen_height when calling TdsBrowserAttributes., must conform to the pattern /^\\d+$/.");
        }

        $this->container['browser_screen_height'] = $browser_screen_height;

        return $this;
    }

    /**
     * Gets browser_screen_width
     *
     * @return string|null
     */
    public function getBrowserScreenWidth()
    {
        return $this->container['browser_screen_width'];
    }

    /**
     * Sets browser_screen_width
     *
     * @param string|null $browser_screen_width Ширина экрана в пикселях, значение свойства screen.width. Обязательно, если browserJavascriptEnabled = true
     *
     * @return self
     */
    public function setBrowserScreenWidth($browser_screen_width)
    {
        if (is_null($browser_screen_width)) {
            throw new \InvalidArgumentException('non-nullable browser_screen_width cannot be null');
        }
        if ((mb_strlen($browser_screen_width) > 6)) {
            throw new \InvalidArgumentException('invalid length for $browser_screen_width when calling TdsBrowserAttributes., must be smaller than or equal to 6.');
        }
        if ((mb_strlen($browser_screen_width) < 1)) {
            throw new \InvalidArgumentException('invalid length for $browser_screen_width when calling TdsBrowserAttributes., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($browser_screen_width)))) {
            throw new \InvalidArgumentException("invalid value for \$browser_screen_width when calling TdsBrowserAttributes., must conform to the pattern /^\\d+$/.");
        }

        $this->container['browser_screen_width'] = $browser_screen_width;

        return $this;
    }

    /**
     * Gets browser_tz
     *
     * @return string|null
     */
    public function getBrowserTz()
    {
        return $this->container['browser_tz'];
    }

    /**
     * Sets browser_tz
     *
     * @param string|null $browser_tz Смещение в минутах между часовым поясом UTC и местным временем браузера. Обязательно, если browserJavascriptEnabled = true
     *
     * @return self
     */
    public function setBrowserTz($browser_tz)
    {
        if (is_null($browser_tz)) {
            throw new \InvalidArgumentException('non-nullable browser_tz cannot be null');
        }
        if ((mb_strlen($browser_tz) > 5)) {
            throw new \InvalidArgumentException('invalid length for $browser_tz when calling TdsBrowserAttributes., must be smaller than or equal to 5.');
        }
        if ((mb_strlen($browser_tz) < 1)) {
            throw new \InvalidArgumentException('invalid length for $browser_tz when calling TdsBrowserAttributes., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~]*$/", ObjectSerializer::toString($browser_tz)))) {
            throw new \InvalidArgumentException("invalid value for \$browser_tz when calling TdsBrowserAttributes., must conform to the pattern /^[ -~]*$/.");
        }

        $this->container['browser_tz'] = $browser_tz;

        return $this;
    }

    /**
     * Gets browser_user_agent
     *
     * @return string
     */
    public function getBrowserUserAgent()
    {
        return $this->container['browser_user_agent'];
    }

    /**
     * Sets browser_user_agent
     *
     * @param string $browser_user_agent Содержимое заголовка HTTP user-agent. Обязательно для Browser-based операций
     *
     * @return self
     */
    public function setBrowserUserAgent($browser_user_agent)
    {
        if (is_null($browser_user_agent)) {
            throw new \InvalidArgumentException('non-nullable browser_user_agent cannot be null');
        }
        if ((mb_strlen($browser_user_agent) > 2048)) {
            throw new \InvalidArgumentException('invalid length for $browser_user_agent when calling TdsBrowserAttributes., must be smaller than or equal to 2048.');
        }
        if ((mb_strlen($browser_user_agent) < 1)) {
            throw new \InvalidArgumentException('invalid length for $browser_user_agent when calling TdsBrowserAttributes., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~]*$/", ObjectSerializer::toString($browser_user_agent)))) {
            throw new \InvalidArgumentException("invalid value for \$browser_user_agent when calling TdsBrowserAttributes., must conform to the pattern /^[ -~]*$/.");
        }

        $this->container['browser_user_agent'] = $browser_user_agent;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


