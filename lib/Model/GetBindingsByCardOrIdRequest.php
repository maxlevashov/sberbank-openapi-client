<?php
/**
 * GetBindingsByCardOrIdRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Sberbank
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API платёжного шлюза Сбербанка
 *
 * Настоящий документ описывает программные интерфейсы платёжного шлюза Сбербанка, который позволяет проводить платежи в интернет-эквайринге.
 *
 * The version of the OpenAPI document: 1.0.7
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Sberbank\Model;

use \ArrayAccess;
use \Sberbank\ObjectSerializer;

/**
 * GetBindingsByCardOrIdRequest Class Doc Comment
 *
 * @category Class
 * @package  Sberbank
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetBindingsByCardOrIdRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'getBindingsByCardOrIdRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'user_name' => 'string',
        'password' => 'string',
        'language' => 'string',
        'show_expired' => 'bool',
        'show_inactive' => 'bool',
        'pan' => 'string',
        'binding_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'user_name' => null,
        'password' => null,
        'language' => null,
        'show_expired' => null,
        'show_inactive' => null,
        'pan' => null,
        'binding_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'user_name' => false,
        'password' => false,
        'language' => false,
        'show_expired' => false,
        'show_inactive' => false,
        'pan' => false,
        'binding_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'user_name' => 'userName',
        'password' => 'password',
        'language' => 'language',
        'show_expired' => 'showExpired',
        'show_inactive' => 'showInactive',
        'pan' => 'pan',
        'binding_id' => 'bindingId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'user_name' => 'setUserName',
        'password' => 'setPassword',
        'language' => 'setLanguage',
        'show_expired' => 'setShowExpired',
        'show_inactive' => 'setShowInactive',
        'pan' => 'setPan',
        'binding_id' => 'setBindingId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'user_name' => 'getUserName',
        'password' => 'getPassword',
        'language' => 'getLanguage',
        'show_expired' => 'getShowExpired',
        'show_inactive' => 'getShowInactive',
        'pan' => 'getPan',
        'binding_id' => 'getBindingId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('user_name', $data ?? [], null);
        $this->setIfExists('password', $data ?? [], null);
        $this->setIfExists('language', $data ?? [], null);
        $this->setIfExists('show_expired', $data ?? [], null);
        $this->setIfExists('show_inactive', $data ?? [], null);
        $this->setIfExists('pan', $data ?? [], null);
        $this->setIfExists('binding_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['user_name'] === null) {
            $invalidProperties[] = "'user_name' can't be null";
        }
        if ((mb_strlen($this->container['user_name']) > 30)) {
            $invalidProperties[] = "invalid value for 'user_name', the character length must be smaller than or equal to 30.";
        }

        if ((mb_strlen($this->container['user_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'user_name', the character length must be bigger than or equal to 1.";
        }

        if (!preg_match("/^[A-Za-z0-9-_ ]+$/", $this->container['user_name'])) {
            $invalidProperties[] = "invalid value for 'user_name', must be conform to the pattern /^[A-Za-z0-9-_ ]+$/.";
        }

        if ($this->container['password'] === null) {
            $invalidProperties[] = "'password' can't be null";
        }
        if ((mb_strlen($this->container['password']) > 30)) {
            $invalidProperties[] = "invalid value for 'password', the character length must be smaller than or equal to 30.";
        }

        if ((mb_strlen($this->container['password']) < 1)) {
            $invalidProperties[] = "invalid value for 'password', the character length must be bigger than or equal to 1.";
        }

        if (!preg_match("/^[ -~]+$/", $this->container['password'])) {
            $invalidProperties[] = "invalid value for 'password', must be conform to the pattern /^[ -~]+$/.";
        }

        if (!is_null($this->container['language']) && (mb_strlen($this->container['language']) > 2)) {
            $invalidProperties[] = "invalid value for 'language', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['language']) && (mb_strlen($this->container['language']) < 2)) {
            $invalidProperties[] = "invalid value for 'language', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['language']) && !preg_match("/^[a-z]+$/", $this->container['language'])) {
            $invalidProperties[] = "invalid value for 'language', must be conform to the pattern /^[a-z]+$/.";
        }

        if ($this->container['pan'] === null) {
            $invalidProperties[] = "'pan' can't be null";
        }
        if ((mb_strlen($this->container['pan']) > 19)) {
            $invalidProperties[] = "invalid value for 'pan', the character length must be smaller than or equal to 19.";
        }

        if ((mb_strlen($this->container['pan']) < 13)) {
            $invalidProperties[] = "invalid value for 'pan', the character length must be bigger than or equal to 13.";
        }

        if (!preg_match("/^\\d+$/", $this->container['pan'])) {
            $invalidProperties[] = "invalid value for 'pan', must be conform to the pattern /^\\d+$/.";
        }

        if ($this->container['binding_id'] === null) {
            $invalidProperties[] = "'binding_id' can't be null";
        }
        if ((mb_strlen($this->container['binding_id']) > 36)) {
            $invalidProperties[] = "invalid value for 'binding_id', the character length must be smaller than or equal to 36.";
        }

        if ((mb_strlen($this->container['binding_id']) < 36)) {
            $invalidProperties[] = "invalid value for 'binding_id', the character length must be bigger than or equal to 36.";
        }

        if (!preg_match("/^[a-f0-9\\-]+$/", $this->container['binding_id'])) {
            $invalidProperties[] = "invalid value for 'binding_id', must be conform to the pattern /^[a-f0-9\\-]+$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets user_name
     *
     * @return string
     */
    public function getUserName()
    {
        return $this->container['user_name'];
    }

    /**
     * Sets user_name
     *
     * @param string $user_name Логин Клиента, полученный при подключении к ПШ
     *
     * @return self
     */
    public function setUserName($user_name)
    {
        if (is_null($user_name)) {
            throw new \InvalidArgumentException('non-nullable user_name cannot be null');
        }
        if ((mb_strlen($user_name) > 30)) {
            throw new \InvalidArgumentException('invalid length for $user_name when calling GetBindingsByCardOrIdRequest., must be smaller than or equal to 30.');
        }
        if ((mb_strlen($user_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $user_name when calling GetBindingsByCardOrIdRequest., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[A-Za-z0-9-_ ]+$/", ObjectSerializer::toString($user_name)))) {
            throw new \InvalidArgumentException("invalid value for \$user_name when calling GetBindingsByCardOrIdRequest., must conform to the pattern /^[A-Za-z0-9-_ ]+$/.");
        }

        $this->container['user_name'] = $user_name;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string $password Пароль Клиента, полученный при подключении к ПШ
     *
     * @return self
     */
    public function setPassword($password)
    {
        if (is_null($password)) {
            throw new \InvalidArgumentException('non-nullable password cannot be null');
        }
        if ((mb_strlen($password) > 30)) {
            throw new \InvalidArgumentException('invalid length for $password when calling GetBindingsByCardOrIdRequest., must be smaller than or equal to 30.');
        }
        if ((mb_strlen($password) < 1)) {
            throw new \InvalidArgumentException('invalid length for $password when calling GetBindingsByCardOrIdRequest., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~]+$/", ObjectSerializer::toString($password)))) {
            throw new \InvalidArgumentException("invalid value for \$password when calling GetBindingsByCardOrIdRequest., must conform to the pattern /^[ -~]+$/.");
        }

        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string|null
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string|null $language Язык в кодировке ISO 639-1 (ru, en). Если не указан, будет использовано значение по умолчанию, указанное в настройках Клиента
     *
     * @return self
     */
    public function setLanguage($language)
    {
        if (is_null($language)) {
            throw new \InvalidArgumentException('non-nullable language cannot be null');
        }
        if ((mb_strlen($language) > 2)) {
            throw new \InvalidArgumentException('invalid length for $language when calling GetBindingsByCardOrIdRequest., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($language) < 2)) {
            throw new \InvalidArgumentException('invalid length for $language when calling GetBindingsByCardOrIdRequest., must be bigger than or equal to 2.');
        }
        if ((!preg_match("/^[a-z]+$/", ObjectSerializer::toString($language)))) {
            throw new \InvalidArgumentException("invalid value for \$language when calling GetBindingsByCardOrIdRequest., must conform to the pattern /^[a-z]+$/.");
        }

        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets show_expired
     *
     * @return bool|null
     */
    public function getShowExpired()
    {
        return $this->container['show_expired'];
    }

    /**
     * Sets show_expired
     *
     * @param bool|null $show_expired Признак необходимости отображать Связки с истёкшим сроком действия Карты. Возможны следующие значения:   * `true` = истина;   * `false` = ложь (по умолчанию).
     *
     * @return self
     */
    public function setShowExpired($show_expired)
    {
        if (is_null($show_expired)) {
            throw new \InvalidArgumentException('non-nullable show_expired cannot be null');
        }
        $this->container['show_expired'] = $show_expired;

        return $this;
    }

    /**
     * Gets show_inactive
     *
     * @return bool|null
     */
    public function getShowInactive()
    {
        return $this->container['show_inactive'];
    }

    /**
     * Sets show_inactive
     *
     * @param bool|null $show_inactive Признак необходимости отображать Связки с неактивным статусом. Возможны следующие значения:   * `true` = истина;   * `false` = ложь (по умолчанию).
     *
     * @return self
     */
    public function setShowInactive($show_inactive)
    {
        if (is_null($show_inactive)) {
            throw new \InvalidArgumentException('non-nullable show_inactive cannot be null');
        }
        $this->container['show_inactive'] = $show_inactive;

        return $this;
    }

    /**
     * Gets pan
     *
     * @return string
     */
    public function getPan()
    {
        return $this->container['pan'];
    }

    /**
     * Sets pan
     *
     * @param string $pan Номер Карты Плательщика
     *
     * @return self
     */
    public function setPan($pan)
    {
        if (is_null($pan)) {
            throw new \InvalidArgumentException('non-nullable pan cannot be null');
        }
        if ((mb_strlen($pan) > 19)) {
            throw new \InvalidArgumentException('invalid length for $pan when calling GetBindingsByCardOrIdRequest., must be smaller than or equal to 19.');
        }
        if ((mb_strlen($pan) < 13)) {
            throw new \InvalidArgumentException('invalid length for $pan when calling GetBindingsByCardOrIdRequest., must be bigger than or equal to 13.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($pan)))) {
            throw new \InvalidArgumentException("invalid value for \$pan when calling GetBindingsByCardOrIdRequest., must conform to the pattern /^\\d+$/.");
        }

        $this->container['pan'] = $pan;

        return $this;
    }

    /**
     * Gets binding_id
     *
     * @return string
     */
    public function getBindingId()
    {
        return $this->container['binding_id'];
    }

    /**
     * Sets binding_id
     *
     * @param string $binding_id Идентификатор Связки, созданной ранее. Может использоваться, только если у магазина есть разрешение на работу со связками
     *
     * @return self
     */
    public function setBindingId($binding_id)
    {
        if (is_null($binding_id)) {
            throw new \InvalidArgumentException('non-nullable binding_id cannot be null');
        }
        if ((mb_strlen($binding_id) > 36)) {
            throw new \InvalidArgumentException('invalid length for $binding_id when calling GetBindingsByCardOrIdRequest., must be smaller than or equal to 36.');
        }
        if ((mb_strlen($binding_id) < 36)) {
            throw new \InvalidArgumentException('invalid length for $binding_id when calling GetBindingsByCardOrIdRequest., must be bigger than or equal to 36.');
        }
        if ((!preg_match("/^[a-f0-9\\-]+$/", ObjectSerializer::toString($binding_id)))) {
            throw new \InvalidArgumentException("invalid value for \$binding_id when calling GetBindingsByCardOrIdRequest., must conform to the pattern /^[a-f0-9\\-]+$/.");
        }

        $this->container['binding_id'] = $binding_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


