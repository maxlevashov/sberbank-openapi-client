<?php
/**
 * RegisterRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Sberbank
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API платёжного шлюза Сбербанка
 *
 * Настоящий документ описывает программные интерфейсы платёжного шлюза Сбербанка, который позволяет проводить платежи в интернет-эквайринге.
 *
 * The version of the OpenAPI document: 1.0.7
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Sberbank\Model;

use \ArrayAccess;
use \Sberbank\ObjectSerializer;

/**
 * RegisterRequest Class Doc Comment
 *
 * @category Class
 * @package  Sberbank
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RegisterRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'registerRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'user_name' => 'string',
        'password' => 'string',
        'order_number' => 'string',
        'amount' => 'int',
        'currency' => 'string',
        'return_url' => 'string',
        'fail_url' => 'string',
        'description' => 'string',
        'language' => 'string',
        'client_id' => 'string',
        'merchant_login' => 'string',
        'json_params' => '\Sberbank\Model\RegisterRequestJsonParams',
        'session_timeout_secs' => 'int',
        'expiration_date' => '\DateTime',
        'binding_id' => 'string',
        'features' => 'string',
        'phone' => 'string',
        'email' => 'string',
        'order_bundle' => '\Sberbank\Model\OrderBundle'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'user_name' => null,
        'password' => null,
        'order_number' => null,
        'amount' => null,
        'currency' => null,
        'return_url' => null,
        'fail_url' => null,
        'description' => null,
        'language' => null,
        'client_id' => null,
        'merchant_login' => null,
        'json_params' => null,
        'session_timeout_secs' => null,
        'expiration_date' => 'date-time',
        'binding_id' => null,
        'features' => null,
        'phone' => null,
        'email' => null,
        'order_bundle' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'user_name' => false,
        'password' => false,
        'order_number' => false,
        'amount' => false,
        'currency' => false,
        'return_url' => false,
        'fail_url' => false,
        'description' => false,
        'language' => false,
        'client_id' => false,
        'merchant_login' => false,
        'json_params' => false,
        'session_timeout_secs' => false,
        'expiration_date' => false,
        'binding_id' => false,
        'features' => false,
        'phone' => false,
        'email' => false,
        'order_bundle' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'user_name' => 'userName',
        'password' => 'password',
        'order_number' => 'orderNumber',
        'amount' => 'amount',
        'currency' => 'currency',
        'return_url' => 'returnUrl',
        'fail_url' => 'failUrl',
        'description' => 'description',
        'language' => 'language',
        'client_id' => 'clientId',
        'merchant_login' => 'merchantLogin',
        'json_params' => 'jsonParams',
        'session_timeout_secs' => 'sessionTimeoutSecs',
        'expiration_date' => 'expirationDate',
        'binding_id' => 'bindingId',
        'features' => 'features',
        'phone' => 'phone',
        'email' => 'email',
        'order_bundle' => 'orderBundle'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'user_name' => 'setUserName',
        'password' => 'setPassword',
        'order_number' => 'setOrderNumber',
        'amount' => 'setAmount',
        'currency' => 'setCurrency',
        'return_url' => 'setReturnUrl',
        'fail_url' => 'setFailUrl',
        'description' => 'setDescription',
        'language' => 'setLanguage',
        'client_id' => 'setClientId',
        'merchant_login' => 'setMerchantLogin',
        'json_params' => 'setJsonParams',
        'session_timeout_secs' => 'setSessionTimeoutSecs',
        'expiration_date' => 'setExpirationDate',
        'binding_id' => 'setBindingId',
        'features' => 'setFeatures',
        'phone' => 'setPhone',
        'email' => 'setEmail',
        'order_bundle' => 'setOrderBundle'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'user_name' => 'getUserName',
        'password' => 'getPassword',
        'order_number' => 'getOrderNumber',
        'amount' => 'getAmount',
        'currency' => 'getCurrency',
        'return_url' => 'getReturnUrl',
        'fail_url' => 'getFailUrl',
        'description' => 'getDescription',
        'language' => 'getLanguage',
        'client_id' => 'getClientId',
        'merchant_login' => 'getMerchantLogin',
        'json_params' => 'getJsonParams',
        'session_timeout_secs' => 'getSessionTimeoutSecs',
        'expiration_date' => 'getExpirationDate',
        'binding_id' => 'getBindingId',
        'features' => 'getFeatures',
        'phone' => 'getPhone',
        'email' => 'getEmail',
        'order_bundle' => 'getOrderBundle'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('user_name', $data ?? [], null);
        $this->setIfExists('password', $data ?? [], null);
        $this->setIfExists('order_number', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('return_url', $data ?? [], null);
        $this->setIfExists('fail_url', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('language', $data ?? [], null);
        $this->setIfExists('client_id', $data ?? [], null);
        $this->setIfExists('merchant_login', $data ?? [], null);
        $this->setIfExists('json_params', $data ?? [], null);
        $this->setIfExists('session_timeout_secs', $data ?? [], null);
        $this->setIfExists('expiration_date', $data ?? [], null);
        $this->setIfExists('binding_id', $data ?? [], null);
        $this->setIfExists('features', $data ?? [], null);
        $this->setIfExists('phone', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('order_bundle', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['user_name'] === null) {
            $invalidProperties[] = "'user_name' can't be null";
        }
        if ((mb_strlen($this->container['user_name']) > 30)) {
            $invalidProperties[] = "invalid value for 'user_name', the character length must be smaller than or equal to 30.";
        }

        if ((mb_strlen($this->container['user_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'user_name', the character length must be bigger than or equal to 1.";
        }

        if (!preg_match("/^[A-Za-z0-9-_ ]+$/", $this->container['user_name'])) {
            $invalidProperties[] = "invalid value for 'user_name', must be conform to the pattern /^[A-Za-z0-9-_ ]+$/.";
        }

        if ($this->container['password'] === null) {
            $invalidProperties[] = "'password' can't be null";
        }
        if ((mb_strlen($this->container['password']) > 30)) {
            $invalidProperties[] = "invalid value for 'password', the character length must be smaller than or equal to 30.";
        }

        if ((mb_strlen($this->container['password']) < 1)) {
            $invalidProperties[] = "invalid value for 'password', the character length must be bigger than or equal to 1.";
        }

        if (!preg_match("/^[ -~]+$/", $this->container['password'])) {
            $invalidProperties[] = "invalid value for 'password', must be conform to the pattern /^[ -~]+$/.";
        }

        if ($this->container['order_number'] === null) {
            $invalidProperties[] = "'order_number' can't be null";
        }
        if ((mb_strlen($this->container['order_number']) > 36)) {
            $invalidProperties[] = "invalid value for 'order_number', the character length must be smaller than or equal to 36.";
        }

        if ((mb_strlen($this->container['order_number']) < 1)) {
            $invalidProperties[] = "invalid value for 'order_number', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if (($this->container['amount'] > 999999999999)) {
            $invalidProperties[] = "invalid value for 'amount', must be smaller than or equal to 999999999999.";
        }

        if (($this->container['amount'] < 0)) {
            $invalidProperties[] = "invalid value for 'amount', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['currency']) && (mb_strlen($this->container['currency']) > 3)) {
            $invalidProperties[] = "invalid value for 'currency', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['currency']) && (mb_strlen($this->container['currency']) < 3)) {
            $invalidProperties[] = "invalid value for 'currency', the character length must be bigger than or equal to 3.";
        }

        if (!is_null($this->container['currency']) && !preg_match("/^\\d{3}$/", $this->container['currency'])) {
            $invalidProperties[] = "invalid value for 'currency', must be conform to the pattern /^\\d{3}$/.";
        }

        if ($this->container['return_url'] === null) {
            $invalidProperties[] = "'return_url' can't be null";
        }
        if ((mb_strlen($this->container['return_url']) > 2048)) {
            $invalidProperties[] = "invalid value for 'return_url', the character length must be smaller than or equal to 2048.";
        }

        if ((mb_strlen($this->container['return_url']) < 12)) {
            $invalidProperties[] = "invalid value for 'return_url', the character length must be bigger than or equal to 12.";
        }

        if (!preg_match("/^[ -~]*$/", $this->container['return_url'])) {
            $invalidProperties[] = "invalid value for 'return_url', must be conform to the pattern /^[ -~]*$/.";
        }

        if (!is_null($this->container['fail_url']) && (mb_strlen($this->container['fail_url']) > 2048)) {
            $invalidProperties[] = "invalid value for 'fail_url', the character length must be smaller than or equal to 2048.";
        }

        if (!is_null($this->container['fail_url']) && (mb_strlen($this->container['fail_url']) < 12)) {
            $invalidProperties[] = "invalid value for 'fail_url', the character length must be bigger than or equal to 12.";
        }

        if (!is_null($this->container['fail_url']) && !preg_match("/^[ -~]*$/", $this->container['fail_url'])) {
            $invalidProperties[] = "invalid value for 'fail_url', must be conform to the pattern /^[ -~]*$/.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 512)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) < 1)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['description']) && !preg_match("/^[ -~А-Яа-яЁё№]*$/", $this->container['description'])) {
            $invalidProperties[] = "invalid value for 'description', must be conform to the pattern /^[ -~А-Яа-яЁё№]*$/.";
        }

        if (!is_null($this->container['language']) && (mb_strlen($this->container['language']) > 2)) {
            $invalidProperties[] = "invalid value for 'language', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['language']) && (mb_strlen($this->container['language']) < 2)) {
            $invalidProperties[] = "invalid value for 'language', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['language']) && !preg_match("/^[a-z]+$/", $this->container['language'])) {
            $invalidProperties[] = "invalid value for 'language', must be conform to the pattern /^[a-z]+$/.";
        }

        if (!is_null($this->container['client_id']) && (mb_strlen($this->container['client_id']) > 255)) {
            $invalidProperties[] = "invalid value for 'client_id', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['client_id']) && (mb_strlen($this->container['client_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'client_id', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['client_id']) && !preg_match("/^[ -~]+$/", $this->container['client_id'])) {
            $invalidProperties[] = "invalid value for 'client_id', must be conform to the pattern /^[ -~]+$/.";
        }

        if (!is_null($this->container['merchant_login']) && (mb_strlen($this->container['merchant_login']) > 30)) {
            $invalidProperties[] = "invalid value for 'merchant_login', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['merchant_login']) && (mb_strlen($this->container['merchant_login']) < 1)) {
            $invalidProperties[] = "invalid value for 'merchant_login', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['merchant_login']) && !preg_match("/^[A-Za-z0-9-_ ]+$/", $this->container['merchant_login'])) {
            $invalidProperties[] = "invalid value for 'merchant_login', must be conform to the pattern /^[A-Za-z0-9-_ ]+$/.";
        }

        if (!is_null($this->container['session_timeout_secs']) && ($this->container['session_timeout_secs'] > 999999999)) {
            $invalidProperties[] = "invalid value for 'session_timeout_secs', must be smaller than or equal to 999999999.";
        }

        if (!is_null($this->container['session_timeout_secs']) && ($this->container['session_timeout_secs'] < 0)) {
            $invalidProperties[] = "invalid value for 'session_timeout_secs', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['binding_id']) && (mb_strlen($this->container['binding_id']) > 36)) {
            $invalidProperties[] = "invalid value for 'binding_id', the character length must be smaller than or equal to 36.";
        }

        if (!is_null($this->container['binding_id']) && (mb_strlen($this->container['binding_id']) < 36)) {
            $invalidProperties[] = "invalid value for 'binding_id', the character length must be bigger than or equal to 36.";
        }

        if (!is_null($this->container['binding_id']) && !preg_match("/^[a-f0-9\\-]+$/", $this->container['binding_id'])) {
            $invalidProperties[] = "invalid value for 'binding_id', must be conform to the pattern /^[a-f0-9\\-]+$/.";
        }

        if (!is_null($this->container['features']) && (mb_strlen($this->container['features']) > 255)) {
            $invalidProperties[] = "invalid value for 'features', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['features']) && (mb_strlen($this->container['features']) < 1)) {
            $invalidProperties[] = "invalid value for 'features', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['features']) && !preg_match("/^[ -~]*$/", $this->container['features'])) {
            $invalidProperties[] = "invalid value for 'features', must be conform to the pattern /^[ -~]*$/.";
        }

        if (!is_null($this->container['phone']) && (mb_strlen($this->container['phone']) > 16)) {
            $invalidProperties[] = "invalid value for 'phone', the character length must be smaller than or equal to 16.";
        }

        if (!is_null($this->container['phone']) && (mb_strlen($this->container['phone']) < 1)) {
            $invalidProperties[] = "invalid value for 'phone', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['phone']) && !preg_match("/^(\\+?)\\d{7,15}$/", $this->container['phone'])) {
            $invalidProperties[] = "invalid value for 'phone', must be conform to the pattern /^(\\+?)\\d{7,15}$/.";
        }

        if (!is_null($this->container['email']) && (mb_strlen($this->container['email']) > 128)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be smaller than or equal to 128.";
        }

        if (!is_null($this->container['email']) && (mb_strlen($this->container['email']) < 3)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be bigger than or equal to 3.";
        }

        if (!is_null($this->container['email']) && !preg_match("/^[ -~]+$/", $this->container['email'])) {
            $invalidProperties[] = "invalid value for 'email', must be conform to the pattern /^[ -~]+$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets user_name
     *
     * @return string
     */
    public function getUserName()
    {
        return $this->container['user_name'];
    }

    /**
     * Sets user_name
     *
     * @param string $user_name Логин Клиента, полученный при подключении к ПШ
     *
     * @return self
     */
    public function setUserName($user_name)
    {
        if (is_null($user_name)) {
            throw new \InvalidArgumentException('non-nullable user_name cannot be null');
        }
        if ((mb_strlen($user_name) > 30)) {
            throw new \InvalidArgumentException('invalid length for $user_name when calling RegisterRequest., must be smaller than or equal to 30.');
        }
        if ((mb_strlen($user_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $user_name when calling RegisterRequest., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[A-Za-z0-9-_ ]+$/", ObjectSerializer::toString($user_name)))) {
            throw new \InvalidArgumentException("invalid value for \$user_name when calling RegisterRequest., must conform to the pattern /^[A-Za-z0-9-_ ]+$/.");
        }

        $this->container['user_name'] = $user_name;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string $password Пароль Клиента, полученный при подключении к ПШ
     *
     * @return self
     */
    public function setPassword($password)
    {
        if (is_null($password)) {
            throw new \InvalidArgumentException('non-nullable password cannot be null');
        }
        if ((mb_strlen($password) > 30)) {
            throw new \InvalidArgumentException('invalid length for $password when calling RegisterRequest., must be smaller than or equal to 30.');
        }
        if ((mb_strlen($password) < 1)) {
            throw new \InvalidArgumentException('invalid length for $password when calling RegisterRequest., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~]+$/", ObjectSerializer::toString($password)))) {
            throw new \InvalidArgumentException("invalid value for \$password when calling RegisterRequest., must conform to the pattern /^[ -~]+$/.");
        }

        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets order_number
     *
     * @return string
     */
    public function getOrderNumber()
    {
        return $this->container['order_number'];
    }

    /**
     * Sets order_number
     *
     * @param string $order_number Уникальный номер (идентификатор) заказа в системе Клиента. Обязателен, если в запросе отсутствует orderId.
     *
     * @return self
     */
    public function setOrderNumber($order_number)
    {
        if (is_null($order_number)) {
            throw new \InvalidArgumentException('non-nullable order_number cannot be null');
        }
        if ((mb_strlen($order_number) > 36)) {
            throw new \InvalidArgumentException('invalid length for $order_number when calling RegisterRequest., must be smaller than or equal to 36.');
        }
        if ((mb_strlen($order_number) < 1)) {
            throw new \InvalidArgumentException('invalid length for $order_number when calling RegisterRequest., must be bigger than or equal to 1.');
        }

        $this->container['order_number'] = $order_number;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return int
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int $amount Сумма операции в минимальных единицах валюты
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }

        if (($amount > 999999999999)) {
            throw new \InvalidArgumentException('invalid value for $amount when calling RegisterRequest., must be smaller than or equal to 999999999999.');
        }
        if (($amount < 0)) {
            throw new \InvalidArgumentException('invalid value for $amount when calling RegisterRequest., must be bigger than or equal to 0.');
        }

        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency Цифровой код валюты операции ISO-4217
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        if ((mb_strlen($currency) > 3)) {
            throw new \InvalidArgumentException('invalid length for $currency when calling RegisterRequest., must be smaller than or equal to 3.');
        }
        if ((mb_strlen($currency) < 3)) {
            throw new \InvalidArgumentException('invalid length for $currency when calling RegisterRequest., must be bigger than or equal to 3.');
        }
        if ((!preg_match("/^\\d{3}$/", ObjectSerializer::toString($currency)))) {
            throw new \InvalidArgumentException("invalid value for \$currency when calling RegisterRequest., must conform to the pattern /^\\d{3}$/.");
        }

        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets return_url
     *
     * @return string
     */
    public function getReturnUrl()
    {
        return $this->container['return_url'];
    }

    /**
     * Sets return_url
     *
     * @param string $return_url Адрес, на который требуется перенаправить Плательщика в случае успешной оплаты, когда Клиент использует платёжную страницу ПШ
     *
     * @return self
     */
    public function setReturnUrl($return_url)
    {
        if (is_null($return_url)) {
            throw new \InvalidArgumentException('non-nullable return_url cannot be null');
        }
        if ((mb_strlen($return_url) > 2048)) {
            throw new \InvalidArgumentException('invalid length for $return_url when calling RegisterRequest., must be smaller than or equal to 2048.');
        }
        if ((mb_strlen($return_url) < 12)) {
            throw new \InvalidArgumentException('invalid length for $return_url when calling RegisterRequest., must be bigger than or equal to 12.');
        }
        if ((!preg_match("/^[ -~]*$/", ObjectSerializer::toString($return_url)))) {
            throw new \InvalidArgumentException("invalid value for \$return_url when calling RegisterRequest., must conform to the pattern /^[ -~]*$/.");
        }

        $this->container['return_url'] = $return_url;

        return $this;
    }

    /**
     * Gets fail_url
     *
     * @return string|null
     */
    public function getFailUrl()
    {
        return $this->container['fail_url'];
    }

    /**
     * Sets fail_url
     *
     * @param string|null $fail_url Адрес, на который требуется перенаправить Плательщика в случае неуспешной оплаты, когда Клиент использует платёжную страницу ПШ. Если не указан, используется returnUrl
     *
     * @return self
     */
    public function setFailUrl($fail_url)
    {
        if (is_null($fail_url)) {
            throw new \InvalidArgumentException('non-nullable fail_url cannot be null');
        }
        if ((mb_strlen($fail_url) > 2048)) {
            throw new \InvalidArgumentException('invalid length for $fail_url when calling RegisterRequest., must be smaller than or equal to 2048.');
        }
        if ((mb_strlen($fail_url) < 12)) {
            throw new \InvalidArgumentException('invalid length for $fail_url when calling RegisterRequest., must be bigger than or equal to 12.');
        }
        if ((!preg_match("/^[ -~]*$/", ObjectSerializer::toString($fail_url)))) {
            throw new \InvalidArgumentException("invalid value for \$fail_url when calling RegisterRequest., must conform to the pattern /^[ -~]*$/.");
        }

        $this->container['fail_url'] = $fail_url;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Описание заказа в свободной форме на стороне Клиента. Рекомендуемая длина до 99 символов
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        if ((mb_strlen($description) > 512)) {
            throw new \InvalidArgumentException('invalid length for $description when calling RegisterRequest., must be smaller than or equal to 512.');
        }
        if ((mb_strlen($description) < 1)) {
            throw new \InvalidArgumentException('invalid length for $description when calling RegisterRequest., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~А-Яа-яЁё№]*$/", ObjectSerializer::toString($description)))) {
            throw new \InvalidArgumentException("invalid value for \$description when calling RegisterRequest., must conform to the pattern /^[ -~А-Яа-яЁё№]*$/.");
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string|null
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string|null $language Язык в кодировке ISO 639-1 (ru, en). Если не указан, будет использовано значение по умолчанию, указанное в настройках Клиента
     *
     * @return self
     */
    public function setLanguage($language)
    {
        if (is_null($language)) {
            throw new \InvalidArgumentException('non-nullable language cannot be null');
        }
        if ((mb_strlen($language) > 2)) {
            throw new \InvalidArgumentException('invalid length for $language when calling RegisterRequest., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($language) < 2)) {
            throw new \InvalidArgumentException('invalid length for $language when calling RegisterRequest., must be bigger than or equal to 2.');
        }
        if ((!preg_match("/^[a-z]+$/", ObjectSerializer::toString($language)))) {
            throw new \InvalidArgumentException("invalid value for \$language when calling RegisterRequest., must conform to the pattern /^[a-z]+$/.");
        }

        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets client_id
     *
     * @return string|null
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     *
     * @param string|null $client_id Номер (идентификатор) Плательщика в системе Клиента. Используется для реализации функционала Связок
     *
     * @return self
     */
    public function setClientId($client_id)
    {
        if (is_null($client_id)) {
            throw new \InvalidArgumentException('non-nullable client_id cannot be null');
        }
        if ((mb_strlen($client_id) > 255)) {
            throw new \InvalidArgumentException('invalid length for $client_id when calling RegisterRequest., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($client_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $client_id when calling RegisterRequest., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~]+$/", ObjectSerializer::toString($client_id)))) {
            throw new \InvalidArgumentException("invalid value for \$client_id when calling RegisterRequest., must conform to the pattern /^[ -~]+$/.");
        }

        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets merchant_login
     *
     * @return string|null
     */
    public function getMerchantLogin()
    {
        return $this->container['merchant_login'];
    }

    /**
     * Sets merchant_login
     *
     * @param string|null $merchant_login Логин дочернего Клиента (если используется)
     *
     * @return self
     */
    public function setMerchantLogin($merchant_login)
    {
        if (is_null($merchant_login)) {
            throw new \InvalidArgumentException('non-nullable merchant_login cannot be null');
        }
        if ((mb_strlen($merchant_login) > 30)) {
            throw new \InvalidArgumentException('invalid length for $merchant_login when calling RegisterRequest., must be smaller than or equal to 30.');
        }
        if ((mb_strlen($merchant_login) < 1)) {
            throw new \InvalidArgumentException('invalid length for $merchant_login when calling RegisterRequest., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[A-Za-z0-9-_ ]+$/", ObjectSerializer::toString($merchant_login)))) {
            throw new \InvalidArgumentException("invalid value for \$merchant_login when calling RegisterRequest., must conform to the pattern /^[A-Za-z0-9-_ ]+$/.");
        }

        $this->container['merchant_login'] = $merchant_login;

        return $this;
    }

    /**
     * Gets json_params
     *
     * @return \Sberbank\Model\RegisterRequestJsonParams|null
     */
    public function getJsonParams()
    {
        return $this->container['json_params'];
    }

    /**
     * Sets json_params
     *
     * @param \Sberbank\Model\RegisterRequestJsonParams|null $json_params json_params
     *
     * @return self
     */
    public function setJsonParams($json_params)
    {
        if (is_null($json_params)) {
            throw new \InvalidArgumentException('non-nullable json_params cannot be null');
        }
        $this->container['json_params'] = $json_params;

        return $this;
    }

    /**
     * Gets session_timeout_secs
     *
     * @return int|null
     */
    public function getSessionTimeoutSecs()
    {
        return $this->container['session_timeout_secs'];
    }

    /**
     * Sets session_timeout_secs
     *
     * @param int|null $session_timeout_secs Продолжительность жизни заказа в секундах. В случае если параметр не задан, будет использовано значение, указанное в настройках Клиента или время по умолчанию. Если в запросе присутствует параметр expirationDate, то значение параметра sessionTimeoutSecs не учитывается
     *
     * @return self
     */
    public function setSessionTimeoutSecs($session_timeout_secs)
    {
        if (is_null($session_timeout_secs)) {
            throw new \InvalidArgumentException('non-nullable session_timeout_secs cannot be null');
        }

        if (($session_timeout_secs > 999999999)) {
            throw new \InvalidArgumentException('invalid value for $session_timeout_secs when calling RegisterRequest., must be smaller than or equal to 999999999.');
        }
        if (($session_timeout_secs < 0)) {
            throw new \InvalidArgumentException('invalid value for $session_timeout_secs when calling RegisterRequest., must be bigger than or equal to 0.');
        }

        $this->container['session_timeout_secs'] = $session_timeout_secs;

        return $this;
    }

    /**
     * Gets expiration_date
     *
     * @return \DateTime|null
     */
    public function getExpirationDate()
    {
        return $this->container['expiration_date'];
    }

    /**
     * Sets expiration_date
     *
     * @param \DateTime|null $expiration_date Дата и время окончания жизни заказа на стороне ПШ в формате yyyy-MM-ddTHH:mm:ss. Если этот параметр не передаётся в запросе, то для определения времени окончания жизни заказа используется sessionTimeoutSecs
     *
     * @return self
     */
    public function setExpirationDate($expiration_date)
    {
        if (is_null($expiration_date)) {
            throw new \InvalidArgumentException('non-nullable expiration_date cannot be null');
        }
        $this->container['expiration_date'] = $expiration_date;

        return $this;
    }

    /**
     * Gets binding_id
     *
     * @return string|null
     */
    public function getBindingId()
    {
        return $this->container['binding_id'];
    }

    /**
     * Sets binding_id
     *
     * @param string|null $binding_id Идентификатор Связки, созданной ранее. Может использоваться, только если у магазина есть разрешение на работу со связками
     *
     * @return self
     */
    public function setBindingId($binding_id)
    {
        if (is_null($binding_id)) {
            throw new \InvalidArgumentException('non-nullable binding_id cannot be null');
        }
        if ((mb_strlen($binding_id) > 36)) {
            throw new \InvalidArgumentException('invalid length for $binding_id when calling RegisterRequest., must be smaller than or equal to 36.');
        }
        if ((mb_strlen($binding_id) < 36)) {
            throw new \InvalidArgumentException('invalid length for $binding_id when calling RegisterRequest., must be bigger than or equal to 36.');
        }
        if ((!preg_match("/^[a-f0-9\\-]+$/", ObjectSerializer::toString($binding_id)))) {
            throw new \InvalidArgumentException("invalid value for \$binding_id when calling RegisterRequest., must conform to the pattern /^[a-f0-9\\-]+$/.");
        }

        $this->container['binding_id'] = $binding_id;

        return $this;
    }

    /**
     * Gets features
     *
     * @return string|null
     */
    public function getFeatures()
    {
        return $this->container['features'];
    }

    /**
     * Sets features
     *
     * @param string|null $features Дополнительные параметры управления сценариями при использовании платёжных реквизитов (можно указать несколько через разделитель \";\"):   * `VERIFY` = Происходит верификация Плательщика без списания средств с его счёта, поэтому в запросе можно передавать нулевую сумму. Даже если сумма платежа будет передана в запросе, она не будет списана со счёта покупателя. После успешной верификации заказ сразу переводится в статус REVERSED (отменён);   * `AUTO_PAYMENT` = Платёж проводится без проверки подлинности владельца карты (без CVC и 3-D Secure). Чтобы проводить подобные платежи и продавца должны быть соответствующие разрешения;   * `FORCE_SSL` = Принудительное проведение платежа без использования 3-D Secure;   * `FORCE_TDS` = Принудительное проведение платежа с использованием 3-D Secure. Если карта не поддерживает 3-D Secure, операция будет отклонена;   * `FORCE_FULL_TDS` = Принудительное проведение платежа только с успешной аутентификацией плательщика 3-D Secure (Y). В противном случае операция будет отклонена.
     *
     * @return self
     */
    public function setFeatures($features)
    {
        if (is_null($features)) {
            throw new \InvalidArgumentException('non-nullable features cannot be null');
        }
        if ((mb_strlen($features) > 255)) {
            throw new \InvalidArgumentException('invalid length for $features when calling RegisterRequest., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($features) < 1)) {
            throw new \InvalidArgumentException('invalid length for $features when calling RegisterRequest., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~]*$/", ObjectSerializer::toString($features)))) {
            throw new \InvalidArgumentException("invalid value for \$features when calling RegisterRequest., must conform to the pattern /^[ -~]*$/.");
        }

        $this->container['features'] = $features;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string|null $phone Номер телефона Плательщика. Если в телефон включён код страны, номер должен начинаться со знака плюс («+»). Если телефон передаётся без знака плюс («+»), то код страны указывать не следует. В случае использования фискализации обязателен для передачи в формате +79998887700, при отсутствии номера телефона обязателен email.
     *
     * @return self
     */
    public function setPhone($phone)
    {
        if (is_null($phone)) {
            throw new \InvalidArgumentException('non-nullable phone cannot be null');
        }
        if ((mb_strlen($phone) > 16)) {
            throw new \InvalidArgumentException('invalid length for $phone when calling RegisterRequest., must be smaller than or equal to 16.');
        }
        if ((mb_strlen($phone) < 1)) {
            throw new \InvalidArgumentException('invalid length for $phone when calling RegisterRequest., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^(\\+?)\\d{7,15}$/", ObjectSerializer::toString($phone)))) {
            throw new \InvalidArgumentException("invalid value for \$phone when calling RegisterRequest., must conform to the pattern /^(\\+?)\\d{7,15}$/.");
        }

        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email Адрес электронной почты Плательщика. В случае использования фискализации обязателен, при отсутствии phone.
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        if ((mb_strlen($email) > 128)) {
            throw new \InvalidArgumentException('invalid length for $email when calling RegisterRequest., must be smaller than or equal to 128.');
        }
        if ((mb_strlen($email) < 3)) {
            throw new \InvalidArgumentException('invalid length for $email when calling RegisterRequest., must be bigger than or equal to 3.');
        }
        if ((!preg_match("/^[ -~]+$/", ObjectSerializer::toString($email)))) {
            throw new \InvalidArgumentException("invalid value for \$email when calling RegisterRequest., must conform to the pattern /^[ -~]+$/.");
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets order_bundle
     *
     * @return \Sberbank\Model\OrderBundle|null
     */
    public function getOrderBundle()
    {
        return $this->container['order_bundle'];
    }

    /**
     * Sets order_bundle
     *
     * @param \Sberbank\Model\OrderBundle|null $order_bundle order_bundle
     *
     * @return self
     */
    public function setOrderBundle($order_bundle)
    {
        if (is_null($order_bundle)) {
            throw new \InvalidArgumentException('non-nullable order_bundle cannot be null');
        }
        $this->container['order_bundle'] = $order_bundle;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


