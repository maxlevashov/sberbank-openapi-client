<?php
/**
 * TdsApplicationAttributes
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Sberbank
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API платёжного шлюза Сбербанка
 *
 * Настоящий документ описывает программные интерфейсы платёжного шлюза Сбербанка, который позволяет проводить платежи в интернет-эквайринге.
 *
 * The version of the OpenAPI document: 1.0.7
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Sberbank\Model;

use \ArrayAccess;
use \Sberbank\ObjectSerializer;

/**
 * TdsApplicationAttributes Class Doc Comment
 *
 * @category Class
 * @description Параметры 3DS SDK для проведения 3-D Secure аутентификации на стороне ПШ
 * @package  Sberbank
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TdsApplicationAttributes implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'tdsApplicationAttributes';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'device_category' => 'string',
        'sdk_app_id' => 'string',
        'sdk_reference_number' => 'string',
        'sdk_trans_id' => 'string',
        'sdk_max_timeout' => 'string',
        'sdk_enc_data' => 'string',
        'sdk_ephem_pub_key' => 'string',
        'device_render_options' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'device_category' => null,
        'sdk_app_id' => null,
        'sdk_reference_number' => null,
        'sdk_trans_id' => null,
        'sdk_max_timeout' => null,
        'sdk_enc_data' => null,
        'sdk_ephem_pub_key' => null,
        'device_render_options' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'device_category' => false,
        'sdk_app_id' => false,
        'sdk_reference_number' => false,
        'sdk_trans_id' => false,
        'sdk_max_timeout' => false,
        'sdk_enc_data' => false,
        'sdk_ephem_pub_key' => false,
        'device_render_options' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'device_category' => 'deviceCategory',
        'sdk_app_id' => 'sdkAppID',
        'sdk_reference_number' => 'sdkReferenceNumber',
        'sdk_trans_id' => 'sdkTransID',
        'sdk_max_timeout' => 'sdkMaxTimeout',
        'sdk_enc_data' => 'sdkEncData',
        'sdk_ephem_pub_key' => 'sdkEphemPubKey',
        'device_render_options' => 'deviceRenderOptions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'device_category' => 'setDeviceCategory',
        'sdk_app_id' => 'setSdkAppId',
        'sdk_reference_number' => 'setSdkReferenceNumber',
        'sdk_trans_id' => 'setSdkTransId',
        'sdk_max_timeout' => 'setSdkMaxTimeout',
        'sdk_enc_data' => 'setSdkEncData',
        'sdk_ephem_pub_key' => 'setSdkEphemPubKey',
        'device_render_options' => 'setDeviceRenderOptions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'device_category' => 'getDeviceCategory',
        'sdk_app_id' => 'getSdkAppId',
        'sdk_reference_number' => 'getSdkReferenceNumber',
        'sdk_trans_id' => 'getSdkTransId',
        'sdk_max_timeout' => 'getSdkMaxTimeout',
        'sdk_enc_data' => 'getSdkEncData',
        'sdk_ephem_pub_key' => 'getSdkEphemPubKey',
        'device_render_options' => 'getDeviceRenderOptions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('device_category', $data ?? [], null);
        $this->setIfExists('sdk_app_id', $data ?? [], null);
        $this->setIfExists('sdk_reference_number', $data ?? [], null);
        $this->setIfExists('sdk_trans_id', $data ?? [], null);
        $this->setIfExists('sdk_max_timeout', $data ?? [], null);
        $this->setIfExists('sdk_enc_data', $data ?? [], null);
        $this->setIfExists('sdk_ephem_pub_key', $data ?? [], null);
        $this->setIfExists('device_render_options', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['device_category'] === null) {
            $invalidProperties[] = "'device_category' can't be null";
        }
        if ((mb_strlen($this->container['device_category']) > 1)) {
            $invalidProperties[] = "invalid value for 'device_category', the character length must be smaller than or equal to 1.";
        }

        if ((mb_strlen($this->container['device_category']) < 1)) {
            $invalidProperties[] = "invalid value for 'device_category', the character length must be bigger than or equal to 1.";
        }

        if (!preg_match("/^[ -~]*$/", $this->container['device_category'])) {
            $invalidProperties[] = "invalid value for 'device_category', must be conform to the pattern /^[ -~]*$/.";
        }

        if ($this->container['sdk_app_id'] === null) {
            $invalidProperties[] = "'sdk_app_id' can't be null";
        }
        if ((mb_strlen($this->container['sdk_app_id']) > 36)) {
            $invalidProperties[] = "invalid value for 'sdk_app_id', the character length must be smaller than or equal to 36.";
        }

        if ((mb_strlen($this->container['sdk_app_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'sdk_app_id', the character length must be bigger than or equal to 1.";
        }

        if (!preg_match("/^[ -~]*$/", $this->container['sdk_app_id'])) {
            $invalidProperties[] = "invalid value for 'sdk_app_id', must be conform to the pattern /^[ -~]*$/.";
        }

        if ($this->container['sdk_reference_number'] === null) {
            $invalidProperties[] = "'sdk_reference_number' can't be null";
        }
        if ((mb_strlen($this->container['sdk_reference_number']) > 32)) {
            $invalidProperties[] = "invalid value for 'sdk_reference_number', the character length must be smaller than or equal to 32.";
        }

        if ((mb_strlen($this->container['sdk_reference_number']) < 1)) {
            $invalidProperties[] = "invalid value for 'sdk_reference_number', the character length must be bigger than or equal to 1.";
        }

        if (!preg_match("/^[ -~]*$/", $this->container['sdk_reference_number'])) {
            $invalidProperties[] = "invalid value for 'sdk_reference_number', must be conform to the pattern /^[ -~]*$/.";
        }

        if ($this->container['sdk_trans_id'] === null) {
            $invalidProperties[] = "'sdk_trans_id' can't be null";
        }
        if ((mb_strlen($this->container['sdk_trans_id']) > 36)) {
            $invalidProperties[] = "invalid value for 'sdk_trans_id', the character length must be smaller than or equal to 36.";
        }

        if ((mb_strlen($this->container['sdk_trans_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'sdk_trans_id', the character length must be bigger than or equal to 1.";
        }

        if (!preg_match("/^[ -~]*$/", $this->container['sdk_trans_id'])) {
            $invalidProperties[] = "invalid value for 'sdk_trans_id', must be conform to the pattern /^[ -~]*$/.";
        }

        if (!is_null($this->container['sdk_max_timeout']) && (mb_strlen($this->container['sdk_max_timeout']) > 2)) {
            $invalidProperties[] = "invalid value for 'sdk_max_timeout', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['sdk_max_timeout']) && (mb_strlen($this->container['sdk_max_timeout']) < 1)) {
            $invalidProperties[] = "invalid value for 'sdk_max_timeout', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['sdk_max_timeout']) && !preg_match("/^[ -~]*$/", $this->container['sdk_max_timeout'])) {
            $invalidProperties[] = "invalid value for 'sdk_max_timeout', must be conform to the pattern /^[ -~]*$/.";
        }

        if ($this->container['sdk_enc_data'] === null) {
            $invalidProperties[] = "'sdk_enc_data' can't be null";
        }
        if ((mb_strlen($this->container['sdk_enc_data']) > 64000)) {
            $invalidProperties[] = "invalid value for 'sdk_enc_data', the character length must be smaller than or equal to 64000.";
        }

        if ((mb_strlen($this->container['sdk_enc_data']) < 1)) {
            $invalidProperties[] = "invalid value for 'sdk_enc_data', the character length must be bigger than or equal to 1.";
        }

        if (!preg_match("/^[ -~]*$/", $this->container['sdk_enc_data'])) {
            $invalidProperties[] = "invalid value for 'sdk_enc_data', must be conform to the pattern /^[ -~]*$/.";
        }

        if ($this->container['sdk_ephem_pub_key'] === null) {
            $invalidProperties[] = "'sdk_ephem_pub_key' can't be null";
        }
        if ((mb_strlen($this->container['sdk_ephem_pub_key']) > 256)) {
            $invalidProperties[] = "invalid value for 'sdk_ephem_pub_key', the character length must be smaller than or equal to 256.";
        }

        if ((mb_strlen($this->container['sdk_ephem_pub_key']) < 1)) {
            $invalidProperties[] = "invalid value for 'sdk_ephem_pub_key', the character length must be bigger than or equal to 1.";
        }

        if (!preg_match("/^[ -~]*$/", $this->container['sdk_ephem_pub_key'])) {
            $invalidProperties[] = "invalid value for 'sdk_ephem_pub_key', must be conform to the pattern /^[ -~]*$/.";
        }

        if (!is_null($this->container['device_render_options']) && (mb_strlen($this->container['device_render_options']) > 256)) {
            $invalidProperties[] = "invalid value for 'device_render_options', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['device_render_options']) && (mb_strlen($this->container['device_render_options']) < 1)) {
            $invalidProperties[] = "invalid value for 'device_render_options', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['device_render_options']) && !preg_match("/^[ -~]*$/", $this->container['device_render_options'])) {
            $invalidProperties[] = "invalid value for 'device_render_options', must be conform to the pattern /^[ -~]*$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets device_category
     *
     * @return string
     */
    public function getDeviceCategory()
    {
        return $this->container['device_category'];
    }

    /**
     * Sets device_category
     *
     * @param string $device_category Категория устройства, в котором инициирована аутентификация 3-D Secure. Допустимые значения:   * `0` (BRW) = аутентификация инициирована в браузере Плательщика (по умолчанию);   * `1` (APP) = аутентификация инициирована в мобильном приложении Плательщика;   * `2` (3RI) = аутентификация инициирована сервером ТСТ.
     *
     * @return self
     */
    public function setDeviceCategory($device_category)
    {
        if (is_null($device_category)) {
            throw new \InvalidArgumentException('non-nullable device_category cannot be null');
        }
        if ((mb_strlen($device_category) > 1)) {
            throw new \InvalidArgumentException('invalid length for $device_category when calling TdsApplicationAttributes., must be smaller than or equal to 1.');
        }
        if ((mb_strlen($device_category) < 1)) {
            throw new \InvalidArgumentException('invalid length for $device_category when calling TdsApplicationAttributes., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~]*$/", ObjectSerializer::toString($device_category)))) {
            throw new \InvalidArgumentException("invalid value for \$device_category when calling TdsApplicationAttributes., must conform to the pattern /^[ -~]*$/.");
        }

        $this->container['device_category'] = $device_category;

        return $this;
    }

    /**
     * Gets sdk_app_id
     *
     * @return string
     */
    public function getSdkAppId()
    {
        return $this->container['sdk_app_id'];
    }

    /**
     * Sets sdk_app_id
     *
     * @param string $sdk_app_id Идентификатор в формате uuid, создаваемый при каждой установке приложения ТСТ и хранимый в 3DS SDK. Обязательно для deviceCategory = 1
     *
     * @return self
     */
    public function setSdkAppId($sdk_app_id)
    {
        if (is_null($sdk_app_id)) {
            throw new \InvalidArgumentException('non-nullable sdk_app_id cannot be null');
        }
        if ((mb_strlen($sdk_app_id) > 36)) {
            throw new \InvalidArgumentException('invalid length for $sdk_app_id when calling TdsApplicationAttributes., must be smaller than or equal to 36.');
        }
        if ((mb_strlen($sdk_app_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $sdk_app_id when calling TdsApplicationAttributes., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~]*$/", ObjectSerializer::toString($sdk_app_id)))) {
            throw new \InvalidArgumentException("invalid value for \$sdk_app_id when calling TdsApplicationAttributes., must conform to the pattern /^[ -~]*$/.");
        }

        $this->container['sdk_app_id'] = $sdk_app_id;

        return $this;
    }

    /**
     * Gets sdk_reference_number
     *
     * @return string
     */
    public function getSdkReferenceNumber()
    {
        return $this->container['sdk_reference_number'];
    }

    /**
     * Sets sdk_reference_number
     *
     * @param string $sdk_reference_number Идентификатор вендора и версии 3DS SDK, присвоенный EMVCo. Обязательно для deviceCategory = 1
     *
     * @return self
     */
    public function setSdkReferenceNumber($sdk_reference_number)
    {
        if (is_null($sdk_reference_number)) {
            throw new \InvalidArgumentException('non-nullable sdk_reference_number cannot be null');
        }
        if ((mb_strlen($sdk_reference_number) > 32)) {
            throw new \InvalidArgumentException('invalid length for $sdk_reference_number when calling TdsApplicationAttributes., must be smaller than or equal to 32.');
        }
        if ((mb_strlen($sdk_reference_number) < 1)) {
            throw new \InvalidArgumentException('invalid length for $sdk_reference_number when calling TdsApplicationAttributes., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~]*$/", ObjectSerializer::toString($sdk_reference_number)))) {
            throw new \InvalidArgumentException("invalid value for \$sdk_reference_number when calling TdsApplicationAttributes., must conform to the pattern /^[ -~]*$/.");
        }

        $this->container['sdk_reference_number'] = $sdk_reference_number;

        return $this;
    }

    /**
     * Gets sdk_trans_id
     *
     * @return string
     */
    public function getSdkTransId()
    {
        return $this->container['sdk_trans_id'];
    }

    /**
     * Sets sdk_trans_id
     *
     * @param string $sdk_trans_id Идентификатор в формате uuid, присваиваемый 3DS SDK для каждого запроса аутентификации. Обязательно для deviceCategory = 1
     *
     * @return self
     */
    public function setSdkTransId($sdk_trans_id)
    {
        if (is_null($sdk_trans_id)) {
            throw new \InvalidArgumentException('non-nullable sdk_trans_id cannot be null');
        }
        if ((mb_strlen($sdk_trans_id) > 36)) {
            throw new \InvalidArgumentException('invalid length for $sdk_trans_id when calling TdsApplicationAttributes., must be smaller than or equal to 36.');
        }
        if ((mb_strlen($sdk_trans_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $sdk_trans_id when calling TdsApplicationAttributes., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~]*$/", ObjectSerializer::toString($sdk_trans_id)))) {
            throw new \InvalidArgumentException("invalid value for \$sdk_trans_id when calling TdsApplicationAttributes., must conform to the pattern /^[ -~]*$/.");
        }

        $this->container['sdk_trans_id'] = $sdk_trans_id;

        return $this;
    }

    /**
     * Gets sdk_max_timeout
     *
     * @return string|null
     */
    public function getSdkMaxTimeout()
    {
        return $this->container['sdk_max_timeout'];
    }

    /**
     * Sets sdk_max_timeout
     *
     * @param string|null $sdk_max_timeout Максимальное время в минутах для проведения аутентификации (должно быть не меньше 5). По умолчанию присваивается значение 5
     *
     * @return self
     */
    public function setSdkMaxTimeout($sdk_max_timeout)
    {
        if (is_null($sdk_max_timeout)) {
            throw new \InvalidArgumentException('non-nullable sdk_max_timeout cannot be null');
        }
        if ((mb_strlen($sdk_max_timeout) > 2)) {
            throw new \InvalidArgumentException('invalid length for $sdk_max_timeout when calling TdsApplicationAttributes., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($sdk_max_timeout) < 1)) {
            throw new \InvalidArgumentException('invalid length for $sdk_max_timeout when calling TdsApplicationAttributes., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~]*$/", ObjectSerializer::toString($sdk_max_timeout)))) {
            throw new \InvalidArgumentException("invalid value for \$sdk_max_timeout when calling TdsApplicationAttributes., must conform to the pattern /^[ -~]*$/.");
        }

        $this->container['sdk_max_timeout'] = $sdk_max_timeout;

        return $this;
    }

    /**
     * Gets sdk_enc_data
     *
     * @return string
     */
    public function getSdkEncData()
    {
        return $this->container['sdk_enc_data'];
    }

    /**
     * Sets sdk_enc_data
     *
     * @param string $sdk_enc_data Информация об устройстве Плательщика. Обязательно для deviceCategory = 1
     *
     * @return self
     */
    public function setSdkEncData($sdk_enc_data)
    {
        if (is_null($sdk_enc_data)) {
            throw new \InvalidArgumentException('non-nullable sdk_enc_data cannot be null');
        }
        if ((mb_strlen($sdk_enc_data) > 64000)) {
            throw new \InvalidArgumentException('invalid length for $sdk_enc_data when calling TdsApplicationAttributes., must be smaller than or equal to 64000.');
        }
        if ((mb_strlen($sdk_enc_data) < 1)) {
            throw new \InvalidArgumentException('invalid length for $sdk_enc_data when calling TdsApplicationAttributes., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~]*$/", ObjectSerializer::toString($sdk_enc_data)))) {
            throw new \InvalidArgumentException("invalid value for \$sdk_enc_data when calling TdsApplicationAttributes., must conform to the pattern /^[ -~]*$/.");
        }

        $this->container['sdk_enc_data'] = $sdk_enc_data;

        return $this;
    }

    /**
     * Gets sdk_ephem_pub_key
     *
     * @return string
     */
    public function getSdkEphemPubKey()
    {
        return $this->container['sdk_ephem_pub_key'];
    }

    /**
     * Sets sdk_ephem_pub_key
     *
     * @param string $sdk_ephem_pub_key Сессионный публичный ключ, генерируемый 3DS SDK для каждого запроса аутентификации, передаваемый в кодировке base64. Обязательно для deviceCategory = 1
     *
     * @return self
     */
    public function setSdkEphemPubKey($sdk_ephem_pub_key)
    {
        if (is_null($sdk_ephem_pub_key)) {
            throw new \InvalidArgumentException('non-nullable sdk_ephem_pub_key cannot be null');
        }
        if ((mb_strlen($sdk_ephem_pub_key) > 256)) {
            throw new \InvalidArgumentException('invalid length for $sdk_ephem_pub_key when calling TdsApplicationAttributes., must be smaller than or equal to 256.');
        }
        if ((mb_strlen($sdk_ephem_pub_key) < 1)) {
            throw new \InvalidArgumentException('invalid length for $sdk_ephem_pub_key when calling TdsApplicationAttributes., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~]*$/", ObjectSerializer::toString($sdk_ephem_pub_key)))) {
            throw new \InvalidArgumentException("invalid value for \$sdk_ephem_pub_key when calling TdsApplicationAttributes., must conform to the pattern /^[ -~]*$/.");
        }

        $this->container['sdk_ephem_pub_key'] = $sdk_ephem_pub_key;

        return $this;
    }

    /**
     * Gets device_render_options
     *
     * @return string|null
     */
    public function getDeviceRenderOptions()
    {
        return $this->container['device_render_options'];
    }

    /**
     * Sets device_render_options
     *
     * @param string|null $device_render_options Объект с типами UI, поддерживаемыми 3DS SDK и приложением ТСТ, передаваемый в кодировке base64. По умолчанию поддерживаются все возможные типы UI
     *
     * @return self
     */
    public function setDeviceRenderOptions($device_render_options)
    {
        if (is_null($device_render_options)) {
            throw new \InvalidArgumentException('non-nullable device_render_options cannot be null');
        }
        if ((mb_strlen($device_render_options) > 256)) {
            throw new \InvalidArgumentException('invalid length for $device_render_options when calling TdsApplicationAttributes., must be smaller than or equal to 256.');
        }
        if ((mb_strlen($device_render_options) < 1)) {
            throw new \InvalidArgumentException('invalid length for $device_render_options when calling TdsApplicationAttributes., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~]*$/", ObjectSerializer::toString($device_render_options)))) {
            throw new \InvalidArgumentException("invalid value for \$device_render_options when calling TdsApplicationAttributes., must conform to the pattern /^[ -~]*$/.");
        }

        $this->container['device_render_options'] = $device_render_options;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


