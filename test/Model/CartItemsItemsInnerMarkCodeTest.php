<?php
/**
 * CartItemsItemsInnerMarkCodeTest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Sberbank
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API платёжного шлюза Сбербанка
 *
 * Настоящий документ описывает программные интерфейсы платёжного шлюза Сбербанка, который позволяет проводить платежи в интернет-эквайринге.
 *
 * The version of the OpenAPI document: 1.0.7
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace Sberbank\Test\Model;

use PHPUnit\Framework\TestCase;

/**
 * CartItemsItemsInnerMarkCodeTest Class Doc Comment
 *
 * @category    Class
 * @description __Тег ФФД 1163.__ Используется только при продаже маркированных товаров в ФФД 1.2. Блок элементов с кодом товара. Обязательна передача одного из полей. Правила формирования значений:  Приложение №2 к Приказу ФНС России от 14.09.2020 №ЕД-7-20/662 (Таблица 118)
 * @package     Sberbank
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class CartItemsItemsInnerMarkCodeTest extends TestCase
{

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test "CartItemsItemsInnerMarkCode"
     */
    public function testCartItemsItemsInnerMarkCode()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "gs1m"
     */
    public function testPropertyGs1m()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "fur"
     */
    public function testPropertyFur()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "gs10"
     */
    public function testPropertyGs10()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "ean8"
     */
    public function testPropertyEan8()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "ean13"
     */
    public function testPropertyEan13()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "itf14"
     */
    public function testPropertyItf14()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "short"
     */
    public function testPropertyShort()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "unknown"
     */
    public function testPropertyUnknown()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
